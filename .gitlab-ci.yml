default:
  image: registry.gitlab.com/rigetti/qcs/utilities/rust-ci-image:latest
  tags:
    - ec2-docker

stages:
  - test
  - publish

include:
  # Run all tasks on merge requests rather than branches
  # See https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
  - template: "Workflows/MergeRequest-Pipelines.gitlab-ci.yml"
  - project: rigetti/qcs/utilities/qcs-ci-toolkit
    file: gitlab-ci/git/setup.yaml
  - project: rigetti/qcs/utilities/qcs-ci-toolkit
    file: gitlab-ci/knope/install.yaml
  - project: rigetti/qcs/utilities/qcs-ci-toolkit
    file: 
      - gitlab-ci/protoc/install.yaml
      - gitlab-ci/qcs/setup-credentials.yaml

.install_deps: &install_deps
  - apt-get update -y
  - apt-get install -y zip curl git
  - ldd --version

Lint:
  stage: test
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cargo --version
    - cargo make clippy

Test:
  stage: test
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cargo --version
    - cargo make test

Check Proxy:
  stage: test
  services:
    - name: serjs/go-socks5-proxy
      alias: socks5
    - name: ubuntu/squid
      alias: squid
  variables:
    SOCKS5_URL: socks5://socks5:1080
    SQUID_URL: http://squid:3128
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cargo --version
    - cargo test -F docker -p proxy-test
  when: manual


Release:
  stage: publish
  variables:
    GIT_DEPTH: 0
  before_script:
    - *install_deps
    - !reference [.setup_git]
    - git_config_insteadof "${CI_PROJECT_PATH}" "${API_CLIENT_PUSH_TOKEN}"
    - git remote set-url origin "https://git:${API_CLIENT_PUSH_TOKEN}@gitlab.com/${CI_PROJECT_PATH}"
    - !reference [.install_protoc]
    - !reference [.install_knope]
  script:
    - git checkout $CI_COMMIT_BRANCH  # Have to be on branch to push back
    - knope release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      # We cut new releases manually to avoid unnecessary versions & releases from immaterial changes
      when: manual

Release RC:
  stage: publish
  variables:
    GIT_DEPTH: 0
  before_script:
    - *install_deps
    - !reference [.setup_git]
    - git_config_insteadof "${CI_PROJECT_PATH}" "${API_CLIENT_PUSH_TOKEN}"
    - git remote set-url origin "https://git:${API_CLIENT_PUSH_TOKEN}@gitlab.com/${CI_PROJECT_PATH}"
    - !reference [.install_protoc]
    - !reference [.install_knope]
  script:
    - git checkout $CI_COMMIT_BRANCH  # Have to be on branch to push back
    - knope prerelease --verbose
  needs: []
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: manual


Release Dry Run:
  stage: publish
  variables:
    GIT_DEPTH: 0
  before_script:
    - *install_deps
    - !reference [.setup_git]
    - git_config_insteadof "${CI_PROJECT_PATH}" "${API_CLIENT_PUSH_TOKEN}"
    - git remote set-url origin "https://git:${API_CLIENT_PUSH_TOKEN}@gitlab.com/${CI_PROJECT_PATH}"
    - echo "KNOPE_VERSION=$KNOPE_VERSION"
    - !reference [.install_protoc]
    - !reference [.install_knope]
  script:
    - git checkout $CI_COMMIT_BRANCH  # Have to be on branch to push back
    - knope release --dry-run

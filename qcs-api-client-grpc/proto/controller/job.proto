syntax = "proto3";
package models.controller;
option go_package = "gitlab.com/rigetti/share/domain-model-specification/golang/controller";
import "controller/readout.proto";

// An EncryptedControllerJob includes the configuration necessary to execute an instance of
// the contained job data on control hardware in encrypted format.
message EncryptedControllerJob {

    // Encrypted form of ControllerJob.
    optional bytes job = 1;

    // Information about the means by which `inner` was encrypted.
    optional .models.controller.JobEncryption encryption = 2;

    reserved 3;
    reserved "memory_values";}

// Information about the means by which a ControllerJob was encrypted.
message JobEncryption {

    // Opaque identifier for the key to use in decryption
    optional string key_id = 1;

    // If relevant, the nonce to use in decryption
    optional bytes nonce = 2;
}
message JobExecutionConfiguration {

    // Memory values to be patched into the program by the Controller Service prior to execution.
    // The string key is used to match the name of the memory region as defined in the
    // InstrumentProgram. The type of the DataValue must match the defined type of the region.
    map<string, .models.controller.DataValue> memory_values = 3;
}

// This data is used to patch values into a pre-compiled binary prior to
// execution, and to retrieve data from memory following execution.
message MemoryRegion {

    // The type of data expected for patch values
    optional .models.controller.MemoryRegion.DataType data_type = 1;

    // The count of elements within the region
    optional uint32 length = 2;

    // The byte offset of the value within sequencer shared memory. This is used
    // for both patching of memory prior to execution, and retrieval of the memory
    // following execution.
    optional uint32 memory_offset = 3;

    // The different types of data available for patching
    enum DataType {
        UNKNOWN_DATATYPE = 0;

        // Raw binary data; length is in bytes
        BINARY = 1;

        // 64-bit signed integer
        INTEGER = 2;

        // 64-bit signed floating-point number
        REAL = 3;
    }
}

// The value of the data to insert into memory corresponding to a MemoryRegion.
message DataValue {
    oneof value {

        // Binary value, corresponding to both BIT and OCTET data types in Quil.
        .models.controller.BinaryDataValue binary = 101;

        // Signed integer value, corresponding to INTEGER in Quil.
        .models.controller.IntegerDataValue integer = 102;

        // Real number value, corresponding to REAL in Quil.
        .models.controller.RealDataValue real = 103;
    }
}

// Binary value, corresponding to both BIT and OCTET data types in Quil.
message BinaryDataValue {
    optional bytes data = 1;
}

// Signed integer value, corresponding to INTEGER in Quil.
message IntegerDataValue {
    repeated int64 data = 1;
}

// Real number value, corresponding to REAL in Quil.
message RealDataValue {
    repeated double data = 1;
}

// A ControllerJobExecutionResult includes the result data from a single
// execution of a ControllerJob.
message ControllerJobExecutionResult {

    // The contents of each memory region, keyed on region name
    map<string, .models.controller.DataValue> memory_values = 1;

    // The contents of readout data published by the readout transformation
    // pipeline, keyed on the node ID of the publishing readout transformation
    // node.
    map<string, .models.controller.ReadoutValues> readout_values = 2;
    optional .models.controller.ControllerJobExecutionResult.Status status = 3;

    // Optional message providing context to the result's status.
    optional string status_message = 4;

    // Duration (Âµs) job held exclusive access to control hardware.
    optional uint64 execution_duration_microseconds = 5;
    enum Status {
        UNKNOWN = 0;
        SUCCESS = 1;

        // Failure state caused by an error in the service.
        SERVICE_FAILURE = 2;

        // Failure state caused by user.
        USER_FAILURE = 3;

        // Job was cancelled by user before execution completed.
        USER_CANCELLATION = 4;
    }
}

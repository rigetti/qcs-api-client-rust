{{#interfaces}}
use crate::models::{{{this}}};
{{/interfaces}}

{{#description}}}
/// {{{ description }}}
{{/description}}
{{^description}}
/// Autogenerated `oneOf` implementation of `{{{name}}}`.
{{/description}}
///
/// # Default impl
///
/// In order to continue implementing [`Default`] on normal schema models, `oneOf` schemas must also implement
/// [`Default`]. In keeping with the upstream templates, this override defaults to the first enum variant:
/// `{{{classname}}}::{{#oneOf}}{{#-first}}{{{this}}}{{/-first}}{{/oneOf}}`.
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged, deny_unknown_fields)]
pub enum {{{classname}}} {
{{#oneOf}}
{{#lambda.titlecase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.titlecase}}({{{this}}}),
{{/oneOf}}
}

{{#oneOf}}
impl From<{{{this}}}> for {{{classname}}} {
    fn from(variant: {{{this}}}) -> Self {
        Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.titlecase}}(variant)
    }
}
{{/oneOf}}

impl Default for {{{classname}}} {
    fn default() -> Self {
        {{#oneOf}}
        {{#-first}}
        Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.titlecase}}({{{this}}}::default())
        {{/-first}}
        {{/oneOf}}
    }
}

impl {{{classname}}} {
{{#oneOf}}
    pub fn is_{{#lambda.lowercase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.lowercase}}(&self) -> bool {
        matches!(self, Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.titlecase}}(_))
    }

    pub fn as_{{#lambda.lowercase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.lowercase}}(&self) -> Option<&{{{this}}}> {
        if let
        Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.titlecase}}(inner) =
        self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_{{#lambda.lowercase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.lowercase}}(self) ->
    Result<{{{this}}}, Self> {
        if let
        Self::{{#lambda.titlecase}}{{#lambda.camelcase}}{{{this}}}{{/lambda.camelcase}}{{/lambda.titlecase}}(inner) =
        self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
{{/oneOf}}
}

/*
 * Rigetti QCS API
 *
 * # Introduction  This is the documentation for the Rigetti QCS HTTP API.  You can find out more about Rigetti at [https://rigetti.com](https://rigetti.com), and also interact with QCS via the web at [https://qcs.rigetti.com](https://qcs.rigetti.com).  This API is documented in **OpenAPI format** and so is compatible with the dozens of language-specific client generators available [here](https://github.com/OpenAPITools/openapi-generator) and elsewhere on the web.  # Principles  This API follows REST design principles where appropriate, and otherwise an HTTP RPC paradigm. We adhere to the Google [API Improvement Proposals](https://google.aip.dev/general) where reasonable to provide a consistent, intuitive developer experience. HTTP response codes match their specifications, and error messages fit a common format.  # Authentication  All access to the QCS API requires OAuth2 authentication provided by Okta. You can request access [here](https://www.rigetti.com/get-quantum). Once you have a user account, you can download your access token from QCS [here](https://qcs.rigetti.com/auth/token).   That access token is valid for 24 hours after issuance. The value of `access_token` within the JSON file is the token used for authentication (don't use the entire JSON file).  Authenticate requests using the `Authorization` header and a `Bearer` prefix:  ``` curl --header \"Authorization: Bearer eyJraW...Iow\" ```  # Quantum Processor Access  Access to the quantum processors themselves is not yet provided directly by this HTTP API, but is instead performed over ZeroMQ/[rpcq](https://github.com/rigetti/rpcq). Until that changes, we suggest using [pyquil](https://github.com/rigetti/pyquil) to build and execute quantum programs via the Legacy API.  # Legacy API  Our legacy HTTP API remains accessible at https://forest-server.qcs.rigetti.com, and it shares a source of truth with this API's services. You can use either service with the same user account and means of authentication. We strongly recommend using the API documented here, as the legacy API is on the path to deprecation.
 *
 * The version of the OpenAPI document: 2020-07-31
 * Contact: support@rigetti.com
 * Generated by: https://openapi-generator.tech
 */

mod manual_serde;

use crate::models::CwChannel;
use crate::models::LegacyUsrpSequencer;
use crate::models::QdoFastFluxChannel;
use crate::models::QdoSequencer;
use crate::models::QdoSlowFluxChannel;
use crate::models::QfdChannel;
use crate::models::QfdSequencer;
use crate::models::Qfdx2Sequencer;
use crate::models::QgsChannel;
use crate::models::QgsSequencer;
use crate::models::Qgsx2Sequencer;
use crate::models::QrrChannel;
use crate::models::QrrSequencer;
use crate::models::QrtChannel;
use crate::models::QrtSequencer;
use crate::models::Qrtx2Sequencer;
use crate::models::UsiCardSequencer;
use crate::models::UsiTargetSequencer;
use crate::models::YokogawaGs200Channel;

/// Autogenerated `oneOf` implementation of `Channels`.
///
/// # Default impl
///
/// In order to continue implementing [`Default`] on normal schema models, `oneOf` schemas must also implement
/// [`Default`]. In keeping with the upstream templates, this override defaults to the first enum variant:
/// `Channels::CwChannel`.
#[derive(Clone, Debug, PartialEq)]
pub enum Channels {
    CwChannel(crate::models::CwChannel),
    QdoFastFluxChannel(crate::models::QdoFastFluxChannel),
    QdoSlowFluxChannel(crate::models::QdoSlowFluxChannel),
    QfdChannel(crate::models::QfdChannel),
    QgsChannel(crate::models::QgsChannel),
    QrrChannel(crate::models::QrrChannel),
    QrtChannel(crate::models::QrtChannel),
    YokogawaGs200Channel(crate::models::YokogawaGs200Channel),
    LegacyUsrpSequencer(crate::models::LegacyUsrpSequencer),
    QfdSequencer(crate::models::QfdSequencer),
    Qfdx2Sequencer(crate::models::Qfdx2Sequencer),
    QdoSequencer(crate::models::QdoSequencer),
    QgsSequencer(crate::models::QgsSequencer),
    Qgsx2Sequencer(crate::models::Qgsx2Sequencer),
    QrrSequencer(crate::models::QrrSequencer),
    QrtSequencer(crate::models::QrtSequencer),
    Qrtx2Sequencer(crate::models::Qrtx2Sequencer),
    UsiCardSequencer(crate::models::UsiCardSequencer),
    UsiTargetSequencer(crate::models::UsiTargetSequencer),
    SerdeJsonValue(serde_json::Value),
}

impl From<CwChannel> for Channels {
    fn from(variant: CwChannel) -> Self {
        Self::CwChannel(variant)
    }
}
impl From<LegacyUsrpSequencer> for Channels {
    fn from(variant: LegacyUsrpSequencer) -> Self {
        Self::LegacyUsrpSequencer(variant)
    }
}
impl From<QdoFastFluxChannel> for Channels {
    fn from(variant: QdoFastFluxChannel) -> Self {
        Self::QdoFastFluxChannel(variant)
    }
}
impl From<QdoSequencer> for Channels {
    fn from(variant: QdoSequencer) -> Self {
        Self::QdoSequencer(variant)
    }
}
impl From<QdoSlowFluxChannel> for Channels {
    fn from(variant: QdoSlowFluxChannel) -> Self {
        Self::QdoSlowFluxChannel(variant)
    }
}
impl From<QfdChannel> for Channels {
    fn from(variant: QfdChannel) -> Self {
        Self::QfdChannel(variant)
    }
}
impl From<QfdSequencer> for Channels {
    fn from(variant: QfdSequencer) -> Self {
        Self::QfdSequencer(variant)
    }
}
impl From<Qfdx2Sequencer> for Channels {
    fn from(variant: Qfdx2Sequencer) -> Self {
        Self::Qfdx2Sequencer(variant)
    }
}
impl From<QgsChannel> for Channels {
    fn from(variant: QgsChannel) -> Self {
        Self::QgsChannel(variant)
    }
}
impl From<QgsSequencer> for Channels {
    fn from(variant: QgsSequencer) -> Self {
        Self::QgsSequencer(variant)
    }
}
impl From<Qgsx2Sequencer> for Channels {
    fn from(variant: Qgsx2Sequencer) -> Self {
        Self::Qgsx2Sequencer(variant)
    }
}
impl From<QrrChannel> for Channels {
    fn from(variant: QrrChannel) -> Self {
        Self::QrrChannel(variant)
    }
}
impl From<QrrSequencer> for Channels {
    fn from(variant: QrrSequencer) -> Self {
        Self::QrrSequencer(variant)
    }
}
impl From<QrtChannel> for Channels {
    fn from(variant: QrtChannel) -> Self {
        Self::QrtChannel(variant)
    }
}
impl From<QrtSequencer> for Channels {
    fn from(variant: QrtSequencer) -> Self {
        Self::QrtSequencer(variant)
    }
}
impl From<Qrtx2Sequencer> for Channels {
    fn from(variant: Qrtx2Sequencer) -> Self {
        Self::Qrtx2Sequencer(variant)
    }
}
impl From<UsiCardSequencer> for Channels {
    fn from(variant: UsiCardSequencer) -> Self {
        Self::UsiCardSequencer(variant)
    }
}
impl From<UsiTargetSequencer> for Channels {
    fn from(variant: UsiTargetSequencer) -> Self {
        Self::UsiTargetSequencer(variant)
    }
}
impl From<YokogawaGs200Channel> for Channels {
    fn from(variant: YokogawaGs200Channel) -> Self {
        Self::YokogawaGs200Channel(variant)
    }
}
impl From<serde_json::Value> for Channels {
    fn from(variant: serde_json::Value) -> Self {
        Self::SerdeJsonValue(variant)
    }
}

impl Default for Channels {
    fn default() -> Self {
        Self::CwChannel(CwChannel::default())
    }
}

impl Channels {
    pub fn is_cw_channel(&self) -> bool {
        matches!(self, Self::CwChannel(_))
    }

    pub fn as_cw_channel(&self) -> Option<&CwChannel> {
        if let Self::CwChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_cw_channel(self) -> Result<CwChannel, Self> {
        if let Self::CwChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_legacy_usrp_sequencer(&self) -> bool {
        matches!(self, Self::LegacyUsrpSequencer(_))
    }

    pub fn as_legacy_usrp_sequencer(&self) -> Option<&LegacyUsrpSequencer> {
        if let Self::LegacyUsrpSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_legacy_usrp_sequencer(self) -> Result<LegacyUsrpSequencer, Self> {
        if let Self::LegacyUsrpSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qdo_fast_flux_channel(&self) -> bool {
        matches!(self, Self::QdoFastFluxChannel(_))
    }

    pub fn as_qdo_fast_flux_channel(&self) -> Option<&QdoFastFluxChannel> {
        if let Self::QdoFastFluxChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qdo_fast_flux_channel(self) -> Result<QdoFastFluxChannel, Self> {
        if let Self::QdoFastFluxChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qdo_sequencer(&self) -> bool {
        matches!(self, Self::QdoSequencer(_))
    }

    pub fn as_qdo_sequencer(&self) -> Option<&QdoSequencer> {
        if let Self::QdoSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qdo_sequencer(self) -> Result<QdoSequencer, Self> {
        if let Self::QdoSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qdo_slow_flux_channel(&self) -> bool {
        matches!(self, Self::QdoSlowFluxChannel(_))
    }

    pub fn as_qdo_slow_flux_channel(&self) -> Option<&QdoSlowFluxChannel> {
        if let Self::QdoSlowFluxChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qdo_slow_flux_channel(self) -> Result<QdoSlowFluxChannel, Self> {
        if let Self::QdoSlowFluxChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qfd_channel(&self) -> bool {
        matches!(self, Self::QfdChannel(_))
    }

    pub fn as_qfd_channel(&self) -> Option<&QfdChannel> {
        if let Self::QfdChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qfd_channel(self) -> Result<QfdChannel, Self> {
        if let Self::QfdChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qfd_sequencer(&self) -> bool {
        matches!(self, Self::QfdSequencer(_))
    }

    pub fn as_qfd_sequencer(&self) -> Option<&QfdSequencer> {
        if let Self::QfdSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qfd_sequencer(self) -> Result<QfdSequencer, Self> {
        if let Self::QfdSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qfdx2_sequencer(&self) -> bool {
        matches!(self, Self::Qfdx2Sequencer(_))
    }

    pub fn as_qfdx2_sequencer(&self) -> Option<&Qfdx2Sequencer> {
        if let Self::Qfdx2Sequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qfdx2_sequencer(self) -> Result<Qfdx2Sequencer, Self> {
        if let Self::Qfdx2Sequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qgs_channel(&self) -> bool {
        matches!(self, Self::QgsChannel(_))
    }

    pub fn as_qgs_channel(&self) -> Option<&QgsChannel> {
        if let Self::QgsChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qgs_channel(self) -> Result<QgsChannel, Self> {
        if let Self::QgsChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qgs_sequencer(&self) -> bool {
        matches!(self, Self::QgsSequencer(_))
    }

    pub fn as_qgs_sequencer(&self) -> Option<&QgsSequencer> {
        if let Self::QgsSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qgs_sequencer(self) -> Result<QgsSequencer, Self> {
        if let Self::QgsSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qgsx2_sequencer(&self) -> bool {
        matches!(self, Self::Qgsx2Sequencer(_))
    }

    pub fn as_qgsx2_sequencer(&self) -> Option<&Qgsx2Sequencer> {
        if let Self::Qgsx2Sequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qgsx2_sequencer(self) -> Result<Qgsx2Sequencer, Self> {
        if let Self::Qgsx2Sequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qrr_channel(&self) -> bool {
        matches!(self, Self::QrrChannel(_))
    }

    pub fn as_qrr_channel(&self) -> Option<&QrrChannel> {
        if let Self::QrrChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qrr_channel(self) -> Result<QrrChannel, Self> {
        if let Self::QrrChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qrr_sequencer(&self) -> bool {
        matches!(self, Self::QrrSequencer(_))
    }

    pub fn as_qrr_sequencer(&self) -> Option<&QrrSequencer> {
        if let Self::QrrSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qrr_sequencer(self) -> Result<QrrSequencer, Self> {
        if let Self::QrrSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qrt_channel(&self) -> bool {
        matches!(self, Self::QrtChannel(_))
    }

    pub fn as_qrt_channel(&self) -> Option<&QrtChannel> {
        if let Self::QrtChannel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qrt_channel(self) -> Result<QrtChannel, Self> {
        if let Self::QrtChannel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qrt_sequencer(&self) -> bool {
        matches!(self, Self::QrtSequencer(_))
    }

    pub fn as_qrt_sequencer(&self) -> Option<&QrtSequencer> {
        if let Self::QrtSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qrt_sequencer(self) -> Result<QrtSequencer, Self> {
        if let Self::QrtSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_qrtx2_sequencer(&self) -> bool {
        matches!(self, Self::Qrtx2Sequencer(_))
    }

    pub fn as_qrtx2_sequencer(&self) -> Option<&Qrtx2Sequencer> {
        if let Self::Qrtx2Sequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_qrtx2_sequencer(self) -> Result<Qrtx2Sequencer, Self> {
        if let Self::Qrtx2Sequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_usi_card_sequencer(&self) -> bool {
        matches!(self, Self::UsiCardSequencer(_))
    }

    pub fn as_usi_card_sequencer(&self) -> Option<&UsiCardSequencer> {
        if let Self::UsiCardSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_usi_card_sequencer(self) -> Result<UsiCardSequencer, Self> {
        if let Self::UsiCardSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_usi_target_sequencer(&self) -> bool {
        matches!(self, Self::UsiTargetSequencer(_))
    }

    pub fn as_usi_target_sequencer(&self) -> Option<&UsiTargetSequencer> {
        if let Self::UsiTargetSequencer(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_usi_target_sequencer(self) -> Result<UsiTargetSequencer, Self> {
        if let Self::UsiTargetSequencer(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_yokogawa_gs200_channel(&self) -> bool {
        matches!(self, Self::YokogawaGs200Channel(_))
    }

    pub fn as_yokogawa_gs200_channel(&self) -> Option<&YokogawaGs200Channel> {
        if let Self::YokogawaGs200Channel(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_yokogawa_gs200_channel(self) -> Result<YokogawaGs200Channel, Self> {
        if let Self::YokogawaGs200Channel(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
    pub fn is_serde_json_value(&self) -> bool {
        matches!(self, Self::SerdeJsonValue(_))
    }

    pub fn as_serde_json_value(&self) -> Option<&serde_json::Value> {
        if let Self::SerdeJsonValue(inner) = self {
            Some(inner)
        } else {
            None
        }
    }

    pub fn into_serde_json_value(self) -> Result<serde_json::Value, Self> {
        if let Self::SerdeJsonValue(inner) = self {
            Ok(inner)
        } else {
            Err(self)
        }
    }
}

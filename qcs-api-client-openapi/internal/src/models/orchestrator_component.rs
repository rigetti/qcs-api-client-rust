/*
 * Rigetti QCS API
 *
 * # Introduction  This is the documentation for the Rigetti QCS HTTP API.  You can find out more about Rigetti at [https://rigetti.com](https://rigetti.com), and also interact with QCS via the web at [https://qcs.rigetti.com](https://qcs.rigetti.com).  This API is documented in **OpenAPI format** and so is compatible with the dozens of language-specific client generators available [here](https://github.com/OpenAPITools/openapi-generator) and elsewhere on the web.  # Principles  This API follows REST design principles where appropriate, and otherwise an HTTP RPC paradigm. We adhere to the Google [API Improvement Proposals](https://google.aip.dev/general) where reasonable to provide a consistent, intuitive developer experience. HTTP response codes match their specifications, and error messages fit a common format.  # Authentication  All access to the QCS API requires OAuth2 authentication provided by Okta. You can request access [here](https://www.rigetti.com/get-quantum). Once you have a user account, you can download your access token from QCS [here](https://qcs.rigetti.com/auth/token).   That access token is valid for 24 hours after issuance. The value of `access_token` within the JSON file is the token used for authentication (don't use the entire JSON file).  Authenticate requests using the `Authorization` header and a `Bearer` prefix:  ``` curl --header \"Authorization: Bearer eyJraW...Iow\" ```  # Quantum Processor Access  Access to the quantum processors themselves is not yet provided directly by this HTTP API, but is instead performed over ZeroMQ/[rpcq](https://github.com/rigetti/rpcq). Until that changes, we suggest using [pyquil](https://github.com/rigetti/pyquil) to build and execute quantum programs via the Legacy API.  # Legacy API  Our legacy HTTP API remains accessible at https://forest-server.qcs.rigetti.com, and it shares a source of truth with this API's services. You can use either service with the same user account and means of authentication. We strongly recommend using the API documented here, as the legacy API is on the path to deprecation.
 *
 * The version of the OpenAPI document: 2020-07-31
 * Contact: support@rigetti.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, Default, PartialEq, Serialize, Deserialize)]
pub struct OrchestratorComponent {
    /// Command line arguments to append to the default values in the orchestrator start command
    #[serde(rename = "commandLineArgs", skip_serializing_if = "Option::is_none")]
    pub command_line_args: Option<Vec<String>>,
    /// If present, forward all jobs to a controller rather than handling them locally
    #[serde(
        rename = "controllerServiceEndpoint",
        skip_serializing_if = "Option::is_none"
    )]
    pub controller_service_endpoint: Option<String>,
    /// CPU Allocation, in MHz, required by this component. Whether it is a hard or soft limit is specified by the component itself. By default, it is a soft limit, and components are allowed to burst above when there is unused capacity.
    #[serde(rename = "cpuLimit", skip_serializing_if = "Option::is_none")]
    pub cpu_limit: Option<i64>,
    /// Which docker tag to pull and start. [Example: v1.0.0]
    #[serde(rename = "dockerTag", skip_serializing_if = "Option::is_none")]
    pub docker_tag: Option<String>,
    /// Whether to enable the Nomad health check script for this component's task
    #[serde(rename = "enableHealthCheck", skip_serializing_if = "Option::is_none")]
    pub enable_health_check: Option<bool>,
    /// Whether to send errors and data to Sentry
    #[serde(rename = "enableSentry", skip_serializing_if = "Option::is_none")]
    pub enable_sentry: Option<bool>,
    /// The QCS service environment from which this stack will request data
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<String>,
    /// Environment variables to set for this component. To unset a variable which has been set by component defaults, set it to an empty string. Note that not all environment variables may be overridden. Examples of such variables are those set by Nomad to provide secret values to the task container.
    #[serde(
        rename = "environmentVariables",
        skip_serializing_if = "Option::is_none"
    )]
    pub environment_variables: Option<::std::collections::HashMap<String, String>>,
    /// Which branch of the relevant repository to associate with this endpoint. May be used for automatic upgrades on updates to the git branch.
    #[serde(rename = "gitBranch", skip_serializing_if = "Option::is_none")]
    pub git_branch: Option<String>,
    /// Whether to include default command line arguments in the orchestrator start command. These include rack configuration path and certain ports. Disable this for fine-grained control over command line arguments or if using an older version of Lodgepole with different arguments.
    #[serde(
        rename = "includeDefaultCommandLineArgs",
        skip_serializing_if = "Option::is_none"
    )]
    pub include_default_command_line_args: Option<bool>,
    /// Whether this component is a sidecar or not.
    #[serde(rename = "isSidecar", skip_serializing_if = "Option::is_none")]
    pub is_sidecar: Option<bool>,
    /// Fixed network ports keyed on port name
    #[serde(rename = "listenPorts", skip_serializing_if = "Option::is_none")]
    pub listen_ports: Option<::std::collections::HashMap<String, i64>>,
    /// The logging provider handles the logs emitted on stdout/stderr
    #[serde(rename = "loggingProvider", skip_serializing_if = "Option::is_none")]
    pub logging_provider: Option<Box<crate::models::LoggingTarget>>,
    /// Memory allocation in MB required by this component.
    #[serde(rename = "memorySoftLimit", skip_serializing_if = "Option::is_none")]
    pub memory_soft_limit: Option<i64>,
    /// Whether to start the orchestrator in \"mock\" mode, where mock responses are generated in-process rather than being dispatched to control hardware
    #[serde(rename = "mock", skip_serializing_if = "Option::is_none")]
    pub mock: Option<bool>,
    #[serde(rename = "rackConfig", skip_serializing_if = "Option::is_none")]
    pub rack_config: Option<Box<crate::models::ExplicitRackConfiguration>>,
    /// The contents of the DeployedRack/Rack YAML to deploy with the service, as a YAML string. Use this option when deploying an old version of Lodgepole with rack components not supported by the Rigetti Domain Model / Treeline (such as VNAs).
    #[serde(rename = "rackYamlString", skip_serializing_if = "Option::is_none")]
    pub rack_yaml_string: Option<String>,
    /// Instrument used as a reference when synchronizing time amongst instruments
    #[serde(
        rename = "timeReferenceInstrument",
        skip_serializing_if = "Option::is_none"
    )]
    pub time_reference_instrument: Option<String>,
    /// Instrument trigger time offset in seconds
    #[serde(rename = "triggerTimeOffset", skip_serializing_if = "Option::is_none")]
    pub trigger_time_offset: Option<String>,
    /// Whether to pass through access to USB instruments with host VISA configuration
    #[serde(rename = "visaPassthrough", skip_serializing_if = "Option::is_none")]
    pub visa_passthrough: Option<bool>,
}

impl OrchestratorComponent {
    pub fn new() -> OrchestratorComponent {
        OrchestratorComponent {
            command_line_args: None,
            controller_service_endpoint: None,
            cpu_limit: None,
            docker_tag: None,
            enable_health_check: None,
            enable_sentry: None,
            environment: None,
            environment_variables: None,
            git_branch: None,
            include_default_command_line_args: None,
            is_sidecar: None,
            listen_ports: None,
            logging_provider: None,
            memory_soft_limit: None,
            mock: None,
            rack_config: None,
            rack_yaml_string: None,
            time_reference_instrument: None,
            trigger_time_offset: None,
            visa_passthrough: None,
        }
    }
}

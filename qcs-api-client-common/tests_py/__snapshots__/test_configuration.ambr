# serializer version: 1
# name: TestClientConfiguration.test_default
  ClientConfiguration { profile: "production", api_url: "https://api.qcs.rigetti.com", grpc_api_url: "https://grpc.qcs.rigetti.com", quilc_url: "tcp://127.0.0.1:5555", qvm_url: "http://127.0.0.1:5000", auth_server: AuthServer { client_id: "client_id_production", issuer: "https://auth.qcs.rigetti.com/oauth2/production" }, tokens: Some(TokenDispatcher { lock: RwLock { data: Tokens { bearer_access_token: "access_production", refresh_token: "refresh_production", auth_server: AuthServer { client_id: "client_id_production", issuer: "https://auth.qcs.rigetti.com/oauth2/production" } } }, refreshing: Mutex { data: false }, notify_refreshed: Notify { state: 0, waiters: Mutex(Mutex { data: LinkedList { head: None, tail: None }, poisoned: false, .. }) } }) }
# ---
# name: TestClientConfiguration.test_load_profile
  ClientConfiguration { profile: "test", api_url: "https://test.qcs.rigetti.com", grpc_api_url: "https://grpc.test.qcs.rigetti.com", quilc_url: "tcp://127.0.0.1:5555", qvm_url: "http://127.0.0.1:5000", auth_server: AuthServer { client_id: "client_id_test", issuer: "https://auth.test.qcs.rigetti.com/oauth2/test" }, tokens: Some(TokenDispatcher { lock: RwLock { data: Tokens { bearer_access_token: "access_test", refresh_token: "refresh_test", auth_server: AuthServer { client_id: "client_id_test", issuer: "https://auth.test.qcs.rigetti.com/oauth2/test" } } }, refreshing: Mutex { data: false }, notify_refreshed: Notify { state: 0, waiters: Mutex(Mutex { data: LinkedList { head: None, tail: None }, poisoned: false, .. }) } }) }
# ---
# name: TestClientConfigurationBuilder.test_build
  ClientConfiguration { profile: "default", api_url: "builder_api_url", grpc_api_url: "builder_grpc_api_url", quilc_url: "builder_quilc_url", qvm_url: "builder_qvm_url", auth_server: AuthServer { client_id: "builder_client_id", issuer: "builder_issuer" }, tokens: Some(TokenDispatcher { lock: RwLock { data: Tokens { bearer_access_token: "builder_access_token", refresh_token: "builder_refresh_token", auth_server: AuthServer { client_id: "builder_client_id", issuer: "builder_issuer" } } }, refreshing: Mutex { data: false }, notify_refreshed: Notify { state: 0, waiters: Mutex(Mutex { data: LinkedList { head: None, tail: None }, poisoned: false, .. }) } }) }
# ---

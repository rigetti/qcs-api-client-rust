/*
 * Rigetti QCS API
 *
 * # Introduction  This is the documentation for the Rigetti QCS HTTP API.  You can find out more about Rigetti at [https://rigetti.com](https://rigetti.com), and also interact with QCS via the web at [https://qcs.rigetti.com](https://qcs.rigetti.com).  This API is documented in **OpenAPI format** and so is compatible with the dozens of language-specific client generators available [here](https://github.com/OpenAPITools/openapi-generator) and elsewhere on the web.  # Principles  This API follows REST design principles where appropriate, and otherwise an HTTP RPC paradigm. We adhere to the Google [API Improvement Proposals](https://google.aip.dev/general) where reasonable to provide a consistent, intuitive developer experience. HTTP response codes match their specifications, and error messages fit a common format.  # Authentication  All access to the QCS API requires OAuth2 authentication provided by Okta. You can request access [here](https://www.rigetti.com/get-quantum). Once you have a user account, you can download your access token from QCS [here](https://qcs.rigetti.com/auth/token).   That access token is valid for 24 hours after issuance. The value of `access_token` within the JSON file is the token used for authentication (don't use the entire JSON file).  Authenticate requests using the `Authorization` header and a `Bearer` prefix:  ``` curl --header \"Authorization: Bearer eyJraW...Iow\" ```  # Quantum Processor Access  Access to the quantum processors themselves is not yet provided directly by this HTTP API, but is instead performed over ZeroMQ/[rpcq](https://gitlab.com/rigetti/rpcq). Until that changes, we suggest using [pyquil](https://gitlab.com/rigetti/pyquil) to build and execute quantum programs via the Legacy API.  # Legacy API  Our legacy HTTP API remains accessible at https://forest-server.qcs.rigetti.com, and it shares a source of truth with this API's services. You can use either service with the same user account and means of authentication. We strongly recommend using the API documented here, as the legacy API is on the path to deprecation.
 *
 * The version of the OpenAPI document: 2020-07-31
 * Contact: support@rigetti.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::apis::ResponseContent;
use reqwest::StatusCode;
use serde::{Deserialize, Serialize};

/// struct for typed errors of method [`internal_create_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalCreateEndpointError {
    Status400(crate::models::Error),
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_delete_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalDeleteEndpointError {
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_delete_legacy_deployed_rack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalDeleteLegacyDeployedRackError {
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_delete_legacy_quantum_processor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalDeleteLegacyQuantumProcessorError {
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_delete_quantum_processor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalDeleteQuantumProcessorError {
    Status400(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_get_default_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalGetDefaultEndpointError {
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_get_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalGetEndpointError {
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_get_legacy_deployed_rack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalGetLegacyDeployedRackError {
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_list_endpoint_engagements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalListEndpointEngagementsError {
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_list_endpoints`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalListEndpointsError {
    Status422(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_put_legacy_deployed_rack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalPutLegacyDeployedRackError {
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_put_legacy_quantum_processor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalPutLegacyQuantumProcessorError {
    Status400(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_put_quantum_processor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalPutQuantumProcessorError {
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_set_default_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalSetDefaultEndpointError {
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_update_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalUpdateEndpointError {
    Status400(crate::models::Error),
    Status404(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_update_legacy_quantum_processor`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalUpdateLegacyQuantumProcessorError {
    Status400(crate::models::Error),
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_endpoint_templates`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListEndpointTemplatesError {
    Status422(crate::models::ValidationError),
    UnknownValue(serde_json::Value),
}

async fn internal_create_endpoint_inner(
    configuration: &configuration::Configuration,
    internal_create_endpoint_parameters: crate::models::InternalCreateEndpointParameters,
) -> Result<crate::models::InternalEndpoint, Error<InternalCreateEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/endpoints",
        local_var_configuration.qcs_config.api_url()
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder = local_var_req_builder.json(&internal_create_endpoint_parameters);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalCreateEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create an endpoint associated with your user account. Unlike the public route, these endpoints may use a production template and set any engagement policy.
pub async fn internal_create_endpoint(
    configuration: &configuration::Configuration,
    internal_create_endpoint_parameters: crate::models::InternalCreateEndpointParameters,
) -> Result<crate::models::InternalEndpoint, Error<InternalCreateEndpointError>> {
    match internal_create_endpoint_inner(configuration, internal_create_endpoint_parameters.clone())
        .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_create_endpoint_inner(configuration, internal_create_endpoint_parameters)
                    .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_delete_endpoint_inner(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
) -> Result<serde_json::Value, Error<InternalDeleteEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/endpoints/{endpointId}",
        local_var_configuration.qcs_config.api_url(),
        endpointId = crate::apis::urlencode(endpoint_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalDeleteEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete an endpoint, releasing its resources. This operation is not reversible.
pub async fn internal_delete_endpoint(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
) -> Result<serde_json::Value, Error<InternalDeleteEndpointError>> {
    match internal_delete_endpoint_inner(configuration, endpoint_id.clone()).await {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_delete_endpoint_inner(configuration, endpoint_id).await
            }
            _ => Err(err),
        },
    }
}
async fn internal_delete_legacy_deployed_rack_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<serde_json::Value, Error<InternalDeleteLegacyDeployedRackError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/legacy/quantumProcessors/{quantumProcessorId}/deployedRack",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalDeleteLegacyDeployedRackError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete the Deployed Rack for a Quantum Processor
pub async fn internal_delete_legacy_deployed_rack(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<serde_json::Value, Error<InternalDeleteLegacyDeployedRackError>> {
    match internal_delete_legacy_deployed_rack_inner(configuration, quantum_processor_id.clone())
        .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_delete_legacy_deployed_rack_inner(configuration, quantum_processor_id)
                    .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_delete_legacy_quantum_processor_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<serde_json::Value, Error<InternalDeleteLegacyQuantumProcessorError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/legacy/quantumProcessors/{quantumProcessorId}",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalDeleteLegacyQuantumProcessorError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a legacy (Forest Server) Quantum Processor.
pub async fn internal_delete_legacy_quantum_processor(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<serde_json::Value, Error<InternalDeleteLegacyQuantumProcessorError>> {
    match internal_delete_legacy_quantum_processor_inner(
        configuration,
        quantum_processor_id.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_delete_legacy_quantum_processor_inner(configuration, quantum_processor_id)
                    .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_delete_quantum_processor_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<crate::models::QuantumProcessor, Error<InternalDeleteQuantumProcessorError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/quantumProcessors/{quantumProcessorId}",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalDeleteQuantumProcessorError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a quantum processor. This operation will ensure no dangling resources exist on the quantum processor.
pub async fn internal_delete_quantum_processor(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<crate::models::QuantumProcessor, Error<InternalDeleteQuantumProcessorError>> {
    match internal_delete_quantum_processor_inner(configuration, quantum_processor_id.clone()).await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_delete_quantum_processor_inner(configuration, quantum_processor_id).await
            }
            _ => Err(err),
        },
    }
}
async fn internal_get_default_endpoint_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<crate::models::InternalEndpoint, Error<InternalGetDefaultEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/quantumProcessors/{quantumProcessorId}/endpoints:getDefault",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalGetDefaultEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve the endpoint set as \"default\" for the given Quantum Processor.  If no endpoint is set as the default, return \"not found.\"
pub async fn internal_get_default_endpoint(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
) -> Result<crate::models::InternalEndpoint, Error<InternalGetDefaultEndpointError>> {
    match internal_get_default_endpoint_inner(configuration, quantum_processor_id.clone()).await {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_get_default_endpoint_inner(configuration, quantum_processor_id).await
            }
            _ => Err(err),
        },
    }
}
async fn internal_get_endpoint_inner(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
) -> Result<crate::models::InternalEndpoint, Error<InternalGetEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/endpoints/{endpointId}",
        local_var_configuration.qcs_config.api_url(),
        endpointId = crate::apis::urlencode(endpoint_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalGetEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a specific endpoint by its ID.
pub async fn internal_get_endpoint(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
) -> Result<crate::models::InternalEndpoint, Error<InternalGetEndpointError>> {
    match internal_get_endpoint_inner(configuration, endpoint_id.clone()).await {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_get_endpoint_inner(configuration, endpoint_id).await
            }
            _ => Err(err),
        },
    }
}
async fn internal_get_legacy_deployed_rack_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    mock: Option<bool>,
) -> Result<crate::models::DeployedRack, Error<InternalGetLegacyDeployedRackError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/legacy/quantumProcessors/{quantumProcessorId}/deployedRack",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = mock {
        local_var_req_builder =
            local_var_req_builder.query(&[("mock", &local_var_str.to_string())]);
    }

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalGetLegacyDeployedRackError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve the Deployed Rack for a Quantum Processor.
pub async fn internal_get_legacy_deployed_rack(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    mock: Option<bool>,
) -> Result<crate::models::DeployedRack, Error<InternalGetLegacyDeployedRackError>> {
    match internal_get_legacy_deployed_rack_inner(
        configuration,
        quantum_processor_id.clone(),
        mock.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_get_legacy_deployed_rack_inner(configuration, quantum_processor_id, mock)
                    .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_list_endpoint_engagements_inner(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
    page_size: Option<i32>,
    page_token: Option<&str>,
) -> Result<
    crate::models::ListEndpointEngagementsResponse,
    Error<InternalListEndpointEngagementsError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/endpoints/{endpointId}/engagements",
        local_var_configuration.qcs_config.api_url(),
        endpointId = crate::apis::urlencode(endpoint_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("pageToken", &local_var_str.to_string())]);
    }

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalListEndpointEngagementsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all currently-active engagements by all users on an endpoint
pub async fn internal_list_endpoint_engagements(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
    page_size: Option<i32>,
    page_token: Option<&str>,
) -> Result<
    crate::models::ListEndpointEngagementsResponse,
    Error<InternalListEndpointEngagementsError>,
> {
    match internal_list_endpoint_engagements_inner(
        configuration,
        endpoint_id.clone(),
        page_size.clone(),
        page_token.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_list_endpoint_engagements_inner(
                    configuration,
                    endpoint_id,
                    page_size,
                    page_token,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_list_endpoints_inner(
    configuration: &configuration::Configuration,
    filter: Option<&str>,
    page_size: Option<i32>,
    page_token: Option<&str>,
) -> Result<crate::models::InternalListEndpointsResponse, Error<InternalListEndpointsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/endpoints",
        local_var_configuration.qcs_config.api_url()
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_token {
        local_var_req_builder =
            local_var_req_builder.query(&[("pageToken", &local_var_str.to_string())]);
    }

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalListEndpointsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all endpoints, optionally filtering by attribute.
pub async fn internal_list_endpoints(
    configuration: &configuration::Configuration,
    filter: Option<&str>,
    page_size: Option<i32>,
    page_token: Option<&str>,
) -> Result<crate::models::InternalListEndpointsResponse, Error<InternalListEndpointsError>> {
    match internal_list_endpoints_inner(
        configuration,
        filter.clone(),
        page_size.clone(),
        page_token.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_list_endpoints_inner(configuration, filter, page_size, page_token).await
            }
            _ => Err(err),
        },
    }
}
async fn internal_put_legacy_deployed_rack_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_put_legacy_deployed_rack_request: crate::models::InternalPutLegacyDeployedRackRequest,
) -> Result<crate::models::DeployedRack, Error<InternalPutLegacyDeployedRackError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/legacy/quantumProcessors/{quantumProcessorId}/deployedRack",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder = local_var_req_builder.json(&internal_put_legacy_deployed_rack_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalPutLegacyDeployedRackError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create or update the Deployed Rack for a Quantum Processor.
pub async fn internal_put_legacy_deployed_rack(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_put_legacy_deployed_rack_request: crate::models::InternalPutLegacyDeployedRackRequest,
) -> Result<crate::models::DeployedRack, Error<InternalPutLegacyDeployedRackError>> {
    match internal_put_legacy_deployed_rack_inner(
        configuration,
        quantum_processor_id.clone(),
        internal_put_legacy_deployed_rack_request.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_put_legacy_deployed_rack_inner(
                    configuration,
                    quantum_processor_id,
                    internal_put_legacy_deployed_rack_request,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_put_legacy_quantum_processor_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_put_legacy_quantum_processor_request: crate::models::InternalPutLegacyQuantumProcessorRequest,
) -> Result<crate::models::LegacyQuantumProcessor, Error<InternalPutLegacyQuantumProcessorError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/legacy/quantumProcessors/{quantumProcessorId}",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder =
        local_var_req_builder.json(&internal_put_legacy_quantum_processor_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalPutLegacyQuantumProcessorError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create or replace the legacy Forest Server configuration of a device.
pub async fn internal_put_legacy_quantum_processor(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_put_legacy_quantum_processor_request: crate::models::InternalPutLegacyQuantumProcessorRequest,
) -> Result<crate::models::LegacyQuantumProcessor, Error<InternalPutLegacyQuantumProcessorError>> {
    match internal_put_legacy_quantum_processor_inner(
        configuration,
        quantum_processor_id.clone(),
        internal_put_legacy_quantum_processor_request.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_put_legacy_quantum_processor_inner(
                    configuration,
                    quantum_processor_id,
                    internal_put_legacy_quantum_processor_request,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_put_quantum_processor_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_put_quantum_processor_request: crate::models::InternalPutQuantumProcessorRequest,
) -> Result<crate::models::QuantumProcessor, Error<InternalPutQuantumProcessorError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/quantumProcessors/{quantumProcessorId}",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder = local_var_req_builder.json(&internal_put_quantum_processor_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalPutQuantumProcessorError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create or replace a Quantum Processor by ID.
pub async fn internal_put_quantum_processor(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_put_quantum_processor_request: crate::models::InternalPutQuantumProcessorRequest,
) -> Result<crate::models::QuantumProcessor, Error<InternalPutQuantumProcessorError>> {
    match internal_put_quantum_processor_inner(
        configuration,
        quantum_processor_id.clone(),
        internal_put_quantum_processor_request.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_put_quantum_processor_inner(
                    configuration,
                    quantum_processor_id,
                    internal_put_quantum_processor_request,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_set_default_endpoint_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    set_default_endpoint_request: crate::models::SetDefaultEndpointRequest,
) -> Result<crate::models::InternalEndpoint, Error<InternalSetDefaultEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/quantumProcessors/{quantumProcessorId}/endpoints:setDefault",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder = local_var_req_builder.json(&set_default_endpoint_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalSetDefaultEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the default endpoint for a quantum processor to the provided value, or clear it if no value is sent.
pub async fn internal_set_default_endpoint(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    set_default_endpoint_request: crate::models::SetDefaultEndpointRequest,
) -> Result<crate::models::InternalEndpoint, Error<InternalSetDefaultEndpointError>> {
    match internal_set_default_endpoint_inner(
        configuration,
        quantum_processor_id.clone(),
        set_default_endpoint_request.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_set_default_endpoint_inner(
                    configuration,
                    quantum_processor_id,
                    set_default_endpoint_request,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_update_endpoint_inner(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
    internal_update_endpoint_parameters: crate::models::InternalUpdateEndpointParameters,
) -> Result<crate::models::InternalEndpoint, Error<InternalUpdateEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/endpoints/{endpointId}",
        local_var_configuration.qcs_config.api_url(),
        endpointId = crate::apis::urlencode(endpoint_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder = local_var_req_builder.json(&internal_update_endpoint_parameters);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalUpdateEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trigger a sync operation on the endpoint, updating it to the latest configuration.
pub async fn internal_update_endpoint(
    configuration: &configuration::Configuration,
    endpoint_id: &str,
    internal_update_endpoint_parameters: crate::models::InternalUpdateEndpointParameters,
) -> Result<crate::models::InternalEndpoint, Error<InternalUpdateEndpointError>> {
    match internal_update_endpoint_inner(
        configuration,
        endpoint_id.clone(),
        internal_update_endpoint_parameters.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_update_endpoint_inner(
                    configuration,
                    endpoint_id,
                    internal_update_endpoint_parameters,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn internal_update_legacy_quantum_processor_inner(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_update_legacy_quantum_processor_request: crate::models::InternalUpdateLegacyQuantumProcessorRequest,
) -> Result<crate::models::LegacyQuantumProcessor, Error<InternalUpdateLegacyQuantumProcessorError>>
{
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/internal/legacy/quantumProcessors/{quantumProcessorId}",
        local_var_configuration.qcs_config.api_url(),
        quantumProcessorId = crate::apis::urlencode(quantum_processor_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    local_var_req_builder =
        local_var_req_builder.json(&internal_update_legacy_quantum_processor_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<InternalUpdateLegacyQuantumProcessorError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Patch an existing LegacyQuantumProcessor.
pub async fn internal_update_legacy_quantum_processor(
    configuration: &configuration::Configuration,
    quantum_processor_id: &str,
    internal_update_legacy_quantum_processor_request: crate::models::InternalUpdateLegacyQuantumProcessorRequest,
) -> Result<crate::models::LegacyQuantumProcessor, Error<InternalUpdateLegacyQuantumProcessorError>>
{
    match internal_update_legacy_quantum_processor_inner(
        configuration,
        quantum_processor_id.clone(),
        internal_update_legacy_quantum_processor_request.clone(),
    )
    .await
    {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                internal_update_legacy_quantum_processor_inner(
                    configuration,
                    quantum_processor_id,
                    internal_update_legacy_quantum_processor_request,
                )
                .await
            }
            _ => Err(err),
        },
    }
}
async fn list_endpoint_templates_inner(
    configuration: &configuration::Configuration,
) -> Result<crate::models::ListEndpointTemplatesResponse, Error<ListEndpointTemplatesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/endpointTemplates",
        local_var_configuration.qcs_config.api_url()
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    // Use QCS Bearer token
    let token = configuration.qcs_config.get_bearer_access_token().await?;
    local_var_req_builder = local_var_req_builder.bearer_auth(token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();

    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListEndpointTemplatesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all templates available for use in endpoint construction.
pub async fn list_endpoint_templates(
    configuration: &configuration::Configuration,
) -> Result<crate::models::ListEndpointTemplatesResponse, Error<ListEndpointTemplatesError>> {
    match list_endpoint_templates_inner(configuration).await {
        Ok(result) => Ok(result),
        Err(err) => match err.status_code() {
            Some(StatusCode::FORBIDDEN | StatusCode::UNAUTHORIZED) => {
                configuration.qcs_config.refresh().await?;
                list_endpoint_templates_inner(configuration).await
            }
            _ => Err(err),
        },
    }
}

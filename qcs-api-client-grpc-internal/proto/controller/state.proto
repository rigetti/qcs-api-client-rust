//*
//
// Messages related to the _state_ of a Controller, which consists of the settings on its instruments
//

syntax = "proto3";
package models.controller;
option go_package = "gitlab.com/rigetti/share/service-model/golang/controller";

// which variable of voltage or current is settable on the power supply
enum YokogawaGS200Mode {
    UNKNOWN_MODE = 0;
    VOLTAGE = 1;
    CURRENT = 2;
}

// Settings which are read from or written to the controller, depending on context
message ControllerSettings {

    // Keyed on instrument name
    map<string, .models.controller.InstrumentSettings> instrument_settings = 1;
}

// Settings for a given instrument
message InstrumentSettings {
    oneof settings {
        .models.controller.TsunamiInstrumentSettings tsunami_settings = 101;
        .models.controller.YokogawaGS200InstrumentSettings yokogawa_gs200_settings = 102;
    }
}
message TsunamiInstrumentSettings {

    // Keyed on card index (slot)
    map<uint32, .models.controller.TsunamiCardSettings> card_settings = 1;
}
message TsunamiCardSettings {
    oneof settings {
        .models.controller.TsunamiQDOCardSettings qdo = 101;
        .models.controller.TsunamiQFDCardSettings qfd = 102;
        .models.controller.TsunamiQFDx2CardSettings qfd_x2 = 103;
        .models.controller.TsunamiQGSCardSettings qgs = 104;
        .models.controller.TsunamiQGSx2CardSettings qgsx2 = 105;
        .models.controller.TsunamiQRRx2CardSettings qrr_x2 = 106;
        .models.controller.TsunamiQRTx2HiCardSettings qrt_x2_hi = 107;
        .models.controller.TsunamiQRTx2LoCardSettings qrt_x2_lo = 108;
        .models.controller.TsunamiValonCardSettings valon = 109;
    }
}
message TsunamiQDOCardSettings {
    map<uint32, .models.controller.TsunamiQDOChannelSettings> channel_settings = 1;
}
message TsunamiQDOChannelSettings {
    oneof channel {
        .models.controller.TsunamiQDOSlowFluxChannelSettings slow_flux = 101;
        .models.controller.TsunamiQDOFastFluxChannelSettings fast_flux = 102;
    }
}
message TsunamiQDOSlowFluxChannelSettings {
    optional double direct_current = 1;
    // amperes

    optional bool relay_closed = 2;
    // true means direct current can flow

}
message TsunamiQDOFastFluxChannelSettings {
    optional int32 dac_dc_offset = 1;
    // DC offset of the RF DAC, as a (dimensionless) 16-bit signed value.

}
message TsunamiQFDCardSettings {
    map<uint32, .models.controller.TsunamiQFDChannelSettings> channel_settings = 1;
}
message TsunamiQFDChannelSettings {
    optional double direct_current = 1;
    // amperes

    optional bool relay_closed = 2;
    // true means direct current can flow

    optional double attenuation = 3;
    // decibels, +3.0 is half power

}
message TsunamiQFDx2CardSettings {
    map<uint32, .models.controller.TsunamiQFDx2ChannelSettings> channel_settings = 1;
}
message TsunamiQFDx2ChannelSettings {
    optional double direct_current = 1;
    // amperes

    optional bool relay_closed = 2;
    // true means direct current can flow

    optional double attenuation = 3;
    // decibels, +3.0 is half power

    oneof frequency {
        uint64 center_frequency = 101;
        // hertz

        uint64 frequency_tuning_word = 102;
        // 48-bit binary word for NCO

    }
}
message TsunamiQGSCardSettings {
    map<uint32, .models.controller.TsunamiQGSChannelSettings> channel_settings = 1;
}
message TsunamiQGSChannelSettings {
    optional double attenuation = 1;
    // decibels, +3.0 is half power

    oneof frequency {
        uint64 center_frequency = 101;
        // hertz

        uint64 frequency_tuning_word = 102;
        // 48-bit binary word for NCO

    }
}
message TsunamiQGSx2CardSettings {
    map<uint32, .models.controller.TsunamiQGSx2ChannelSettings> channel_settings = 1;
}
message TsunamiQGSx2ChannelSettings {
    optional double attenuation = 1;
    // decibels, +3.0 is half power

    oneof frequency {
        uint64 center_frequency = 101;
        // hertz

        uint64 frequency_tuning_word = 102;
        // 48-bit binary word for NCO

    }
}
message TsunamiQRRx2CardSettings {

    // channel name => channel settings
    map<uint32, .models.controller.TsunamiQRRx2ChannelSettings> channel_settings = 1;
}
message TsunamiQRRx2ChannelSettings {
    optional double attenuation = 1;
    // decibels, +3.0 is half power

}
message TsunamiQRTx2HiCardSettings {

    // channel name => channel settings
    map<uint32, .models.controller.TsunamiQRTx2HiChannelSettings> channel_settings = 1;
}
message TsunamiQRTx2HiChannelSettings {
    optional double attenuation = 1;
    // decibels, +3.0 is half power

    oneof frequency {
        uint64 center_frequency = 101;
        // hertz

        uint64 frequency_tuning_word = 102;
        // 48-bit binary word for NCO

    }
}
message TsunamiQRTx2LoCardSettings {

    // channel name => channel settings
    map<uint32, .models.controller.TsunamiQRTx2LoChannelSettings> channel_settings = 1;
}
message TsunamiQRTx2LoChannelSettings {
    optional double attenuation = 1;
    // decibels, +3.0 is half power

    oneof frequency {
        uint64 center_frequency = 101;
        // hertz

        uint64 frequency_tuning_word = 102;
        // 48-bit binary word for NCO

    }
}
message TsunamiValonCardSettings {
    map<uint32, .models.controller.TsunamiValonChannelSettings> channel_settings = 3;
}
message TsunamiValonChannelSettings {
    optional double output_power = 1;
    // dBm (decibels relative to 1 milliwatt)

    optional uint64 frequency = 2;
    // hertz

    optional bool relay_closed = 3;
    // true means direct current can flow

}

// Yokogawa

message YokogawaGS200InstrumentSettings {
    map<string, .models.controller.YokogawaGS200ChannelSettings> channel_settings = 1;
}
message YokogawaGS200ChannelSettings {
    optional .models.controller.YokogawaGS200Mode mode = 1;
    optional double output_level = 2;
    // amperes or volts, depending on mode

    optional double slew_rate = 3;
    // amperes or volts per second, depending on mode

    optional bool output_enabled = 4;
    // true means voltage or current is maintained

    optional double range = 5;
    // amperes or volts, depending on mode

}

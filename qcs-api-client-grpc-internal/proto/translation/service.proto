syntax = "proto3";
package services.translation;
option go_package = "gitlab.com/rigetti/share/service-model/golang/translation";
import "google/protobuf/timestamp.proto";
import "controller/job.proto";
import "controller/state.proto";
import "translation/metadata.proto";

// Options specified on RPCs that translate Quil to a ControllerJob. Intended to support custom pre-processing
// and other translation features.
message TranslationOptions {

    // When set, the client program will be pre-processed via the Q-CTRL API
    // before translation.
    .services.translation.TranslationOptions.QCtrl q_ctrl = 1;
    message QCtrl {

        // Indicates whether Q-CTRL pre-processing should consider the set of
        // program qubits to be fixed. If true, Q-CTRL may only remap qubits to
        // others specified within the user-submitted program. If false, Q-CTRL may
        // remap program qubits to any physical qubit on the device in order to
        // optimize the program.
        //
        // Note, this attribute is used to set `fixed_layouts` attribute on Q-CTRL's
        // `CompileOptions` message. Q-CTRL supports compilation of mutliple programs
        // at once, while Rigetti's `TranslationOptions` are currently scoped to a
        // single program. As such, we use `fixed_layout` rather than `fixed_layouts`.
        optional bool fixed_layout = 1;
    }

    // The backend to use for translation, to include relevant options.
    // If neither is specified, the implementing service may select the
    // translation backend and options.
    oneof translation_backend {
        .services.translation.BackendV1Options v1 = 101;
        .services.translation.BackendV2Options v2 = 102;
    }
}

// Options for translation backend V1
message BackendV1Options {
}

// Options for translation backend V2
message BackendV2Options {

    // Whether to prepend the default calibrations for a particular QPU to the program.
    // This may be set to false if you have prepended your own calibrations, or are submitting
    // a pre-calibrated pulse-level program which does not need further expansion.
    optional bool prepend_default_calibrations = 1;

    // The number of seconds to stall at the beginning of each num-shots loop iteration in order to allow adiabatic reset.
    optional double passive_reset_delay_seconds = 2;

    // What factor of the minimum theoretically required time to await the transfer of readout data to ensure that link bandwidth is not exceeded.
    // Higher values are less likely to cause flaky or hard-to-diagnose program failures. 2.0 is recommended for safety in most programs.
    optional double data_transfer_bandwidth_delay_factor = 3;

    // Whether to disable bounds checks on dynamic memory access. Only available to authorized users.
    optional bool allow_unchecked_pointer_arithmetic = 4;

    // Whether to skip program frame validation against Rigetti calibrations.
    optional bool allow_frame_redefinition = 5;

    // Whether to force all real-time-classified readout values to be stored in sequencer memory. If false or unset, only readout values that are
    // read by the program are written to sequencer memory following readout.
    optional bool store_all_readout_values = 6;

    // How to determine the readout propagation delay.
    oneof readout_propagation_delay {

        // The number of nanoseconds to wait for readout values to propagate.
        uint32 nanoseconds = 101;
    }
}
message TranslateQuilToSignedControllerJobRequest {
    string quantum_processor_id = 1;
    string quil_program = 2;

    // Specification of optional translation features.
    .services.translation.TranslationOptions options = 4;
    oneof num_shots {
        uint32 num_shots_value = 3;
    }
}
message TranslateQuilToSignedControllerJobResponse {
    .models.controller.SignedControllerJob job = 1;
    .models.translation.QuilTranslationMetadata metadata = 2;
}
message BatchTranslateQuilToSignedControllerJobRequest {
    repeated .services.translation.TranslateQuilToSignedControllerJobRequest requests = 1;
}
message BatchTranslateQuilToSignedControllerJobResponse {
    repeated .services.translation.TranslateQuilToSignedControllerJobResponse responses = 1;
}
message TranslateQuilToEncryptedControllerJobRequest {
    string quantum_processor_id = 1;
    string quil_program = 2;

    // Specification of optional translation features.
    .services.translation.TranslationOptions options = 4;
    oneof num_shots {
        uint32 num_shots_value = 3;
    }
}
message TranslateQuilToEncryptedControllerJobResponse {
    .models.controller.EncryptedControllerJob job = 1;
    .models.translation.QuilTranslationMetadata metadata = 2;
}
message BatchTranslateQuilToEncryptedControllerJobRequest {
    repeated .services.translation.TranslateQuilToEncryptedControllerJobRequest requests = 1;
}
message BatchTranslateQuilToEncryptedControllerJobResponse {
    repeated .services.translation.TranslateQuilToEncryptedControllerJobResponse responses = 1;
}
message QuantumProcessorQuilCalibrationProgram {

    // The Quil program containing the requested calibrations
    string quil_calibration_program = 1;
}
message GetQuantumProcessorQuilCalibrationProgramRequest {

    // The quantum processor for which to retrieve the calibration program.
    string quantum_processor_id = 1;
}
message QuantumProcessorControllerSettings {

    // The controller settings to be attached to compiled jobs
    .models.controller.ControllerSettings controller_settings = 1;
}
message GetQuantumProcessorControllerSettingsRequest {

    // The quantum processor for which to retrieve the controller settings
    string quantum_processor_id = 1;
}

// Data required as inputs to the translation process.
//
// The calibration program and controller settings are grouped together in this
// single request because they correspond to one another and are valid in a shared
// context.
message QuantumProcessorQuilTranslationConfiguration {

    // The quantum processor described by these calibrations
    string quantum_processor_id = 1;

    // The Quil program containing the calibrations
    string quil_calibration_program = 2;

    // The controller settings to be attached to compiled jobs
    .models.controller.ControllerSettings controller_settings = 3;

    // The date and time at which the calibrations were last updated.
    // If omitted from a request, the service may substitute a timestamp of its own.
    .google.protobuf.Timestamp last_updated = 4;
}
message UpdateQuantumProcessorQuilTranslationConfigurationRequest {

    // The program to store
    .services.translation.QuantumProcessorQuilTranslationConfiguration quantum_processor_quil_translation_configuration = 1;

    // Whether to allow updating settings which do not yet exist
    // https://google.aip.dev/134#create-or-update
    bool allow_missing = 2;
}
message HealthCheckRequest {
    string service = 1;
}
message HealthCheckResponse {
    .services.translation.HealthCheckResponse.ServingStatus status = 1;
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
    }
}

service Translation {

    rpc TranslateQuilToSignedControllerJob(.services.translation.TranslateQuilToSignedControllerJobRequest) returns (.services.translation.TranslateQuilToSignedControllerJobResponse) {
    }

    // Translate multiple programs to signed Controller jobs in a single request. As a batched request, this is an atomic operation. Failure to translate one program will result in a failed
    // RPC response.
    rpc BatchTranslateQuilToSignedControllerJob(.services.translation.BatchTranslateQuilToSignedControllerJobRequest) returns (.services.translation.BatchTranslateQuilToSignedControllerJobResponse) {
    }

    rpc TranslateQuilToEncryptedControllerJob(.services.translation.TranslateQuilToEncryptedControllerJobRequest) returns (.services.translation.TranslateQuilToEncryptedControllerJobResponse) {
    }

    // Translate multiple programs to encrypted Controller jobs in a single request. As a batched request, this is an atomic operation. Failure to translate one program will result in a failed
    // RPC response.
    rpc BatchTranslateQuilToEncryptedControllerJob(.services.translation.BatchTranslateQuilToEncryptedControllerJobRequest) returns (.services.translation.BatchTranslateQuilToEncryptedControllerJobResponse) {
    }

    // Get the current calibration program for the given quantum processor.
    rpc GetQuantumProcessorQuilCalibrationProgram(.services.translation.GetQuantumProcessorQuilCalibrationProgramRequest) returns (.services.translation.QuantumProcessorQuilCalibrationProgram) {
    }

    // Get the current controller settings for the given quantum processor.
    rpc GetQuantumProcessorControllerSettings(.services.translation.GetQuantumProcessorControllerSettingsRequest) returns (.services.translation.QuantumProcessorControllerSettings) {
    }

    // Update the input translation configuration stored by the service.
    rpc UpdateQuantumProcessorQuilCalibrationProgram(.services.translation.UpdateQuantumProcessorQuilTranslationConfigurationRequest) returns (.services.translation.QuantumProcessorQuilTranslationConfiguration) {
    }

    rpc Check(.services.translation.HealthCheckRequest) returns (.services.translation.HealthCheckResponse) {
    }
}

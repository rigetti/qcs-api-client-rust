openapi: 3.0.2
info:
  x-logo: https://qcs.rigetti.com/static/img/rigetti-logo.svg
  contact:
    email: support@rigetti.com
    url: https://rigetti.zendesk.com
  title: Rigetti QCS API
  version: 2020-07-31
  description: >
    # Introduction


    This is the documentation for the Rigetti QCS HTTP API.


    You can find out more about Rigetti at [https://rigetti.com](https://rigetti.com), and also

    interact with QCS via the web at [https://qcs.rigetti.com](https://qcs.rigetti.com).


    This API is documented in **OpenAPI format** and so is compatible with the dozens of

    language-specific client generators available

    [here](https://github.com/OpenAPITools/openapi-generator) and elsewhere on the web.


    # Principles


    This API follows REST design principles where appropriate, and otherwise an HTTP RPC paradigm.

    We adhere to the Google [API Improvement Proposals](https://google.aip.dev/general) where

    reasonable to provide a consistent, intuitive developer experience. HTTP response codes match

    their specifications, and error messages fit a common format.


    # Authentication


    All access to the QCS API requires OAuth2 authentication provided by Okta. You can request

    access [here](https://www.rigetti.com/get-quantum). Once you have a user account, you can download

    your access token from QCS [here](https://qcs.rigetti.com/auth/token). 


    That access token is valid for 24 hours after issuance. The value of `access_token` within the

    JSON file is the token used for authentication (don't use the entire JSON file).


    Authenticate requests using the `Authorization` header and a `Bearer` prefix:


    ```

    curl --header "Authorization: Bearer eyJraW...Iow"

    ```


    # Quantum Processor Access


    Access to the quantum processors themselves is not yet provided directly by this HTTP API, but

    is instead performed over ZeroMQ/[rpcq](https://github.com/rigetti/rpcq). Until that changes,

    we suggest using [pyquil](https://github.com/rigetti/pyquil) to build and execute quantum

    programs via the Legacy API.


    # Legacy API


    Our legacy HTTP API remains accessible at https://forest-server.qcs.rigetti.com, and it shares

    a source of truth with this API's services. You can use either service with the same user

    account and means of authentication. We strongly recommend using the API documented here, as the

    legacy API is on the path to deprecation.
servers:
  - description: Rigetti API
    url: https://api.qcs.rigetti.com
tags:
  - description: Internal Rigetti administrative Access
    name: internal
    x-displayName: Internal
  - description: Legacy routes and objects
    name: legacy
    x-displayName: Legacy
  - description: The Quantum Processor is the heart of the Rigetti services.
    name: quantumProcessors
    x-displayName: Quantum Processors
  - description: The Endpoint is the means of access to a Quantum Processor.
    name: endpoints
    x-displayName: Quantum Processor Endpoints
  - description: The Engagement is the authorization mechanism for access to the
      Quantum Processor.
    name: engagements
    x-displayName: Engagements
  - description: |
      Translation is the process of transforming Quil into programs ready 
      for execution on a Quantum Processor.
    name: translation
    x-displayName: Translation
  - name: account
    x-displayName: Account
  - name: authentication
    x-displayName: Authentication
  - description: Check for the latest SDK versions.
    name: clientApplications
    x-displayName: SDK Versions
  - description: Find existing time on a Rigetti QPU and reserve it.
    name: reservations
    x-displayName: Reservations
  - name: filterParameter
    description: <SchemaDefinition schemaRef="#/components/schemas/Filter" />
    x-displayName: Filter Parameter
  - name: orderParameter
    description: <SchemaDefinition schemaRef="#/components/schemas/Order" />
    x-displayName: Order Parameter
  - name: errors
    description: >
      All service errors conform to the below schema.


      <SchemaDefinition schemaRef="#/components/schemas/Error" />


      `code` conforms to the conventional HTTP status code, but offers more granularity.


      | Code                                | HTTP Status Code | Notes                                                                               |

      |-------------------------------------|------------------|-------------------------------------------------------------------------------------|

      | unauthorized                        | 401              | If your token expires, we will return a 401 and you should refresh it accordingly\. |

      | forbidden                           | 403              |                                                                                     |

      | not\_found                          | 404              |                                                                                     |

      | insufficient\_payment               | 402              | Insufficient funds are available to book the reservation\.                          |

      | reservation\_unavailable            | 409              | The requested reservation time is not available\.                                   |

      | invalid\_input                      | 422              |                                                                                     |

      | invalid\_password\_reset\_token     | 422              |                                                                                     |

      | invalid\_email\_verification\_token | 422              |                                                                                     |


      Additionally, errors returned with code `invalid_input` *may* include additional detail under the `validationErrors`

      attribute. Note, not all validation errors will specify a `path`, but they will contain a message. Please heed those

      messages *in addition to* the top level error message.


      <SchemaDefinition schemaRef="#/components/schemas/ValidationError" />
    x-displayName: ""
x-tagGroups:
  - name: Account Management
    tags:
      - account
      - authentication
  - name: QPU Access
    tags:
      - endpoints
      - engagements
      - quantumProcessors
      - reservations
      - translation
  - name: SDKs
    tags:
      - clientApplications
  - name: Filtering and ordering
    tags:
      - filterParameter
      - orderParameter
  - name: Errors
    tags:
      - errors
paths:
  /:
    get:
      description: Retrieve the health status of the API
      operationId: GetHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"
          description: Critical services are healthy.
  /v1/:
    get:
      deprecated: true
      description: Endpoint to return a status 200 for load balancer health checks
      operationId: HealthCheckDeprecated
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      summary: Health Check
  /v1/endpointTemplates:
    get:
      description: List all templates available for use in endpoint construction.
      operationId: ListEndpointTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEndpointTemplatesResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: List Endpoint Templates
      tags:
        - endpoints
        - internal
  /v1/endpoints:
    get:
      description: List all endpoints, optionally filtering by attribute.
      operationId: ListEndpoints
      parameters:
        - description: Filtering logic specified using
            [rule-engine](https://zerosteiner.github.io/rule-engine/syntax.html)
            grammar
          in: query
          name: filter
          required: false
          schema:
            description: Filtering logic specified using
              [rule-engine](https://zerosteiner.github.io/rule-engine/syntax.html)
              grammar
            title: Filter
            type: string
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEndpointsResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: List Endpoints
      tags:
        - endpoints
    post:
      description: Create an endpoint associated with your user account.
      operationId: CreateEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEndpointParameters"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Create Endpoint
      tags:
        - endpoints
  "/v1/endpoints/{endpointId}":
    delete:
      description: Delete an endpoint, releasing its resources. This operation is not
        reversible.
      operationId: DeleteEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      responses:
        "204":
          description: Successful Response
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Delete Endpoint
      tags:
        - endpoints
    get:
      description: Retrieve a specific endpoint by its ID.
      operationId: GetEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Endpoint
      tags:
        - endpoints
  "/v1/endpoints/{endpointId}:restart":
    post:
      description: Restart an entire endpoint or a single component within an endpoint.
      operationId: RestartEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestartEndpointRequest"
      responses:
        "204":
          description: Successful Response
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Restart Endpoint
      tags:
        - endpoints
  /v1/engagements:
    post:
      description: >-
        Create a new engagement using the specified parameters.


        At least one of the following parameters must be supplied:

        - **endpointId**: The ID of the endpoint on which to engage.

        - **quantumProcessorId**: The ID of the quantum processor on which to engage, allowing the
            service to select a default endpoint. Ignored if **endpointId** is set.
      operationId: CreateEngagement
      parameters:
        - description: Either the client's user ID or the name of a group on behalf of
            which the client wishes to engage. May be overriden by accountId set
            in body.
          in: header
          name: x-qcs-account-id
          required: false
          schema:
            description: Either the client's user ID or the name of a group on behalf of
              which the client wishes to engage. May be overriden by accountId
              set in body.
            title: X-Qcs-Account-Id
            type: string
        - description: Indicates whether the engagement request should be made for the
            user or on behalf of a group. May be overriden by accountType set in
            body.
          in: header
          name: x-qcs-account-type
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/AccountType"
            description: Indicates whether the engagement request should be made for the
              user or on behalf of a group. May be overriden by accountType set
              in body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEngagementRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EngagementWithCredentials"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Validation error
        "503":
          description: Endpoint is temporarily unavailable, try again later.
          headers:
            Retry-After:
              description: Number of seconds to wait before retrying
              schema:
                type: integer
      security:
        - JWTBearer: []
      summary: Create Engagement
      tags:
        - engagements
  /v1/healthcheck:
    get:
      description: Endpoint to return a status 200 for load balancer health checks
      operationId: HealthCheck
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      summary: Health Check
  /v1/instructionSetArchitectures:
    get:
      description: Retrieve all Instruction Set Architectures available to the user.
      operationId: ListInstructionSetArchitectures
      parameters:
        - in: query
          name: pageSize
          required: false
          schema:
            default: 5
            exclusiveMinimum: 0
            maximum: 5
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListInstructionSetArchitectureResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: List Instruction Set Architectures
      tags:
        - quantumProcessors
  /v1/internal/endpoints:
    get:
      description: List all endpoints, optionally filtering by attribute.
      operationId: InternalListEndpoints
      parameters:
        - description: Filtering logic specified using
            [rule-engine](https://zerosteiner.github.io/rule-engine/syntax.html)
            grammar
          in: query
          name: filter
          required: false
          schema:
            description: Filtering logic specified using
              [rule-engine](https://zerosteiner.github.io/rule-engine/syntax.html)
              grammar
            title: Filter
            type: string
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListEndpointsResponse"
          description: Successful Response
        "422":
          description: Provided parameters were invalid.
      security:
        - JWTBearer: []
      summary: List Endpoints
      tags:
        - endpoints
        - internal
    post:
      description: >-
        Create an endpoint associated with your user account. Unlike the public
        route, these endpoints may

        use a production template and set any engagement policy.
      operationId: InternalCreateEndpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalCreateEndpointParameters"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalEndpoint"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Create Endpoint
      tags:
        - endpoints
        - internal
  "/v1/internal/endpoints/{endpointId}":
    delete:
      deprecated: true
      description: Delete an endpoint, releasing its resources. This operation is not
        reversible.
      operationId: InternalDeleteEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      responses:
        "204":
          description: Successful Response
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Delete Endpoint
      tags:
        - endpoints
        - internal
    get:
      description: Retrieve a specific endpoint by its ID.
      operationId: InternalGetEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalEndpoint"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Endpoint
      tags:
        - endpoints
        - internal
    patch:
      description: Trigger a sync operation on the endpoint, updating it to the latest
        configuration.
      operationId: InternalUpdateEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalUpdateEndpointParameters"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalEndpoint"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Update Endpoint
      tags:
        - endpoints
        - internal
    put:
      description: Completely replace the configuration of an endpoint by its ID,
        whether or not it already exists.
      operationId: InternalPutEndpoint
      parameters:
        - in: path
          name: endpointId
          required: true
          schema:
            title: Endpoint ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalUpdateEndpointParameters"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalEndpoint"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Put Endpoint
      tags:
        - endpoints
        - internal
  "/v1/internal/endpoints/{endpointId}/engagements":
    get:
      description: List all currently-active engagements by all users on an endpoint
      operationId: InternalListEndpointEngagements
      parameters:
        - description: Unique, opaque identifier for the endpoint
          in: path
          name: endpointId
          required: true
          schema:
            description: Unique, opaque identifier for the endpoint
            title: Endpoint ID
            type: string
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEndpointEngagementsResponse"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal List Endpoint Engagements
      tags:
        - internal
        - engagements
        - quantumProcessors
  /v1/internal/legacy/lattices:
    get:
      deprecated: true
      description: Retrieve all legacy (Forest Server) lattices available to the user.
      operationId: InternalListLegacyLattices
      parameters:
        - description: Whether to hide specifications for qubits and edges marked as "dead"
          in: query
          name: mask_specifications_to_isa
          required: false
          schema:
            default: true
            description: Whether to hide specifications for qubits and edges marked as
              "dead"
            title: Mask Specifications to ISA
            type: boolean
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListLegacyLatticesResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal List Legacy Lattices
      tags:
        - legacy
        - quantumProcessors
  "/v1/internal/legacy/lattices/{quantumProcessorId}":
    get:
      deprecated: true
      description: >-
        Retrieve a legacy lattice by name. Provided for Forest Server
        deprecation only. Note that it

        makes the key assumption that the legacy device/quantum processor has exactly one full-chip

        lattice by the same name.


        In practice, this retrieves the LegacyQuantumProcessor and then converts it to the lattice

        schema.
      operationId: InternalGetLegacyLattice
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
        - description: Whether to hide specifications for qubits and edges marked as "dead"
          in: query
          name: mask_specifications_to_isa
          required: false
          schema:
            default: true
            description: Whether to hide specifications for qubits and edges marked as
              "dead"
            title: Mask Specifications to ISA
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegacyLattice"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Get Legacy Lattice
      tags:
        - legacy
        - quantumProcessors
  /v1/internal/legacy/quantumProcessors:
    get:
      deprecated: true
      description: >-
        Retrieve all legacy (Forest Server) Quantum Processors available to the
        user.

        Translated from InstructionSetArchitecture.
      operationId: InternalListLegacyQuantumProcessors
      parameters:
        - description: Whether to hide specifications for qubits and edges marked as "dead"
          in: query
          name: mask_specifications_to_isa
          required: false
          schema:
            default: true
            description: Whether to hide specifications for qubits and edges marked as
              "dead"
            title: Mask Specifications to ISA
            type: boolean
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListLegacyQuantumProcessorsResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal List Legacy Quantum Processors
      tags:
        - legacy
        - quantumProcessors
  "/v1/internal/legacy/quantumProcessors/{quantumProcessorId}":
    delete:
      deprecated: true
      description: >-
        Delete a legacy (Forest Server) Quantum Processor.


        Deletes the underlying InstructionSetArchitecture from which this is derived.
      operationId: InternalDeleteLegacyQuantumProcessor
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Delete Legacy Quantum Processor
      tags:
        - internal
        - legacy
        - quantumProcessors
    get:
      deprecated: true
      description: |-
        Retrieve the legacy Forest Server configuration of a quantum processor.

        Derived from the stored InstructionSetArchitecture.
      operationId: InternalGetLegacyQuantumProcessor
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
        - description: Whether to hide specifications for qubits and edges marked as "dead"
          in: query
          name: mask_specifications_to_isa
          required: false
          schema:
            default: true
            description: Whether to hide specifications for qubits and edges marked as
              "dead"
            title: Mask Specifications to ISA
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegacyQuantumProcessor"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Get Legacy Quantum Processor
      tags:
        - legacy
        - quantumProcessors
    patch:
      deprecated: true
      description: Patch an existing LegacyQuantumProcessor.
      operationId: InternalUpdateLegacyQuantumProcessor
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalUpdateLegacyQuantumProcessorRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegacyQuantumProcessor"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Update Legacy Quantum Processor
      tags:
        - internal
        - legacy
        - quantumProcessors
    put:
      deprecated: true
      description: Create or replace the legacy Forest Server configuration of a device.
      operationId: InternalPutLegacyQuantumProcessor
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
        - description: If set, the server will interpret the LegacyDevice as being of the
            associated architecture layout.If omitted, the server will attempt
            to deduce this by inspecting LegacyDevice name or qubit numbering.
          in: query
          name: architectureFamily
          required: false
          schema:
            allOf:
              - $ref: "#/components/schemas/Family"
            description: If set, the server will interpret the LegacyDevice as being of the
              associated architecture layout.If omitted, the server will attempt
              to deduce this by inspecting LegacyDevice name or qubit numbering.
            title: Architecture Family
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalPutLegacyQuantumProcessorRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LegacyQuantumProcessor"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Put Legacy Quantum Processor
      tags:
        - internal
        - legacy
        - quantumProcessors
  "/v1/internal/legacy/quantumProcessors/{quantumProcessorId}/deployedRack":
    delete:
      deprecated: true
      description: Delete the Deployed Rack for a Quantum Processor
      operationId: InternalDeleteLegacyDeployedRack
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Delete Legacy Deployed Rack
      tags:
        - internal
        - legacy
        - quantumProcessors
    get:
      deprecated: true
      description: Retrieve the Deployed Rack for a Quantum Processor.
      operationId: InternalGetLegacyDeployedRack
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
        - in: query
          name: mock
          required: false
          schema:
            default: false
            title: Mock
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedRack"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Get Legacy Deployed Rack
      tags:
        - internal
        - legacy
        - quantumProcessors
    put:
      deprecated: true
      description: Create or update the Deployed Rack for a Quantum Processor.
      operationId: InternalPutLegacyDeployedRack
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalPutLegacyDeployedRackRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeployedRack"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Put Legacy Deployed Rack
      tags:
        - internal
        - legacy
        - quantumProcessors
  "/v1/internal/quantumProcessors/{quantumProcessorId}":
    delete:
      description: >-
        Delete a quantum processor. This operation will ensure no dangling
        resources exist on

        the quantum processor.
      operationId: InternalDeleteQuantumProcessor
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      responses:
        "204":
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Delete Quantum Processor
      tags:
        - internal
        - quantumProcessors
    put:
      description: Create or replace a Quantum Processor by ID.
      operationId: InternalPutQuantumProcessor
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalPutQuantumProcessorRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuantumProcessor"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Put Quantum Processor
      tags:
        - internal
        - quantumProcessors
  "/v1/internal/quantumProcessors/{quantumProcessorId}/accessors":
    put:
      description: Add/update a QuantumProcessorAccessor for the target QuantumProcessor.
      operationId: InternalPutQuantumProcessorAccessor
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalPutQuantumProcessorAccessorRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuantumProcessorAccessor"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Put Quantum Processor Accessor
      tags:
        - internal
        - quantumProcessors
  "/v1/internal/quantumProcessors/{quantumProcessorId}/accessors/{accessorId}":
    delete:
      description: >-
        Delete a quantum processor. This operation will ensure no dangling
        resources exist on

        the quantum processor.
      operationId: InternalDeleteQuantumProcessorAccessor
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
        - in: path
          name: accessorId
          required: true
          schema:
            title: Quantum Processor Accessor ID
            type: string
      responses:
        "204":
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Delete Quantum Processor Accessor
      tags:
        - internal
        - quantumProcessors
  "/v1/internal/quantumProcessors/{quantumProcessorId}/endpoints:getDefault":
    get:
      description: |-
        Retrieve the endpoint set as "default" for the given Quantum Processor.

        If no endpoint is set as the default, return "not found."
      operationId: InternalGetDefaultEndpoint
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalEndpoint"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Default Endpoint
      tags:
        - endpoints
        - internal
  "/v1/internal/quantumProcessors/{quantumProcessorId}/endpoints:setDefault":
    put:
      description: >-
        Set the default endpoint for a quantum processor to the provided value,
        or clear it if

        no value is sent.
      operationId: InternalSetDefaultEndpoint
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetDefaultEndpointRequest"
        required: true
      responses:
        "204":
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Set Default Endpoint
      tags:
        - endpoints
        - internal
  "/v1/internal/quantumProcessors/{quantumProcessorId}/instructionSetArchitecture":
    delete:
      description: Delete an InstuctionSetArchitecture.
      operationId: InternalDeleteInstructionSetArchitecture
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Delete Instruction Set Architecture
      tags:
        - internal
        - quantumProcessors
    put:
      description: >-
        Create or replace the InstructionSetArchitecture of an existing Quantum
        Processor.


        Returns an error if the Quantum Processor does not exist.
      operationId: InternalPutInstructionSetArchitecture
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutInstructionSetArchitectureRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionSetArchitecture"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Internal Put Instruction Set Architecture
      tags:
        - internal
        - quantumProcessors
  /v1/quantumProcessors:
    get:
      description: List all QuantumProcessors available to the user.
      operationId: ListQuantumProcessors
      parameters:
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQuantumProcessorsResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: List Quantum Processors
      tags:
        - quantumProcessors
  "/v1/quantumProcessors/{quantumProcessorId}":
    get:
      description: Retrieve a single QuantumProcessor by ID.
      operationId: GetQuantumProcessor
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuantumProcessor"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Quantum Processor
      tags:
        - quantumProcessors
  "/v1/quantumProcessors/{quantumProcessorId}/accessors":
    get:
      description: List all means of accessing a QuantumProcessor available to the user.
      operationId: ListQuantumProcessorAccessors
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
        - in: query
          name: pageSize
          required: false
          schema:
            default: 10
            title: Pagesize
            type: integer
        - in: query
          name: pageToken
          required: false
          schema:
            title: Pagetoken
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListQuantumProcessorAccessorsResponse"
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: List Quantum Processor Accessors
      tags:
        - quantumProcessors
  "/v1/quantumProcessors/{quantumProcessorId}/endpoints:getDefault":
    get:
      description: |-
        Retrieve the endpoint set as "default" for the given Quantum Processor.

        If no endpoint is set as the default, return "not found."
      operationId: GetDefaultEndpoint
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Default Endpoint
      tags:
        - endpoints
  "/v1/quantumProcessors/{quantumProcessorId}/instructionSetArchitecture":
    get:
      description: Retrieve the Instruction Set Architecture of a QuantumProcessor by ID.
      operationId: GetInstructionSetArchitecture
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstructionSetArchitecture"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Instruction Set Architecture
      tags:
        - quantumProcessors
  /v1/auth:emailPasswordResetToken:
    post:
      description: Send a password reset link to the provided email address, if that
        email matches a registered user.
      operationId: AuthEmailPasswordResetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthEmailPasswordResetTokenRequest"
      responses:
        "204":
          description: Request completed successfully.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      summary: Email Password Reset Token
      tags:
        - authentication
  /v1/auth:getUser:
    get:
      description: Retrieve the profile of the authenticated user.
      operationId: AuthGetUser
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The authenticated user could not be located within our records.
            Please contact support@rigetti.com if you reach this error.
      security:
        - JWTBearer: []
      summary: Get User
      tags:
        - authentication
  /v1/auth:resetPassword:
    parameters: []
    post:
      description: Reset the password using the user's existing password. Note, this
        is an authenticated route.
      operationId: AuthResetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthResetPasswordRequest"
        required: true
      responses:
        "204":
          description: Password successfully reset.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Reset Password
      tags:
        - authentication
  /v1/auth:resetPasswordWithToken:
    parameters: []
    post:
      description: Complete the forgot password flow, resetting the new password in
        exchange for an emailed token.
      operationId: AuthResetPasswordWithToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthResetPasswordWithTokenRequest"
        required: true
      responses:
        "204":
          description: Password successfully reset.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: No account exists for the requested email.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      summary: Reset Password With Token
      tags:
        - authentication
  /v1/internal/billingOrganizations:
    get:
      description: List all billing organizations.
      operationId: InternalListBillingOrganizations
      parameters:
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListBillingOrganizationsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
    post:
      description: Create a billing organization, which is unique by name.
      operationId: InternalCreateBillingOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBillingOrganizationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOrganization"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: A conflicting billing organization exists.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
  "/v1/internal/billingOrganizations/{billingOrganizationId}":
    get:
      description: Get a billing organization, which is unique by name.
      operationId: InternalGetBillingOrganization
      parameters:
        - in: path
          name: billingOrganizationId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOrganization"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
    put:
      description: Update a billing organization, which is unique by name.
      operationId: InternalPutBillingOrganization
      parameters:
        - in: path
          name: billingOrganizationId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBillingOrganizationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOrganization"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: A conflicting billing organization exists.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
    delete:
      description: Delete a billing organization, which also deletes all account
        associations.
      operationId: InternalDeleteBillingOrganization
      parameters:
        - in: path
          name: billingOrganizationId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOrganization"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Organization with associated accounts cannot be deleted - delete
            all existing associations first.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
  "/v1/internal/billingOrganizations/{billingOrganizationId}/accounts":
    get:
      description: List all accounts related to this billing organization.
      operationId: InternalListBillingOrganizationAccounts
      parameters:
        - in: path
          name: billingOrganizationId
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListBillingOrganizationAccountsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
    put:
      description: Create an association between accounts and this billing
        organization if one is not already present.
      operationId: InternalPutBillingOrganizationAccounts
      parameters:
        - in: path
          name: billingOrganizationId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Accounts"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
    delete:
      description: Delete all associations between accounts and this billing organization.
      operationId: InternalDeleteBillingOrganizationAccounts
      parameters:
        - in: path
          name: billingOrganizationId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Accounts"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
      tags:
        - account
      security:
        - JWTBearer: []
      x-internal: true
  "/v1/calendars/{quantumProcessorId}":
    get:
      description: Get calendar details for the requested quantum processor.
      operationId: GetQuantumProcessorCalendar
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QuantumProcessorCalendar"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested quantum processor does not exist.
      summary: Get Quantum Processor Calendar
      tags:
        - reservations
      security:
        - JWTBearer: []
  /v1/clientApplications:
    get:
      description: List supported clients of Rigetti system components along with
        their latest and minimum supported versions.
      operationId: ListClientApplications
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListClientApplicationsResponse"
          description: Request completed successfully.
      summary: List Client Applications
      tags:
        - clientApplications
    parameters: []
  "/v1/clientApplications/{clientApplicationName}":
    get:
      description: Get details of a specific Rigetti system component along with its
        latest and minimum supported versions.
      operationId: GetClientApplication
      parameters:
        - in: path
          name: clientApplicationName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientApplication"
          description: Request completed successfully.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested client application does not exist.
      summary: Get Client Application
      tags:
        - clientApplications
  /v1/clientApplications:check:
    post:
      description: Check the requested client application version against the latest
        and minimum version.
      operationId: CheckClientApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckClientApplicationRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckClientApplicationResponse"
          description: Successfully checked Forest versions.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Requested component does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      summary: Check Client Application
      tags:
        - clientApplications
  "/v1/groups/{groupName}/balance":
    get:
      description: Retrieve the balance of the requested QCS group account.
      operationId: GetGroupBalance
      parameters:
        - description: URL encoded name of group for which to retrieve account balance.
          in: path
          name: groupName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalance"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS group account does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Get Group Balance
      tags:
        - account
    put:
      description: Update the balance of the requested QCS group account.
      operationId: PutGroupBalance
      parameters:
        - description: URL encoded name of group for which to retrieve account balance.
          in: path
          name: groupName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGroupAccountBalanceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalance"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS group account does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Update Group Balance
      tags:
        - account
      x-internal: true
  "/v1/groups/{groupName}/billingCustomer":
    get:
      description: Retrieve billing customer for a QCS group account.
      operationId: GetGroupBillingCustomer
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingCustomer"
          description: Billing customer retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view account billing customer.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group billing customer does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/groups/{groupName}/billingInvoices":
    get:
      description: Retrieve billing invoices for a QCS group account.
      operationId: ListGroupBillingInvoices
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountBillingInvoicesResponse"
          description: Billing invoices retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view group billing invoices.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group billing customer does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/groups/{groupName}/billingInvoices/{billingInvoiceId}/lines":
    get:
      description: Retrieve billing invoice lines for a QCS group account's invoice.
      operationId: ListGroupBillingInvoiceLines
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
        - description: URL-encoded billing invoice id.
          in: path
          name: billingInvoiceId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountBillingInvoiceLinesResponse"
          description: Billing invoice lines retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view group billing invoice lines.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group billing customer or invoice does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/groups/{groupName}/billingInvoices:getUpcoming":
    get:
      description: Retrieve upcoming invoice for QCS group billing customer.
      operationId: GetGroupUpcomingBillingInvoice
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingUpcomingInvoice"
          description: Billing invoice retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view group billing invoice.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group billing customer or invoice does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/groups/{groupName}/billingInvoices:listUpcomingLines":
    get:
      description: List invoice lines for QCS group billing customer upcoming invoice.
      operationId: ListGroupUpcomingBillingInvoiceLines
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountBillingInvoiceLinesResponse"
          description: Billing invoice lines retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view group billing invoice lines.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group billing customer or invoice does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/groups/{groupName}/reservations":
    get:
      description: |
        List existing reservations for the requested group.

        Available filter fields include:

        * `startTime` - timestamp
        * `endTime` - timestamp
        * `createdTime` - timestamp
        * `price` - integer
        * `quantumProcessorId` - string

        Available order fields include:

        * `startTime` - timestamp
        * `endTime` - timestamp
        * `createdTime` - timestamp
        * `price` - integer
      operationId: ListGroupReservations
      parameters:
        - description: URL encoded name of group for which to retrieve reservations.
          in: path
          name: groupName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/filterParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/showDeleted"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListReservationsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: List Group Reservations
      tags:
        - reservations
  "/v1/groups/{groupName}/users":
    get:
      description: List users belonging to a group. Note, group membership may take
        several minutes to update within our identity provider. After adding or
        removing a user to or from a group, please allow up to 60 minutes for
        changes to be reflected.
      operationId: ListGroupUsers
      parameters:
        - description: URL encoded name of group for which to retrieve users.
          in: path
          name: groupName
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupUsersResponse"
          description: Group users successfully retrieved.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested group does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: List users belonging to a group
      tags:
        - account
  /v1/groups:addUser:
    post:
      description: Add a user to a group. Note, group membership may take several
        minutes to update within our identity provider. After adding a user to a
        group, please allow up to 60 minutes for changes to be reflected.
      operationId: AddGroupUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddGroupUserRequest"
        required: true
      responses:
        "204":
          description: User successfully added to group.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group or user does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Add user to a group
      tags:
        - account
  /v1/groups:removeUser:
    post:
      description: Remove a user from a group. Note, group membership may take several
        minutes to update within our identity provider. After removing a user
        from a group, please allow up to 60 minutes for changes to be reflected.
      operationId: RemoveGroupUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveGroupUserRequest"
        required: true
      responses:
        "204":
          description: User successfully removed from group.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed, possibly because the user does not
            belong to the group.
      security:
        - JWTBearer: []
      summary: Remove user from a group.
      tags:
        - account
  "/v1/internal/billingPrices/{billingPriceId}":
    get:
      description: Get a product billing price, which specifies a per-unit price for a
        product/specific mode of execution.
      operationId: InternalGetProductBillingPrice
      parameters:
        - description: The billing price id.
          in: path
          name: billingPriceId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingPrice"
          description: Successfully found `BillingPrice`.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not authorized to get `BillingPrice`.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      x-internal: true
    patch:
      operationId: InternalUpdateProductBillingPrice
      parameters:
        - description: The billing price id.
          in: path
          name: billingPriceId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalUpdateProductBillingPriceRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingPrice"
          description: |
            `BillingPrice` updated successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not authorized to update `BillingPrice`.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      x-internal: true
  "/v1/internal/calendars/{quantumProcessorId}":
    get:
      description: Get calendar details for the requested quantum processor, for
        internal users.
      operationId: InternalGetQuantumProcessorCalendar
      parameters:
        - in: path
          name: quantumProcessorId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalQuantumProcessorCalendar"
          description: Request completed successfully.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested quantum processor does not exist, or does not have
            calendar information.
      summary: Internal Get Quantum Processor Calendar
      tags:
        - reservations
      security:
        - JWTBearer: []
      x-internal: true
  /v1/internal/eventBillingPrices:
    get:
      description: >
        List event billing prices.


        Available filter fields include:


        * `accountType` - string, "group" or "user"

        * `accountId` - string

        * `product` - string, "qpuJobCompletion", "qpuJobTime" or "reservationCreation"

        * `quantumProcessorId` - string

        * `billingPriceId` - string


        Available order fields include:


        * `accountType` - string

        * `accountId` - string

        * `product` - string

        * `quantumProcessorId` - string

        * `createdTime` - timestamp

        * `deletedTime` - timestamp
      operationId: InternalListEventBillingPrices
      parameters:
        - $ref: "#/components/parameters/filterParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/showDeleted"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListEventBillingPricesResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Invalid query parameters. See response for details.
      security:
        - JWTBearer: []
      summary: Internal List Event Billing Prices
      tags:
        - account
      x-internal: true
    post:
      description: Create an event billing price. This will return a 409 response code
        if an event billing price for the same event, quantum processor, and
        account scope already exists. Otherwise, it will create a new event
        billing price. This will also set the Stripe price in the server cache.
      operationId: InternalCreateEventBillingPrice
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalCreateEventBillingPriceRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPrice"
          description: Event billing price successfully created.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to create event billing prices.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: An `EventBillingPrice` with the requested scope already exists.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed. See response for details.
      security:
        - JWTBearer: []
      summary: Internal Create Event Billing Price
      tags:
        - account
      x-internal: true
  "/v1/internal/eventBillingPrices/{eventBillingPriceId}":
    delete:
      description: Delete an event billing price.
      operationId: InternalDeleteEventBillingPrice
      parameters:
        - in: path
          name: eventBillingPriceId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPrice"
          description: Event billing price successfully deleted.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to delete the requested event billing price.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested event billing price does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Event billing price is a default configuration that cannot be
            deleted.
      security:
        - JWTBearer: []
      summary: Internal Delete Event Billing Price
      tags:
        - account
      x-internal: true
    get:
      description: Get an event billing price, which is used to associate a price with
        (optionally) a specific account and/or quantum processor.
      operationId: InternalGetEventBillingPrice
      parameters:
        - in: path
          name: eventBillingPriceId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPrice"
          description: Event billing price successfully found.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to get the requested event billing price.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested event billing price does not exist.
      security:
        - JWTBearer: []
      summary: Internal Get Event Billing Price
      tags:
        - account
      x-internal: true
    patch:
      description: Update an event billing price. This will also set the Stripe price
        in the server cache.
      operationId: InternalUpdateEventBillingPrice
      parameters:
        - in: path
          name: eventBillingPriceId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalUpdateEventBillingPriceRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPrice"
          description: Event billing price successfully updated.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to update the requested event billing price.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested event billing price does not exist.
      security:
        - JWTBearer: []
      summary: Internal Delete Event Billing Price
      tags:
        - account
      x-internal: true
  /v1/internal/groups:
    get:
      description: List all groups available on QCS.
      operationId: InternalListGroups
      parameters:
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupsResponse"
          description: Successfully retrieved groups.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to make the requested reservation.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: List all QCS groups
      tags:
        - account
      x-internal: true
  "/v1/internal/groups/{groupName}/billingCustomer":
    patch:
      description: Update the billing customer assigned to a QCS group account. This
        does not create the customer in Stripe and will validate that the
        billing customer exists and has not been assigned to any other QCS
        account. It will add the appropriate metadata to the existing billing
        customer.
      operationId: InternalUpdateGroupBillingCustomer
      parameters:
        - in: path
          name: groupName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountBillingCustomerUpdateRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingCustomer"
          description: QCS group account billing customer successfully updated.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to update group billing customer.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS group does not exist or does not have an assigned billing
            customer.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The billing customer is already assigned to another QCS account.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Schema validation error. billing customer may not exist. See
            response for details.
      security:
        - JWTBearer: []
      x-internal: true
    post:
      description: When the request body contains `id`, this assigns an existing
        Stripe customer to the QCS group account. In this case, the billing
        customer must exist and not already be assigned to another QCS account.
        When the request body does not contain `id`, this creates a new billing
        customer and assigns it to the QCS group account. In either case, the
        QCS group account cannot already have an assigned billing customer. This
        method will add the appropriate metadata to the new or existing billing
        customer.
      operationId: InternalCreateGroupBillingCustomer
      parameters:
        - in: path
          name: groupName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountBillingCustomerCreateRequest"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingCustomer"
          description: Billing customer for QCS group successfully assigned.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to assign group billing customer.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS group does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS group already has an assigned billing customer or the billing
            customer is already assigned to another QCS account.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Schema validation error. Billing customer may not exist. See
            response for details.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/groups/{groupName}/billingOrganization":
    get:
      summary: Get Group Billing Organization
      description: Fetch the group's billing organization.
      operationId: InternalGetGroupBillingOrganization
      parameters:
        - description: The group name (e.g. `acme`)
          in: path
          name: groupName
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOrganization"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to request group information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Requested group does not exist or has no billing organization.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/groups/{groupName}/eventBillingPrices:get":
    post:
      description: Retrieve `EventBillingPrice` for a group for a specific event. If
        no price is configured this operation will return a default
        `EventBillingPrice` for the specified `product`.
      operationId: InternalGetGroupEventBillingPrice
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalGetAccountEventBillingPriceRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPrice"
          description: Retrieved `EventBillingPrice` successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to retrieve the `EventBillingPrice`.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The `EventBillingPrice` does not exist for the specified event.
            Because the server guarantees prices for events, the server will
            trigger alerts whenever returning this response.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request parameter validation error.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/groups/{groupName}/meteredUsageRecords":
    post:
      description: Create a metered usage record for the QCS group.
      operationId: InternalCreateGroupMeteredUsageRecord
      parameters:
        - description: URL-encoded name of group.
          in: path
          name: groupName
          required: true
          schema:
            type: string
        - in: header
          name: X-QCS-IDEMPOTENCY-KEY
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalCreateMeteredUsageRecordRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalMeteredUsageRecord"
          description: Reported product usage recorded successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to report product usage.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The QCS group account does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request parameter validation error.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/products/{product}/billingPrices":
    get:
      description: |
        List billing prices for the requested product.

        Available filter fields include:

        * `active` - boolean
        * `type` - string
      operationId: InternalListProductBillingPrices
      parameters:
        - description: The QCS product of which to list the prices.
          in: path
          name: product
          required: true
          schema:
            $ref: "#/components/schemas/Product"
        - description: If set to true, use the product that is explicitly marked as a
            product for testing. This is helpful for isolating test data within
            the production environment.
          in: query
          name: useTestProduct
          schema:
            type: boolean
        - $ref: "#/components/parameters/filterParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListProductBillingPricesResponse"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not authorized to list `BillingPrice`.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
    post:
      operationId: InternalCreateProductBillingPrice
      parameters:
        - description: The QCS product for which to create the price.
          in: path
          name: product
          required: true
          schema:
            $ref: "#/components/schemas/Product"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalCreateProductBillingPriceRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingPrice"
          description: |
            `BillingPrice` updated successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not authorized to create `BillingPrice`.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
    x-internal: true
  /v1/internal/billingInvoices:
    get:
      operationId: InternalListBillingInvoices
      description: >
        List billing invoices using a search filter.


        Available filter fields include the following:

        * `total` - integer, the total amount in USD cents for the entire invoice. It is recommended to use `amount>0`.

        * `userIdpId` - string, the QCS user ID to which the invoice is attached.

        * `created` - time, RFC3339 date format of when the invoice was created.


        Note that the filter clause is limited here:

        - must be top-level, so no nesting with parenthesis

        - must be all "and" OR "or", e.g. `a and b or c` is not supported
      parameters:
        - $ref: "#/components/parameters/filterRequiredParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListBillingInvoicesResponse"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not authorized to list billing invoices.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      x-internal: true
      tags:
        - account
    x-internal: true
  /v1/internal/reservations:
    get:
      description: |
        List existing reservations for the requested user.

        Available filter fields include:

        * `startTime` - timestamp
        * `endTime` - timestamp
        * `createdTime` - timestamp
        * `price` - integer
        * `cancelled` - boolean (deprecated, use `showDeleted` parameter)
        * `quantumProcessorId` - string
        * `accountId` - string
        * `userId` - string (deprecated, use `accountId`)

        Available order fields include:

        * `startTime` - timestamp
        * `endTime` - timestamp
        * `createdTime` - timestamp
        * `price` - integer
        * `accountId` - string
        * `userId` - string (deprecated, use `accountId`)
      operationId: InternalListReservations
      parameters:
        - $ref: "#/components/parameters/filterParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/showDeleted"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListReservationsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Internal List Reservations
      tags:
        - reservations
      x-internal: true
    post:
      description: >
        Create a new reservation as a system admin.


        The following precedence applies when specifying the reservation subject account

        ID and type:

        * request body `accountId` field, or if unset then `X-QCS-ACCOUNT-ID` header,

        or if unset then requesting user's ID.

        * request body `accountType` field, or if unset then `X-QCS-ACCOUNT-TYPE`

        header, or if unset then "user" type.
      operationId: InternalCreateReservation
      parameters:
        - $ref: "#/components/parameters/accountIdHeader"
        - $ref: "#/components/parameters/accountTypeHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalCreateReservationRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
          description: Reservation successfully created.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "402":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Insufficient payment to book reservation.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to make the requested reservation.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested reservation is unavailable.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Internal Create Reservation
      tags:
        - reservations
      x-internal: true
  /v1/internal/reservations:findAvailable:
    get:
      description: List currently available reservations on the requested Rigetti
        quantum computer.
      operationId: InternalFindAvailableReservations
      parameters:
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - in: query
          name: quantumProcessorId
          required: true
          schema:
            type: string
        - in: query
          name: startTimeFrom
          required: true
          schema:
            format: date-time
            type: string
        - in: query
          name: epoch
          required: false
          schema:
            description: Formatted as specified for golang
              https://golang.org/pkg/time/#ParseDuration.
            type: string
        - in: query
          name: duration
          required: true
          schema:
            description: Formatted as specified for golang
              https://golang.org/pkg/time/#ParseDuration.
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindAvailableReservationsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Find Available Reservations
      tags:
        - reservations
      x-internal: true
    parameters: []
  /v1/internal/users:
    get:
      description: |
        List users.

        Available filter fields include:

        * `idpId` - string
        * `email` - string

        Available order fields include:

        * `createdTime` - timestamp
      operationId: InternalListUsers
      parameters:
        - $ref: "#/components/parameters/filterRequiredParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalListUsersResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to complete the request.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Internal List Users
      tags:
        - account
    parameters: []
    x-internal: true
  "/v1/internal/users/{userId}/billingOrganization":
    get:
      description: Fetch the user's billing organization.
      operationId: InternalGetUserBillingOrganization
      parameters:
        - description: The user's QCS id (e.g. `0uo3248cbsd73h`)
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingOrganization"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to request user information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Requested user does not exist or has no billing organization.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/users/{userId}/billingCustomer":
    patch:
      description: Update the billing customer assigned to a QCS user account. This
        does not create the customer in Stripe and will validate that the
        billing customer exists and has not been assigned to any other QCS
        account.
      operationId: InternalUpdateUserBillingCustomer
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountBillingCustomerUpdateRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingCustomer"
          description: QCS user account billing customer successfully updated.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to update user billing customer.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS user does not exist or does not have an assigned billing
            customer.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The billing customer is already assigned to another QCS account.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Schema validation error. billing customer may not exist. See
            response for details.
      security:
        - JWTBearer: []
      x-internal: true
    post:
      description: When the request body contains `id`, this assigns an existing
        Stripe customer to the QCS user account. In this case, the billing
        customer must exist and not already be assigned to another QCS account.
        When the request body does not contain `id`, this creates a new billing
        customer and assigns it to the QCS user account. In either case, the QCS
        user account cannot already have an assigned billing customer. This
        method will add the appropriate metadata to the new or existing billing
        customer.
      operationId: InternalCreateUserBillingCustomer
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountBillingCustomerCreateRequest"
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingCustomer"
          description: Billing customer for QCS user successfully assigned.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to assign user billing customer.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS user does not exist.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS user already has an assigned billing customer or the billing
            customer is already assigned to another QCS account.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Schema validation error. Billing customer may not exist. See
            response for details.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/users/{userId}/eventBillingPrices:get":
    post:
      description: Retrieve `EventBillingPrice` for a user for a specific event. If no
        price is configured this operation will return a default
        `EventBillingPrice` for the specified `product`.
      operationId: InternalGetUserEventBillingPrice
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalGetAccountEventBillingPriceRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPrice"
          description: Retrieved `EventBillingPrice` successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to retrieve the `EventBillingPrice`.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The `EventBillingPrice` does not exist for the specified event.
            Because the server guarantees prices for events, the server will
            trigger alerts whenever returning this response.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request parameter validation error.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/users/{userId}/meteredUsageRecords":
    post:
      description: Create a metered usage record for the QCS user.
      operationId: InternalCreateUserMeteredUsageRecord
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InternalCreateMeteredUsageRecordRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalMeteredUsageRecord"
          description: Reported product usage recorded successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to report product usage.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The QCS group account does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request parameter validation error.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/internal/users/{userId}/profile":
    get:
      description: Fetch the user's profile.
      operationId: InternalGetUserProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to request user information.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Requested user does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Get User Profile
      tags:
        - account
      x-internal: true
    parameters:
      - description: The user's QCS Okta id.
        in: path
        name: userId
        required: true
        schema:
          type: string
  /v1/reservations:
    get:
      description: >
        List existing reservations for the authenticated user,

        or a target user when specifying `X-QCS-ACCOUNT-ID` and `X-QCS-ACCOUNT-TYPE`

        headers.


        Available filter fields include:


        * `startTime` - timestamp

        * `endTime` - timestamp

        * `createdTime` - timestamp

        * `price` - integer

        * `cancelled` - boolean (deprecated, use `showDeleted` parameter)

        * `quantumProcessorId` - string


        Available order fields include:


        * `startTime` - timestamp

        * `endTime` - timestamp

        * `createdTime` - timestamp

        * `price` - integer
      operationId: ListReservations
      parameters:
        - $ref: "#/components/parameters/filterParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/showDeleted"
        - $ref: "#/components/parameters/accountIdHeader"
        - $ref: "#/components/parameters/accountTypeHeader"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListReservationsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: List Reservations
      tags:
        - reservations
    parameters: []
    post:
      description: >
        Create a new reservation.


        The following precedence applies when specifying the reservation subject account

        ID and type:

        * request body `accountId` field, or if unset then `X-QCS-ACCOUNT-ID` header,

        or if unset then requesting user's ID.

        * request body `accountType` field, or if unset then `X-QCS-ACCOUNT-TYPE`

        header, or if unset then "user" type.
      operationId: CreateReservation
      parameters:
        - $ref: "#/components/parameters/accountIdHeader"
        - $ref: "#/components/parameters/accountTypeHeader"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReservationRequest"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
          description: Reservation successfully created.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "402":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Insufficient payment to book reservation.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to make the requested reservation.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The requested reservation is unavailable.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Create Reservation
      tags:
        - reservations
  "/v1/reservations/{reservationId}":
    delete:
      description: Cancel an existing reservation for the user.
      operationId: DeleteReservation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reservation"
          description: Reservation successfully cancelled.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to delete reservation.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Requested reservation does not exist.
      security:
        - JWTBearer: []
      summary: Delete Reservation
      tags:
        - reservations
    parameters:
      - in: path
        name: reservationId
        required: true
        schema:
          type: integer
  /v1/reservations:findAvailable:
    get:
      description: List currently available reservations on the requested Rigetti
        quantum computer.
      operationId: FindAvailableReservations
      parameters:
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - in: query
          name: quantumProcessorId
          required: true
          schema:
            type: string
        - in: query
          name: startTimeFrom
          required: true
          schema:
            format: date-time
            type: string
        - in: query
          name: duration
          required: true
          schema:
            description: Formatted as specified for golang
              https://golang.org/pkg/time/#ParseDuration.
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindAvailableReservationsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Find Available Reservations
      tags:
        - reservations
    parameters: []
  /v1/users:
    post:
      description: Create a new user.
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User is not authorized to complete the requested action.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearerOptional: []
      summary: Create User
      tags:
        - account
      x-internal: true
  "/v1/users/{idpId}":
    parameters:
      - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
          call.
        in: path
        name: idpId
        required: true
        schema:
          type: string
    patch:
      description: Update the requested user's profile.
      operationId: UpdateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to update requested user.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Requested user does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Update User
      tags:
        - account
      x-internal: true
  "/v1/users/{userId}/balance":
    get:
      description: Retrieve the balance of the requested QCS user account.
      operationId: GetUserBalance
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalance"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS user account does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Get User Balance
      tags:
        - account
    put:
      description: Update the balance of the requested QCS user account.
      operationId: PutUserBalance
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserAccountBalanceRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountBalance"
          description: Request completed successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client not authorized to complete request.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: QCS user account does not exist.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Update User Balance
      tags:
        - account
      x-internal: true
  "/v1/users/{userId}/billingCustomer":
    get:
      description: Retrieve billing customer for a QCS user account.
      operationId: GetUserBillingCustomer
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingCustomer"
          description: Billing customer retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view user billing customer.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User billing customer does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/users/{userId}/billingInvoices":
    get:
      description: Retrieve billing invoices for a QCS user account.
      operationId: ListUserBillingInvoices
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountBillingInvoicesResponse"
          description: Billing invoices retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view user billing invoices.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User billing customer does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/users/{userId}/billingInvoices/{billingInvoiceId}/lines":
    get:
      description: Retrieve billing invoice lines for a QCS user account's invoice.
      operationId: ListUserBillingInvoiceLines
      parameters:
        - description: URL-encoded QCS id of user. May be found as `idpId` in the
            `AuthGetUser` API call.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - description: URL-encoded billing invoice id.
          in: path
          name: billingInvoiceId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountBillingInvoiceLinesResponse"
          description: Billing invoice lines retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view user billing invoice lines.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User billing customer or invoice does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/users/{userId}/billingInvoices:getUpcoming":
    get:
      description: Retrieve upcoming invoice for QCS user billing customer.
      operationId: GetUserUpcomingBillingInvoice
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BillingUpcomingInvoice"
          description: Upcoming billing invoice retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view user billing invoice.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User billing customer or invoice does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/users/{userId}/billingInvoices:listUpcomingLines":
    get:
      description: List invoice lines for QCS user billing customer upcoming invoice.
      operationId: ListUserUpcomingBillingInvoiceLines
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageTokenParam"
        - $ref: "#/components/parameters/pageSizeParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListAccountBillingInvoiceLinesResponse"
          description: Billing invoice lines retrieved successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to view user's billing invoice lines.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Group billing customer or invoice does not exist.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/users/{userId}/eventBillingPrices:get":
    post:
      description: Retrieve `EventBillingPrice` for a user for a specific event. If no
        price is configured this operation will return a default
        `EventBillingPrice` for the specified `product`.
      operationId: GetUserEventBillingPrice
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAccountEventBillingPriceRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBillingPriceRate"
          description: Retrieved `EventBillingPrice` successfully.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Client is not authorized to retrieve the `EventBillingPrice`.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The `EventBillingPrice` does not exist for the specified event.
            Because the server guarantees prices for events, the server will
            trigger alerts whenever returning this response.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request parameter validation error.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/users/{userId}/groups":
    get:
      description: List QCS groups for the requested user
      operationId: ListUserGroups
      parameters:
        - description: The user's QCS id. May be found as `idpId` in the `AuthGetUser` API
            call.
          in: path
          name: userId
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListGroupsResponse"
          description: Successfully retrieved groups.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: List QCS groups for the requested user
      tags:
        - account
  /v1/users:invite:
    post:
      description: Invite a new user to the QCS platform. This typically requires
        group administrator privileges.
      operationId: InviteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteUserRequest"
      responses:
        "204":
          description: Invitation successfully sent.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to make the requested reservation.
        "409":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The invited user already has a QCS account.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      summary: Invite User
      tags:
        - account
      x-internal: true
  /v1/users:activate:
    post:
      description: Activate a user, completing an invitation request.
      operationId: ActivateUser
      summary: Activate User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActivateUserRequest"
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Request completed successfully.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      tags:
        - account
  /v1/webhooks/stripe:
    post:
      description: Receive Stripe webhooks. Currently, we only support
      operationId: ReceiveStripeWebhook
      responses:
        "204":
          description: Webook successfully received
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Failed to verify Stripe signature.
      summary: Receive Stripe webhook
      tags:
        - account
      x-internal: true
  /v1/announcements:
    get:
      description: |
        List all announcements created on the platform.

        Available filter fields include:
        * `id` - integer
        * `active` - boolean

        Available order fields include:
        * `id`
      operationId: ListAnnouncements
      parameters:
        - $ref: "#/components/parameters/filterParam"
        - $ref: "#/components/parameters/orderParam"
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouncementsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
    post:
      description: Create a new announcement.
      operationId: CreateAnnouncement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementContent"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
          description: Announcement successfully created.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to create announcements.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  "/v1/announcements/{announcementId}":
    put:
      description: Update an existing announcement's content.
      operationId: UpdateAnnouncement
      parameters:
        - name: announcementId
          description: The ID of an existing announcement.
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementContent"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to update announcements.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unknown announcement ID.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
    delete:
      description: Soft delete an announcement, marking it as inactive and preventing
        it from being displayed to any user.
      operationId: DeleteAnnouncement
      parameters:
        - name: announcementId
          description: The ID of an existing announcement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Announcement"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: User not authorized to update announcements.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unknown announcement ID.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      tags:
        - account
      x-internal: true
  /v1/viewer/announcements:
    get:
      description: List all announcements relevant to the authenticating user. By
        default, does not include dismissed announcements.
      operationId: ListViewerAnnouncements
      parameters:
        - $ref: "#/components/parameters/pageSizeParam"
        - $ref: "#/components/parameters/pageTokenParam"
        - name: includeDismissed
          description: Include dismissed announcements in the response.
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnouncementsResponse"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request validation failed.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/viewer/announcements/{announcementId}":
    delete:
      description: Dismiss an announcement for an authenticating user, indicating that
        they do not want to see it again.
      operationId: DismissViewerAnnouncement
      parameters:
        - name: announcementId
          description: The ID of an existing announcement.
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unknown announcement ID.
      security:
        - JWTBearer: []
      tags:
        - account
  /v1/viewer/userProfile:
    put:
      description: Update the profile of the authenticated user.
      operationId: UpdateViewerUserProfile
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateViewerUserProfileRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The authenticated user could not be located within our records.
            Please contact support@rigetti.com if you reach this error.
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: The request could not be validated.
      security:
        - JWTBearer: []
      tags:
        - account
  /v1/viewer/onboardingCompleted:
    get:
      description: Get the onboarding status of the authenticated user.
      operationId: GetViewerUserOnboardingCompleted
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewerUserOnboardingCompleted"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
      security:
        - JWTBearer: []
      tags:
        - account
    put:
      description: Update the onboarding status of the authenticated user.
      operationId: PutViewerUserOnboardingCompleted
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ViewerUserOnboardingCompleted"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewerUserOnboardingCompleted"
          description: Request completed successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Request authentication failed.
      security:
        - JWTBearer: []
      tags:
        - account
  "/v1/internal/quantumProcessors/{quantumProcessorId}/qpuSettings":
    get:
      description: >-
        Retrieve the QPUSettings used in translation in adapted JSON format.


        Note: not all keys used in the QPUSettings object are strings, and thus are not JSON-compliant.

        These have been coerced to strings for human review, but this can not be re-hydrated into a

        QPUSettings object without a reverse transformation.
      operationId: GetQpuSettings
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
        - in: query
          name: timestamp
          required: false
          schema:
            title: Settings Timestamp
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QPUSettings"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Qpu Settings
      tags:
        - translation
    put:
      description: Publish a new version of QPUSettings for a quantum processor.
      operationId: PutQpuSettings
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutQpuSettingsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QPUSettings"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Put Qpu Settings
      tags:
        - translation
  "/v1/internal/quantumProcessors/{quantumProcessorId}/qpuSettings:build":
    post:
      description: Trigger a rebuild of the QPUSettings used in translation.
      operationId: BuildQpuSettings
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QPUSettings"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Build Qpu Settings
      tags:
        - translation
  "/v1/internal/quantumProcessors/{quantumProcessorId}/translationSettings":
    put:
      description: Write the Quil-T calibration program and ControllerState for a
        quantum processor.
      operationId: PutTranslationSettings
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutTranslationSettingsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PutTranslationSettingsResponse"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Bad Request
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Put Translation Settings
      tags:
        - translation
  "/v1/quantumProcessors/{quantumProcessorId}/quiltCalibrations":
    get:
      description: Retrieve the calibration data used for client-side Quilt generation.
      operationId: GetQuiltCalibrations
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetQuiltCalibrationsResponse"
          description: Successful Response
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Get Quilt Calibrations
      tags:
        - translation
  "/v1/quantumProcessors/{quantumProcessorId}:translateNativeQuilToEncryptedBinary":
    post:
      description: >-
        Compile Rigetti-native Quil code to encrypted binary form, ready for
        execution on a

        Rigetti Quantum Processor.
      operationId: TranslateNativeQuilToEncryptedBinary
      parameters:
        - description: "Public identifier for a quantum processor [example: Aspen-1]"
          in: path
          name: quantumProcessorId
          required: true
          schema:
            description: "Public identifier for a quantum processor [example: Aspen-1]"
            title: Quantum Processor ID
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TranslateNativeQuilToEncryptedBinaryRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TranslateNativeQuilToEncryptedBinaryResponse"
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Translation Failure
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
          description: Not Found
        "422":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
          description: Unprocessable Entity
      security:
        - JWTBearer: []
      summary: Translate Native Quil To Encrypted Binary
      tags:
        - translation
components:
  schemas:
    Error:
      properties:
        code:
          title: Code
          type: string
        message:
          title: Message
          type: string
        requestId:
          title: Request ID
          type: string
        validationErrors:
          items:
            $ref: "#/components/schemas/ValidationError"
          title: Validation Errors
          type: array
      required:
        - code
        - message
        - requestId
      title: Error
      type: object
    ValidationError:
      properties:
        in:
          enum:
            - header
            - query
            - path
            - body
          type: string
        message:
          title: Message
          type: string
        path:
          items:
            type: string
          title: Path
          type: array
      required:
        - in
        - message
      title: ValidationError
      type: object
    Health:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: PASS
    Architecture:
      additionalProperties: false
      description: >-
        Represents the logical underlying architecture of a quantum processor.


        The architecture is defined in detail by the nodes and edges that constitute the quantum

        processor. This defines the set of all nodes that could be operated upon, and indicates to

        some approximation their physical layout. The main purpose of this is to support geometry

        calculations that are independent of the available operations, and rendering ISA-based

        information. Architecture layouts are defined by the `family`, as follows.


        The "Aspen" family of quantum processor indicates a 2D planar grid layout of octagon unit

        cells. The `node_id` in this architecture is computed as :math:`100 p_y + 10 p_x + p_u` where

        :math:`p_y` is the zero-based Y position in the unit cell grid, :math:`p_x` is the zero-based

        X position in the unit cell grid, and :math:`p_u` is the zero-based position in the octagon

        unit cell and always ranges from 0 to 7. This scheme has a natural size limit of a 10x10

        unit cell grid, which permits the architecture to scale up to 800 nodes.


        Note that the operations that are actually available are defined entirely by `Operation`

        instances. The presence of a node or edge in the `Architecture` model provides no guarantee

        that any 1Q or 2Q operation will be available to users writing QUIL programs.
      properties:
        edges:
          description: A list of all computational edges in the instruction set
            architecture.
          items:
            $ref: "#/components/schemas/Edge"
          title: Edges
          type: array
        family:
          allOf:
            - $ref: "#/components/schemas/Family"
          description: The architecture family. The nodes and edges conform to this family.
        nodes:
          description: A list of all computational nodes in the instruction set
            architecture.
          items:
            $ref: "#/components/schemas/Node"
          title: Nodes
          type: array
      required:
        - family
        - nodes
        - edges
      title: Architecture
      type: object
    Backplane:
      properties:
        identity:
          $ref: "#/components/schemas/Identity"
        software:
          $ref: "#/components/schemas/SoftwareVersion"
      required:
        - software
        - identity
      title: Backplane
      type: object
    CWChannel:
      description: Configuration for a single CW Generator Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          default: 0
          title: Channel Index
          type: integer
        rf_output_enabled:
          default: false
          title: Rf Output Enabled
          type: boolean
        rf_output_frequency:
          title: Rf Output Frequency
          type: integer
        rf_output_power:
          default: -50
          title: Rf Output Power
          type: number
      required:
        - _type
      title: CWChannel
      type: object
    CertificateProxyComponent:
      properties:
        cpuLimit:
          description: CPU Allocation, in MHz, required by this component. Whether it is a
            hard or soft limit is specified by the component itself. By default,
            it is a soft limit, and components are allowed to burst above when
            there is unused capacity.
          title: CPU Limit
          type: integer
        dockerTag:
          default: latest
          description: "Which docker tag to pull and start. [Example: v1.0.0]"
          title: Docker Tag
          type: string
        environment:
          description: The QCS service environment from which this stack will request data
          title: Environment
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          description: Environment variables to set for this component. To unset a
            variable which has been set by component defaults, set it to an
            empty string. Note that not all environment variables may be
            overridden. Examples of such variables are those set by Nomad to
            provide secret values to the task container.
          title: Environment Variables
          type: object
        gitBranch:
          description: Which branch of the relevant repository to associate with this
            endpoint. May be used for automatic upgrades on updates to the git
            branch.
          title: Git Branch
          type: string
        isSidecar:
          default: false
          description: Whether this component is a sidecar or not.
          title: Is Sidecar
          type: boolean
        listenPort:
          description: The port on which this component will listen for inbound HTTPS
            requests
          title: Listen Port
          type: integer
        memorySoftLimit:
          description: Memory allocation in MB required by this component.
          title: Memory Soft Limit
          type: integer
      title: Certificate Proxy Component
      type: object
    Characteristic:
      additionalProperties: false
      description: A measured characteristic of an operation.
      properties:
        error:
          description: The error in the characteristic value, or None otherwise.
          title: Error
          type: number
        name:
          description: The name of the characteristic.
          pattern: ^[A-Za-z_][A-Za-z0-9_]*$
          title: Name
          type: string
        node_ids:
          description: The list of architecture node ids for the site where the
            characteristic is measured, if that is different from the site of
            the enclosing operation. None if it is the same. The order of this
            or the enclosing node ids obey the definition of node symmetry from
            the enclosing operation.
          items:
            minimum: 0
            type: integer
          title: Node Ids
          type: array
        parameter_values:
          description: The optional ordered list of parameter values used to generate the
            characteristic. The order matches the parameters in the enclosing
            operation, and so the lengths of these two lists must match.
          items:
            type: number
          title: Parameter Values
          type: array
        timestamp:
          description: The date and time at which the characteristic was measured.
          format: date-time
          title: Timestamp
          type: string
        value:
          description: The characteristic value measured.
          title: Value
          type: number
      required:
        - name
        - value
        - timestamp
      title: Characteristic
      type: object
    ComponentOptions:
      additionalProperties: false
      properties:
        certificateProxy:
          $ref: "#/components/schemas/CertificateProxyComponent"
        controller:
          $ref: "#/components/schemas/ControllerComponent"
        extra:
          $ref: "#/components/schemas/ExtraComponents"
        magsim:
          $ref: "#/components/schemas/MagnetoSimulatorComponent"
        orchestrator:
          $ref: "#/components/schemas/OrchestratorComponent"
      title: ComponentOptions
      type: object
    ControllerAddress:
      properties:
        address:
          anyOf:
            - type: string
            - $ref: "#/components/schemas/NomadDynamicPort"
            - $ref: "#/components/schemas/NomadReservedPort"
          title: Address
        instrument_type:
          $ref: "#/components/schemas/ControllerInstrumentType"
      required:
        - address
        - instrument_type
      title: ControllerAddress
      type: object
    ControllerAddresses:
      properties:
        instruments:
          additionalProperties:
            $ref: "#/components/schemas/ControllerAddress"
          title: Instruments
          type: object
      required:
        - instruments
      title: ControllerAddresses
      type: object
    ControllerComponent:
      properties:
        archiveBackendS3Bucket:
          description: The S3 bucket that jobs with archived results will have those
            results sent to.
          title: Archive Backend S3 Bucket
          type: string
        archiveBackendS3RoleArn:
          description: The AWS Role used by the `archive_backend_s3_bucket`.
          title: Archive Backend S3 Role ARN
          type: string
        backend:
          allOf:
            - $ref: "#/components/schemas/ExecutionBackend"
          default: virtual
          description: Define the controller's relationship to hardware controls
        commandLineArgs:
          description: NOT SUPPORTED. Command line arguments to append to the default
            values in the controller start command
          items:
            type: string
          title: Command Line Arguments
          type: array
        cpuLimit:
          description: CPU Allocation, in MHz, required by this component. Whether it is a
            hard or soft limit is specified by the component itself. By default,
            it is a soft limit, and components are allowed to burst above when
            there is unused capacity.
          title: CPU Limit
          type: integer
        dockerTag:
          description: "Which docker tag to pull and start. [Example: v1.0.0] Does not
            support the `latest` tag."
          title: Docker Tag
          type: string
        enableSentry:
          description: Whether to send errors and data to Sentry
          title: Enable Sentry reporting
          type: boolean
        enforceTls:
          default: true
          description: Setting to false will disable TLS on connections. Changing this
            value is a breaking change for clients of the endpoint.
          title: Enforce TLS
          type: boolean
        environment:
          description: The QCS service environment from which this stack will request data
          title: Environment
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          description: Environment variables to set for this component. To unset a
            variable which has been set by component defaults, set it to an
            empty string. Note that not all environment variables may be
            overridden. Examples of such variables are those set by Nomad to
            provide secret values to the task container.
          title: Environment Variables
          type: object
        fridgeId:
          description: Which fridge wiring architecture this Controller Service should
            implement
          title: Fridge ID
          type: string
        gitBranch:
          description: Which branch of the relevant repository to associate with this
            endpoint. May be used for automatic upgrades on updates to the git
            branch.
          title: Git Branch
          type: string
        isSidecar:
          default: false
          description: Whether this component is a sidecar or not.
          title: Is Sidecar
          type: boolean
        kafkaEventProducerTypes:
          default:
            - log
          description: Determines whether events are produced to Kafka, logged to stdout,
            or ignored
          items:
            $ref: "#/components/schemas/KafkaEventProducer"
          title: Kafka event producer
          type: array
        listenPorts:
          additionalProperties:
            type: integer
          default: {}
          description: Fixed network ports keyed on port name
          title: Listen Ports
          type: object
        memorySoftLimit:
          description: Memory allocation in MB required by this component.
          title: Memory Soft Limit
          type: integer
        onlyApplyTsunamiInstrumentChannelSettingsDelta:
          default: false
          description: When `True`, only the calculated delta between an instrument's
            current settings and the job's settings will be applied. Otherwise,
            the full set of the job's settings will be applied, even if the
            delta is empty.
          title: Only Apply Tsunami Instrument Channel Settings Delta
          type: boolean
        otelService:
          allOf:
            - $ref: "#/components/schemas/OtelService"
          default: honeycomb
          description: Service to which OTEL traces should be sent
          title: OTEL trace service
        protectedTsunamiInstrumentChannelSettings:
          default: []
          description: A list of glob patterns that match protected settings for a given
            card type. Each pattern is a colon-separated pair of card type and
            setting name in the form '<card_type>:<setting_name>' where each can
            be a specific calue or a wildcard '*'. For example, qfd:attenuation
            would match the `attenuation` settings for qfd cards, or
            *:center_frequency would match the `center_frequency` settings for
            all cards.
          items:
            type: string
          title: Protected Tsunami Instrument Channel Settings
          type: array
        queuePolicyType:
          allOf:
            - $ref: "#/components/schemas/QueuePolicyType"
          default: reservation
          description: Strategy used when deciding which jobs take priority and how to
            execute them (parallel vs. sequential).
          title: Queue policy
        settingsPublicationTopic:
          description: The Kafka topic that instrument settings changes are published to.
          title: Settings Publication Topic
          type: string
        startupConfiguration:
          allOf:
            - $ref: "#/components/schemas/ControllerAddresses"
          description: Configuration used by Controller on startup to connect to its
            instruments.
          title: Startup Configuration
        startupConfigurationSource:
          allOf:
            - $ref: "#/components/schemas/StartupConfigurationSource"
          default: deployedRack
          description: Selet the data soure from which the endpoint's startup
            configuration should be retrieved
          title: Startup Configuration Source
        storageBackend:
          description: Which storage backend to configure. See Controller Service
            documentation for the available options.
          title: Storage Backend
          type: string
        useTsunamiInstrumentChannelSettingsManagement:
          default: true
          description: When `False`, deactivates all tsunami settings management,
            overriding the feature's other related settings.
          title: Use Tsunami Instrument Channel Settings Management
          type: boolean
        visaPassthrough:
          default: false
          description: Whether to pass through access to USB instruments with host VISA
            configuration
          title: VISA Passthrough
          type: boolean
      title: Controller Component
      type: object
    ControllerInstrumentType:
      description: An enumeration.
      enum:
        - UNKNOWN_INSTRUMENT
        - TSUNAMI
        - YOKOGAWA_GS200
      title: ControllerInstrumentType
      type: string
    CreateEndpointParameters:
      description: A publicly available set of parameters for defining an endpoint.
      properties:
        datacenters:
          description: Which datacenters are available for endpoint placement. Defaults to
            berkeley-775
          items:
            $ref: "#/components/schemas/NomadJobDatacenters"
          title: Datacenters
          type: array
        quantumProcessorIds:
          description: Public identifiers for quantum processors served by this endpoint.
          items:
            type: string
          title: Quantum Processor IDs
          type: array
      title: CreateEndpointParameters
      type: object
    CreateEngagementRequest:
      properties:
        accountId:
          description: Either the client's user ID or the name of a group on behalf of
            which the client wishes to engage. This value will override any
            values set in the headers.
          title: Account Id
          type: string
        accountType:
          allOf:
            - $ref: "#/components/schemas/AccountType"
          description: Indicates whether the engagement request should be made for the
            user or on behalf of a group. This value will override any values
            set in the headers.
          title: Account Type
        endpointId:
          description: Unique, opaque identifier for the endpoint
          title: Endpoint ID
          type: string
        quantumProcessorId:
          description: "Public identifier for a quantum processor [example: Aspen-1]"
          title: Quantum Processor ID
          type: string
        tags:
          description: Tags recorded on QPU requests, which reporting services may later
            use for querying usage records.
          items:
            type: string
          title: Tags
          type: array
      title: CreateEngagementRequest
      type: object
    DeployedRack:
      description: Describes the control configuration of a fridge/rack, real or fake.
      properties:
        _type:
          title: " Type"
          type: string
        instruments:
          additionalProperties:
            $ref: "#/components/schemas/Instrument"
          title: Instruments
          type: object
        qpu:
          $ref: "#/components/schemas/QPU"
        rack_meta:
          $ref: "#/components/schemas/RackMeta"
      required:
        - _type
        - rack_meta
        - instruments
        - qpu
      title: DeployedRack
      type: object
    Edge:
      additionalProperties: false
      description: >-
        A degree-two logical connection in the quantum processor's architecture.


        The existence of an edge in the ISA `Architecture` does not necessarily mean that a given 2Q

        operation will be available on the edge. This information is conveyed by the presence of the

        two `node_id` values in instances of `Instruction`.


        Note that edges are undirected in this model. Thus edge :math:`(a, b)` is equivalent to edge

        :math:`(b, a)`.
      properties:
        node_ids:
          description: The integer ids of the computational nodes at the two ends of the
            edge. Order is not important; an architecture edge is treated as
            undirected.
          items:
            minimum: 0
            type: integer
          maxItems: 2
          minItems: 2
          title: Node Ids
          type: array
      required:
        - node_ids
      title: Edge
      type: object
    Endpoint:
      description: An Endpoint is the entry point for remote access to a QuantumProcessor.
      properties:
        address:
          description: Network address at which the endpoint is locally reachable
          nullable: true
          title: Address
          type: string
        addresses:
          allOf:
            - $ref: "#/components/schemas/EndpointAddresses"
          description: Addresses at which this endpoint is reachable over the network
          title: Endpoint Addresses
        datacenter:
          description: Datacenter within which the endpoint is deployed
          title: Datacenter
          type: string
        healthy:
          description: Whether the endpoint is operating as intended
          title: Healthy
          type: boolean
        id:
          description: Unique, opaque identifier for the endpoint
          title: Endpoint ID
          type: string
        mock:
          description: Whether the endpoint serves simulated or substituted data for
            testing purposes
          title: Mock
          type: boolean
        quantumProcessorIds:
          description: Public identifiers for quantum processors served by this endpoint.
          items:
            type: string
          title: Quantum Processor IDs
          type: array
      required:
        - id
        - addresses
        - healthy
        - mock
      title: Endpoint
      type: object
    EndpointAddresses:
      description: Addresses at which an endpoint is reachable over the network.
      properties:
        grpc:
          title: Grpc
          type: string
        rpcq:
          title: Rpcq
          type: string
      title: EndpointAddresses
      type: object
    EndpointConfiguration:
      description: >-
        Only for use internally. Includes extra information about an endpoint
        which should be stored

        alongside its parameters, but not provided by the user within those parameters.
      properties:
        componentParameters:
          allOf:
            - $ref: "#/components/schemas/ComponentOptions"
          title: Component Parameters
        components:
          allOf:
            - $ref: "#/components/schemas/ComponentOptions"
          description: The component settings currently applied to this endpoint
            (including unset and default values)
          title: Components
        creatorId:
          description: The Identity Provider ID of the user account which created this
            endpoint
          title: Creator ID
          type: string
        datacenters:
          description: Which datacenters are available for endpoint placement. Defaults to
            all available datacenters for non mock endpoints and berkeley-775
            for mock endpoints.
          items:
            $ref: "#/components/schemas/NomadJobDatacenters"
          title: Datacenters
          type: array
        engagementPolicyName:
          allOf:
            - $ref: "#/components/schemas/EngagementPolicyName"
          default: allowCreator
          description: The name of the policy used to enforce engagements on this endpoint
          title: Engagement Policy Name
        engagementPolicyOptions:
          allOf:
            - $ref: "#/components/schemas/EngagementPolicyOptions"
          description: Options for configuration of the selected engagement policy
          title: Engagement Policy Options
        expiration:
          description: The date and time after which this endpoint should be considered
            'expired', and may be automatically deleted.
          format: date-time
          title: Expiration (creation or last update time, plus TTL seconds)
          type: string
        fridgeId:
          description: Identifier for the dilution fridge system to which this endpoint
            has network access
          title: Fridge ID
          type: string
        liveInstrumentAccess:
          default: false
          description: Whether these components should have access to live instruments on
            the corresponding fridge
          title: Live Instrument Access
          type: boolean
        notificationSlackChannel:
          description: "The Slack channel to which create/update/delete notifications
            should be sent for this endpoint. Example: bf01"
          title: Notification Slack Channel
          type: string
        quantumProcessorIds:
          description: "Public identifiers for quantum processors served by this endpoint.
            Note: this is only used for QCS services and authorization and does
            not generally affect jobs run by internally-authorized users."
          items:
            type: string
          title: Quantum Processor IDs
          type: array
        templateName:
          allOf:
            - $ref: "#/components/schemas/TemplateName"
          description: The name of the template used to apply default values to this
            endpoint
          title: Template Name
        ttl:
          description: The number seconds following the endpoint creation or most recent
            update time until the endpoint is considered 'expired'. Expired
            endpoints may be automatically deleted. A zero, negative, NaN, or
            'infinite' TTL indicates that the endpoint will never expire.
            Otherwise, the TTL must be at least one minute (60 seconds).
          title: TTL (seconds until expiration)
          type: number
      title: EndpointConfiguration
      type: object
    EndpointDeployment:
      description: The live, deployed configuration of an endpoint
      properties:
        componentAddresses:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          description: The network address(es) of each component
          title: Component Addresses
          type: object
        componentStatuses:
          additionalProperties:
            type: string
          description: The status of each of the endpoint's services
          title: Status
          type: object
        datacenter:
          description: Datacenter within which the endpoint is deployed
          title: Datacenter
          type: string
        healthy:
          title: Healthy
          type: boolean
      required:
        - healthy
        - componentStatuses
        - componentAddresses
      title: EndpointDeployment
      type: object
    EndpointTemplate:
      description: >-
        An EndpointTemplate is used to apply a set of default values to an
        endpoint on construction or

        update.


        Note that there is no difference between using a template by name and using its component

        parameters directly; the template exists for user convenience.
      properties:
        componentParameters:
          allOf:
            - $ref: "#/components/schemas/ComponentOptions"
          description: The component options that will be applied as defaults to an
            endpoint constructed from this template
          title: Component Options
        description:
          description: A human-readable description for the template use case
          title: Description
          type: string
        name:
          description: The name used to apply this template to a new or existing endpoint
          title: Name
          type: string
      required:
        - name
        - description
        - componentParameters
      title: EndpointTemplate
      type: object
    Engagement:
      description: An engagement is the authorization of a user to execute work on a
        Quantum Processor Endpoint.
      properties:
        accountId:
          description: User ID or group name on behalf of which the engagement is made.
          title: Account Id
          type: string
        accountType:
          allOf:
            - $ref: "#/components/schemas/AccountType"
          description: Indicates whether the grant was made on behalf of a single user or
            group.
          title: Account Type
        address:
          description: The network address of the endpoint to which this engagement grants
            access
          title: Address
          type: string
        endpointId:
          description: The ID of the endpoint to which this engagement grants access
          title: Endpoint ID
          type: string
        expiresAt:
          description: Time after which the engagement is no longer valid. Given in
            RFC3339 format.
          title: Expiration Time
          type: string
        minimumPriority:
          description: The minimum priority value allowed for execution
          title: Minimum Priority
          type: integer
        quantumProcessorIds:
          default: []
          description: The quantum processors for which this engagement enables access and
            execution
          items:
            type: string
          title: Quantum Processor IDs
          type: array
        tags:
          description: Tags recorded on QPU requests and recorded on usage records.
          items:
            type: string
          title: Tags
          type: array
        userId:
          title: User ID of client
          type: string
      required:
        - address
        - endpointId
        - expiresAt
        - userId
      title: Engagement
      type: object
    EngagementCredentials:
      description: >-
        Credentials are the ZeroMQ CURVE Keys used to encrypt the connection
        with the Quantum Processor

        Endpoint.
      properties:
        clientPublic:
          title: Client Public Key
          type: string
        clientSecret:
          title: Client Secret Key
          type: string
        serverPublic:
          title: Server Public Key
          type: string
      required:
        - clientPublic
        - clientSecret
        - serverPublic
      title: EngagementCredentials
      type: object
    EngagementPolicyName:
      description: An enumeration.
      enum:
        - allowAll
        - allowNone
        - allowCreator
        - allowInternalUser
        - qcsReservation
      title: EngagementPolicyName
      type: string
    EngagementPolicyOptions:
      properties:
        alternateQuantumProcessorIds:
          default: []
          description: Alias names for the requested quantum processor for use in the
            engagement process. Engagements requested for any of these alternate
            IDs will be evaluated and granted against the primary quantum
            processor.
          items:
            type: string
          title: Alternate Quantum Processor IDs
          type: array
        onDemand:
          default: true
          title: Enable On Demand
          type: boolean
        onDemandProtectedUserIds:
          default:
            - 00u7kgovxrYFe0EqQ357
            - 00u2tjorm4iSV3nZn357
          items:
            type: string
          title: On-Demand-Protected User IDs
          type: array
      title: EngagementPolicyOptions
      type: object
    EngagementWithCredentials:
      description: An engagement is the authorization of a user to execute work on a
        Quantum Processor Endpoint.
      properties:
        accountId:
          description: User ID or group name on behalf of which the engagement is made.
          title: Account Id
          type: string
        accountType:
          allOf:
            - $ref: "#/components/schemas/AccountType"
          description: Indicates whether the grant was made on behalf of a single user or
            group.
          title: Account Type
        address:
          description: The network address of the endpoint to which this engagement grants
            access
          title: Address
          type: string
        credentials:
          $ref: "#/components/schemas/EngagementCredentials"
        endpointId:
          description: The ID of the endpoint to which this engagement grants access
          title: Endpoint ID
          type: string
        expiresAt:
          description: Time after which the engagement is no longer valid. Given in
            RFC3339 format.
          title: Expiration Time
          type: string
        minimumPriority:
          description: The minimum priority value allowed for execution
          title: Minimum Priority
          type: integer
        quantumProcessorIds:
          default: []
          description: The quantum processors for which this engagement enables access and
            execution
          items:
            type: string
          title: Quantum Processor IDs
          type: array
        tags:
          description: Tags recorded on QPU requests and recorded on usage records.
          items:
            type: string
          title: Tags
          type: array
        userId:
          title: User ID of client
          type: string
      required:
        - address
        - endpointId
        - expiresAt
        - userId
        - credentials
      title: EngagementWithCredentials
      type: object
    ExecutionBackend:
      description: The controller's relationship to hardware controls.
      enum:
        - live
        - virtual
      title: ExecutionBackend
      type: string
    ExtraComponents:
      properties:
        orchestrators:
          additionalProperties:
            $ref: "#/components/schemas/OrchestratorComponent"
          title: Orchestrators
          type: object
      title: ExtraComponents
      type: object
    Family:
      description: >-
        Family identifier.


        Value 'None' implies the architecture has no specific layout topology.

        Value 'Full' implies that each node is connected to every other (a fully-connected architecture)


        For other values based on deployed architecture layouts (e.g. `Aspen` and `Ankaa`), refer to

        the architecture classes themselves for more details.
      enum:
        - None
        - Full
        - Aspen
        - Ankaa
      title: Family
      type: string
    Identity:
      properties:
        revision:
          title: Revision
          type: string
      required:
        - revision
      title: Identity
      type: object
    InstructionSetArchitecture:
      additionalProperties: false
      description: >-
        The native instruction set architecture of a quantum processor,
        annotated with characteristics.


        The operations described by the `instructions` field are named by their QUIL instruction name,

        while the operation described by the `benchmarks` field are named by their benchmark routine

        and are a future extension point that will be populated in future iterations.


        The characteristics that annotate both instructions and benchmarks assist the user to generate

        the best native QUIL program for a desired task, and so are provided as part of the native ISA.
      properties:
        architecture:
          allOf:
            - $ref: "#/components/schemas/Architecture"
          description: The architecture of the quantum processor.
          title: Architecture
        benchmarks:
          description: The list of benchmarks that have characterized the quantum processor.
          items:
            $ref: "#/components/schemas/Operation"
          title: Benchmarks
          type: array
        instructions:
          description: The list of native QUIL instructions supported by the quantum
            processor.
          items:
            $ref: "#/components/schemas/Operation"
          title: Instructions
          type: array
        name:
          description: The name of the quantum processor.
          minLength: 1
          title: Name
          type: string
      required:
        - name
        - architecture
        - instructions
        - benchmarks
      title: InstructionSetArchitecture
      type: object
    Instrument:
      description: Instrument configuration.
      properties:
        _type:
          title: " Type"
          type: string
        address:
          title: Address
          type: string
        channels:
          additionalProperties:
            anyOf:
              - $ref: "#/components/schemas/CWChannel"
              - $ref: "#/components/schemas/QDOFastFluxChannel"
              - $ref: "#/components/schemas/QDOSlowFluxChannel"
              - $ref: "#/components/schemas/QFDChannel"
              - $ref: "#/components/schemas/QGSChannel"
              - $ref: "#/components/schemas/QRRChannel"
              - $ref: "#/components/schemas/QRTChannel"
              - $ref: "#/components/schemas/YokogawaGS200Channel"
              - $ref: "#/components/schemas/LegacyUSRPSequencer"
              - $ref: "#/components/schemas/QFDSequencer"
              - $ref: "#/components/schemas/QFDx2Sequencer"
              - $ref: "#/components/schemas/QDOSequencer"
              - $ref: "#/components/schemas/QGSSequencer"
              - $ref: "#/components/schemas/QGSx2Sequencer"
              - $ref: "#/components/schemas/QRRSequencer"
              - $ref: "#/components/schemas/QRTSequencer"
              - $ref: "#/components/schemas/QRTx2Sequencer"
              - $ref: "#/components/schemas/USICardSequencer"
              - $ref: "#/components/schemas/USITargetSequencer"
              - type: object
          title: Channels
          type: object
        instrument_type:
          $ref: "#/components/schemas/InstrumentType"
        mnio_connections:
          additionalProperties:
            $ref: "#/components/schemas/MNIOConnection"
          title: Mnio Connections
          type: object
        module:
          title: Module
          type: string
        setup:
          title: Setup
          type: object
        virtual:
          default: false
          title: Virtual
          type: boolean
      required:
        - _type
        - address
        - module
        - instrument_type
        - channels
        - setup
      title: Instrument
      type: object
    InstrumentType:
      description: Enum for types of Instrument.
      enum:
        - FridgeThermometer
        - KeysightPNA
        - MiniCircuitsSwitch
        - SignalCore
        - SP6TSwitch
        - Tsunami
        - USITarget
        - USRP
        - YokoServer
        - YokoShim
        - Yokogawa_GS200
      title: InstrumentType
      type: string
    InternalCreateEndpointParameters:
      description: The complete static, serializable definition of an endpoint's
        desired state
      properties:
        componentParameters:
          allOf:
            - $ref: "#/components/schemas/ComponentOptions"
          title: Component Parameters
        datacenters:
          description: Which datacenters are available for endpoint placement. Defaults to
            all available datacenters for non mock endpoints and berkeley-775
            for mock endpoints.
          items:
            $ref: "#/components/schemas/NomadJobDatacenters"
          title: Datacenters
          type: array
        engagementPolicyName:
          allOf:
            - $ref: "#/components/schemas/EngagementPolicyName"
          default: allowCreator
          description: The name of the policy used to enforce engagements on this endpoint
          title: Engagement Policy Name
        engagementPolicyOptions:
          allOf:
            - $ref: "#/components/schemas/EngagementPolicyOptions"
          description: Options for configuration of the selected engagement policy
          title: Engagement Policy Options
        fridgeId:
          description: Identifier for the dilution fridge system to which this endpoint
            has network access
          title: Fridge ID
          type: string
        liveInstrumentAccess:
          default: false
          description: Whether these components should have access to live instruments on
            the corresponding fridge
          title: Live Instrument Access
          type: boolean
        notificationSlackChannel:
          description: "The Slack channel to which create/update/delete notifications
            should be sent for this endpoint. Example: bf01"
          title: Notification Slack Channel
          type: string
        quantumProcessorIds:
          description: "Public identifiers for quantum processors served by this endpoint.
            Note: this is only used for QCS services and authorization and does
            not generally affect jobs run by internally-authorized users."
          items:
            type: string
          title: Quantum Processor IDs
          type: array
        templateName:
          allOf:
            - $ref: "#/components/schemas/TemplateName"
          description: The name of the template used to apply default values to this
            endpoint
          title: Template Name
        ttl:
          description: The number seconds following the endpoint creation or most recent
            update time until the endpoint is considered 'expired'. Expired
            endpoints may be automatically deleted. A zero, negative, NaN, or
            'infinite' TTL indicates that the endpoint will never expire.
            Otherwise, the TTL must be at least one minute (60 seconds).
          title: TTL (seconds until expiration)
          type: number
      title: InternalCreateEndpointParameters
      type: object
    InternalEndpoint:
      description: An extension of the public Endpoint class which includes
        information for internal use.
      properties:
        address:
          description: Network address at which the endpoint is locally reachable
          nullable: true
          title: Address
          type: string
        addresses:
          allOf:
            - $ref: "#/components/schemas/EndpointAddresses"
          description: Addresses at which this endpoint is reachable over the network
          title: Endpoint Addresses
        configuration:
          $ref: "#/components/schemas/EndpointConfiguration"
        datacenter:
          description: Datacenter within which the endpoint is deployed
          title: Datacenter
          type: string
        deployment:
          $ref: "#/components/schemas/EndpointDeployment"
        healthy:
          description: Whether the endpoint is operating as intended
          title: Healthy
          type: boolean
        id:
          description: Unique, opaque identifier for the endpoint
          title: Endpoint ID
          type: string
        mock:
          description: Whether the endpoint serves simulated or substituted data for
            testing purposes
          title: Mock
          type: boolean
        quantumProcessorIds:
          description: Public identifiers for quantum processors served by this endpoint.
          items:
            type: string
          title: Quantum Processor IDs
          type: array
      required:
        - id
        - addresses
        - healthy
        - mock
        - configuration
        - deployment
      title: InternalEndpoint
      type: object
    InternalListEndpointsResponse:
      properties:
        endpoints:
          items:
            $ref: "#/components/schemas/InternalEndpoint"
          title: Endpoints
          type: array
        nextPageToken:
          description: Opaque token indicating the start of the next page of results to
            return; do not decode
          title: Next Page Token
          type: string
      required:
        - endpoints
      title: InternalListEndpointsResponse
      type: object
    InternalListLegacyLatticesResponse:
      properties:
        legacyLattices:
          items:
            $ref: "#/components/schemas/LegacyLattice"
          title: Legacy Lattices
          type: array
        nextPageToken:
          description: Send an opaque page token returned from a prior request
          title: Next Page Token
          type: string
      required:
        - legacyLattices
      title: InternalListLegacyLatticesResponse
      type: object
    InternalListLegacyQuantumProcessorsResponse:
      properties:
        legacyQuantumProcessors:
          items:
            $ref: "#/components/schemas/LegacyQuantumProcessor"
          title: Legacy Quantum Processors
          type: array
        nextPageToken:
          description: Send an opaque page token returned from a prior request
          title: Next Page Token
          type: string
      required:
        - legacyQuantumProcessors
      title: InternalListLegacyQuantumProcessorsResponse
      type: object
    InternalPutLegacyDeployedRackRequest:
      properties:
        legacyDeployedRack:
          allOf:
            - $ref: "#/components/schemas/DeployedRack"
          title: Legacy Deployed Rack
      required:
        - legacyDeployedRack
      title: InternalPutLegacyDeployedRackRequest
      type: object
    InternalPutLegacyQuantumProcessorRequest:
      properties:
        legacyQuantumProcessor:
          allOf:
            - $ref: "#/components/schemas/LegacyQuantumProcessor"
          title: Legacy Quantum Processor
      required:
        - legacyQuantumProcessor
      title: InternalPutLegacyQuantumProcessorRequest
      type: object
    InternalPutQuantumProcessorAccessorRequest:
      properties:
        accessor:
          allOf:
            - $ref: "#/components/schemas/QuantumProcessorAccessor"
          title: Quantum Processor Accessor
      required:
        - accessor
      title: InternalPutQuantumProcessorAccessorRequest
      type: object
    InternalPutQuantumProcessorRequest:
      properties:
        quantumProcessor:
          allOf:
            - $ref: "#/components/schemas/QuantumProcessorParameters"
          title: Quantum Processor
      required:
        - quantumProcessor
      title: InternalPutQuantumProcessorRequest
      type: object
    InternalUpdateEndpointParameters:
      properties:
        componentParameters:
          allOf:
            - $ref: "#/components/schemas/ComponentOptions"
          title: Component Parameters
        datacenters:
          description: Which datacenters are available for endpoint placement. Defaults to
            all available datacenters for non mock endpoints and berkeley-775
            for mock endpoints.
          items:
            $ref: "#/components/schemas/NomadJobDatacenters"
          title: Datacenters
          type: array
        engagementPolicyName:
          allOf:
            - $ref: "#/components/schemas/EngagementPolicyName"
          default: allowCreator
          description: The name of the policy used to enforce engagements on this endpoint
          title: Engagement Policy Name
        engagementPolicyOptions:
          allOf:
            - $ref: "#/components/schemas/EngagementPolicyOptions"
          description: Options for configuration of the selected engagement policy
          title: Engagement Policy Options
        fridgeId:
          description: Identifier for the dilution fridge system to which this endpoint
            has network access
          title: Fridge ID
          type: string
        liveInstrumentAccess:
          default: false
          description: Whether these components should have access to live instruments on
            the corresponding fridge
          title: Live Instrument Access
          type: boolean
        notificationSlackChannel:
          description: "The Slack channel to which create/update/delete notifications
            should be sent for this endpoint. Example: bf01"
          title: Notification Slack Channel
          type: string
        quantumProcessorIds:
          description: "Public identifiers for quantum processors served by this endpoint.
            Note: this is only used for QCS services and authorization and does
            not generally affect jobs run by internally-authorized users."
          items:
            type: string
          title: Quantum Processor IDs
          type: array
        templateName:
          allOf:
            - $ref: "#/components/schemas/TemplateName"
          description: The name of the template used to apply default values to this
            endpoint
          title: Template Name
        ttl:
          description: The number seconds following the endpoint creation or most recent
            update time until the endpoint is considered 'expired'. Expired
            endpoints may be automatically deleted. A zero, negative, NaN, or
            'infinite' TTL indicates that the endpoint will never expire.
            Otherwise, the TTL must be at least one minute (60 seconds).
          title: TTL (seconds until expiration)
          type: number
      title: InternalUpdateEndpointParameters
      type: object
    InternalUpdateLegacyQuantumProcessorRequest:
      properties:
        legacyQuantumProcessor:
          description: Legacy Quantum Processor Patch Update
          title: Legacy Quantum Processor
          type: object
      required:
        - legacyQuantumProcessor
      title: InternalUpdateLegacyQuantumProcessorRequest
      type: object
    KafkaEventProducer:
      description: >-
        The type of Kafka event producer to use. This value will be used by
        Controller service to choose

        an implementation of `qcs_kafka.EventProducer`. See:

        https://gitlab.com/rigetti/qcs/services/controller/-/blob/dc2a205713c582b04bca868736c51b9b6966fefc/server/server.go#L272


        As of this commit, Controller service only produces events for QPU job completion. See:

        https://gitlab.com/rigetti/infrastructure/msk_cluster/-/blob/c3252324039b148d91bb8715b3d7aa3da7c95b62/schemas/com_rigetti_qcs_qpu_job_completion_v0_pre_sr.avsc
      enum:
        - live
        - ignore
        - log
      title: KafkaEventProducer
      type: string
    LegacyEdgeDescriptor:
      additionalProperties: false
      description: An edge between two qubits.
      properties:
        dead:
          description: Mark the edge as dead, preventing its use during compilation, even
            if 2Q gates exist. If omitted from the model, the interpretation is
            `dead = False`.
          title: Dead
          type: boolean
        experimental:
          description: Mark the edge as experimental, preventing its use during
            compilation except for experimental users, even if 2Q gates exist.
            If omitted from the model, the interpretation is `experimental =
            False`.
          title: Experimental
          type: boolean
        type:
          description: Define the types of 2Q gates available on this edge, if any are
            available.
          items:
            $ref: "#/components/schemas/LegacyEdgeType"
          type: array
      title: LegacyEdgeDescriptor
      type: object
    LegacyEdgeType:
      description: Edge type identifier; defines the type of 2Q gate operation for
        which the edge exists.
      enum:
        - CPHASE
        - CZ
        - ISWAP
        - XY
      title: LegacyEdgeType
      type: string
    LegacyInstructionSetArchitecture:
      additionalProperties: false
      description: The instruction set architecture defining native operations on qubits.
      properties:
        1Q:
          description: The set of all 1Q operations, keyed by their node identifier.
          patternProperties:
            \d+:
              $ref: "#/components/schemas/LegacyNodeDescriptor"
          title: 1Q
          type: object
        2Q:
          description: The set of all 2Q operations, keyed by their edge identifier.
          patternProperties:
            \d+-\d+:
              $ref: "#/components/schemas/LegacyEdgeDescriptor"
          title: 2Q
          type: object
      required:
        - 1Q
        - 2Q
      title: LegacyInstructionSetArchitecture
      type: object
    LegacyLattice:
      additionalProperties: false
      description: >-
        The legacy model of a lattice, as stored in Forest DB and served by
        Forest Server.


        Note: The schema served by Forest Server differs in that it parents the model to a node under

        a "lattice" key.
      properties:
        device_name:
          description: The name of the device.
          title: Device Name
          type: string
        isa:
          allOf:
            - $ref: "#/components/schemas/LegacyInstructionSetArchitecture"
          description: The legacy instruction set architecture.
          title: Isa
        name:
          description: The name of the lattice.
          title: Name
          type: string
        noise_model:
          default: {}
          description: The device or lattice noise model.
          title: Noise Model
          type: object
        price_per_minute:
          description: The price per minute (in credits) for using the lattice as reserved
            in QCS.
          minimum: 0
          title: Price Per Minute
          type: number
        specs:
          allOf:
            - $ref: "#/components/schemas/LegacySpecifications"
          description: The specifications of the device lattice.
          title: Specs
      required:
        - isa
        - specs
        - name
        - device_name
        - price_per_minute
      title: LegacyLattice
      type: object
    LegacyNodeDescriptor:
      additionalProperties: false
      description: A single qubit node.
      properties:
        dead:
          description: Mark the node as dead, preventing its use during compilation, even
            if 1Q gates exist. If omitted from the model, the interpretation is
            `dead = False`.
          title: Dead
          type: boolean
        experimental:
          description: Mark the node as experimental, preventing its use during
            compilation except for experimental users, even if 1Q gates exist.
            If omitted from the model, the interpretation is `experimental =
            False`.
          title: Experimental
          type: boolean
      title: LegacyNodeDescriptor
      type: object
    LegacyQuantumProcessor:
      additionalProperties: false
      description: >-
        The legacy model of a device, as stored in Forest DB and served by
        Forest Server.


        Note: The schema served by Forest Server differs in the following ways:
         1. It parents the model to a node under a "device" key.
         2. It injects an additional field `id` (the SQL row).
      properties:
        isa:
          allOf:
            - $ref: "#/components/schemas/LegacyInstructionSetArchitecture"
          description: The legacy instruction set architecture.
          title: Isa
        name:
          description: The name of the device.
          title: Name
          type: string
        noise_model:
          default: {}
          description: The device or lattice noise model.
          title: Noise Model
          type: object
        num_qubits:
          description: The total number of qubits available on the device.
          title: Num Qubits
          type: integer
        qpu_endpoint:
          description: The rack and fridge identifier within which the device is mounted.
          title: Qpu Endpoint
          type: string
        specs:
          allOf:
            - $ref: "#/components/schemas/LegacySpecifications"
          description: The specifications of the device lattice.
          title: Specs
      required:
        - isa
        - specs
        - name
        - qpu_endpoint
        - num_qubits
      title: LegacyQuantumProcessor
      type: object
    LegacySpecifications:
      additionalProperties: false
      description: The specifications of a deployed quantum processor.
      properties:
        1Q:
          description: The set of all 1Q specifications, keyed by their node identifier.
          patternProperties:
            \d+:
              additionalProperties:
                minimum: 0
                type: number
              type: object
          title: 1Q
          type: object
        2Q:
          description: The set of all 2Q specifications, keyed by their node identifier.
          patternProperties:
            \d+-\d+:
              additionalProperties:
                minimum: 0
                type: number
              type: object
          title: 2Q
          type: object
      required:
        - 1Q
        - 2Q
      title: LegacySpecifications
      type: object
    LegacyUSRPSequencer:
      description: Configuration for a Legacy USRP Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        rx_channel:
          title: Rx Channel
          type: string
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
      title: LegacyUSRPSequencer
      type: object
    ListEndpointEngagementsResponse:
      properties:
        engagements:
          items:
            $ref: "#/components/schemas/Engagement"
          title: Engagements
          type: array
        nextPageToken:
          description: Opaque token indicating the start of the next page of results to
            return; do not decode
          title: Next Page Token
          type: string
      required:
        - engagements
      title: ListEndpointEngagementsResponse
      type: object
    ListEndpointTemplatesResponse:
      properties:
        endpointTemplates:
          items:
            $ref: "#/components/schemas/EndpointTemplate"
          title: Endpointtemplates
          type: array
      required:
        - endpointTemplates
      title: ListEndpointTemplatesResponse
      type: object
    ListEndpointsResponse:
      properties:
        endpoints:
          items:
            $ref: "#/components/schemas/Endpoint"
          title: Endpoints
          type: array
        nextPageToken:
          description: Opaque token indicating the start of the next page of results to
            return; do not decode
          title: Next Page Token
          type: string
      required:
        - endpoints
      title: ListEndpointsResponse
      type: object
    ListInstructionSetArchitectureResponse:
      properties:
        instructionSetArchitectures:
          items:
            $ref: "#/components/schemas/InstructionSetArchitecture"
          title: Instruction Set Architectures
          type: array
        nextPageToken:
          description: Send an opaque page token returned from a prior request
          title: Next Page Token
          type: string
      required:
        - instructionSetArchitectures
      title: ListInstructionSetArchitectureResponse
      type: object
    ListQuantumProcessorAccessorsResponse:
      properties:
        accessors:
          description: Methods of accessing the relevant Quantum Processor
          items:
            $ref: "#/components/schemas/QuantumProcessorAccessor"
          title: Accessors
          type: array
        nextPageToken:
          description: Opaque token indicating the start of the next page of results to
            return; do not decode
          title: Next Page Token
          type: string
      required:
        - accessors
      title: ListQuantumProcessorAccessorsResponse
      type: object
    ListQuantumProcessorsResponse:
      properties:
        nextPageToken:
          description: Opaque token indicating the start of the next page of results to
            return; do not decode
          title: Next Page Token
          type: string
        quantumProcessors:
          items:
            $ref: "#/components/schemas/QuantumProcessor"
          title: Quantum Processors
          type: array
      required:
        - quantumProcessors
      title: ListQuantumProcessorsResponse
      type: object
    LoggingTarget:
      description: An enumeration.
      enum:
        - loki
      title: LoggingTarget
      type: string
    MNIOConnection:
      description: Description of one side of an MNIO connection between two Tsunamis.
      properties:
        _type:
          title: " Type"
          type: string
        destination:
          title: Destination
          type: string
        port:
          title: Port
          type: integer
      required:
        - _type
        - port
        - destination
      title: MNIOConnection
      type: object
    MagnetoInstrumentConfiguration:
      properties:
        configuration:
          $ref: "#/components/schemas/QuercusConfiguration"
        port:
          anyOf:
            - type: integer
            - $ref: "#/components/schemas/NomadDynamicPort"
            - $ref: "#/components/schemas/NomadReservedPort"
          title: Port
      required:
        - port
      title: MagnetoInstrumentConfiguration
      type: object
    MagnetoSimulatorComponent:
      properties:
        cpuLimit:
          description: CPU Allocation, in MHz, required by this component. Whether it is a
            hard or soft limit is specified by the component itself. By default,
            it is a soft limit, and components are allowed to burst above when
            there is unused capacity.
          title: CPU Limit
          type: integer
        dockerTag:
          description: Which docker tag to pull and start. [Example v1.0.0].
          title: Docker tag
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          description: Environment variables to set for this component. To unset a
            variable which has been set by component defaults, set it to an
            empty string. Note that not all environment variables may be
            overridden. Examples of such variables are those set by Nomad to
            provide secret values to the task container.
          title: Environment Variables
          type: object
        gitBranch:
          description: Which branch of the relevant repository to associate with this
            endpoint. May be used for automatic upgrades on updates to the git
            branch.
          title: Git Branch
          type: string
        isSidecar:
          default: false
          description: Whether this component is a sidecar or not.
          title: Is Sidecar
          type: boolean
        memorySoftLimit:
          description: Memory allocation in MB required by this component.
          title: Memory Soft Limit
          type: integer
        startupConfiguration:
          allOf:
            - $ref: "#/components/schemas/MagnetoStartupConfiguration"
          description: Configuration used by Magneto simulator on startup.
          title: Startup Configuration
        startupConfigurationSource:
          allOf:
            - $ref: "#/components/schemas/StartupConfigurationSource"
          default: deployedRack
          description: Selet the data soure from which the endpoint's startup
            configuration should be retrieved
          title: Startup Configuration Source
      title: Magneto Simulator Component
      type: object
    MagnetoStartupConfiguration:
      properties:
        tsunamis:
          additionalProperties:
            $ref: "#/components/schemas/MagnetoInstrumentConfiguration"
          title: Tsunamis
          type: object
      required:
        - tsunamis
      title: MagnetoStartupConfiguration
      type: object
    Node:
      additionalProperties: false
      description: >-
        A logical node in the quantum processor's architecture.


        The existence of a node in the ISA `Architecture` does not necessarily mean that a given 1Q

        operation will be available on the node. This information is conveyed by the presence of the

        specific `node_id` in instances of `Instruction`.
      properties:
        node_id:
          description: An integer id assigned to the computational node. The ids may not
            be contiguous and will be assigned based on the architecture family.
          minimum: 0
          title: Node Id
          type: integer
      required:
        - node_id
      title: Node
      type: object
    NomadDynamicPort:
      properties:
        Label:
          title: Label
          type: string
        To:
          title: To
          type: integer
        Value:
          title: Value
          type: integer
      required:
        - Label
      title: NomadDynamicPort
      type: object
    NomadJobDatacenters:
      description: An enumeration.
      enum:
        - berkeley-775
        - fremont-fab
        - rigetti-gb-1
      title: NomadJobDatacenters
      type: string
    NomadReservedPort:
      properties:
        Label:
          title: Label
          type: string
        Value:
          title: Value
          type: integer
      required:
        - Label
        - Value
      title: NomadReservedPort
      type: object
    Operation:
      additionalProperties: false
      description: An operation, with its sites and site-independent characteristics.
      properties:
        characteristics:
          description: The list of site-independent characteristics of this operation.
          items:
            $ref: "#/components/schemas/Characteristic"
          title: Characteristics
          type: array
        name:
          description: The name of the operation.
          pattern: ^[A-Za-z_][A-Za-z0-9_]*$
          title: Name
          type: string
        node_count:
          description: The number of nodes that this operation applies to. None if
            unspecified.
          exclusiveMinimum: 0
          title: Node Count
          type: integer
        parameters:
          description: The list of parameters. Each parameter must be uniquely named. May
            be empty.
          items:
            $ref: "#/components/schemas/Parameter"
          title: Parameters
          type: array
        sites:
          description: The list of sites at which this operation can be applied, together
            with its site-dependent characteristics.
          items:
            $ref: "#/components/schemas/OperationSite"
          title: Sites
          type: array
      required:
        - name
        - parameters
        - sites
        - characteristics
      title: Operation
      type: object
    OperationSite:
      additionalProperties: false
      description: A site for an operation, with its site-dependent characteristics.
      properties:
        characteristics:
          description: The list of site-dependent characteristics of this operation.
          items:
            $ref: "#/components/schemas/Characteristic"
          title: Characteristics
          type: array
        node_ids:
          description: The list of architecture node ids for the site. The order of these
            node ids obey the definition of node symmetry from the enclosing
            operation.
          items:
            minimum: 0
            type: integer
          title: Node Ids
          type: array
      required:
        - node_ids
        - characteristics
      title: OperationSite
      type: object
    OptionCard:
      properties:
        type:
          title: Type
          type: string
      required:
        - type
      title: OptionCard
      type: object
    OrchestratorComponent:
      properties:
        commandLineArgs:
          description: Command line arguments to append to the default values in the
            orchestrator start command
          items:
            type: string
          title: Command Line Arguments
          type: array
        controllerServiceEndpoint:
          description: If present, forward all jobs to a controller rather than handling
            them locally
          title: Controller Service Endpoint
          type: string
        cpuLimit:
          description: CPU Allocation, in MHz, required by this component. Whether it is a
            hard or soft limit is specified by the component itself. By default,
            it is a soft limit, and components are allowed to burst above when
            there is unused capacity.
          title: CPU Limit
          type: integer
        dockerTag:
          default: latest
          description: "Which docker tag to pull and start. [Example: v1.0.0]"
          title: Docker Tag
          type: string
        enableHealthCheck:
          default: true
          description: Whether to enable the Nomad health check script for this
            component's task
          title: Enable Health Check
          type: boolean
        enableSentry:
          default: true
          description: Whether to send errors and data to Sentry
          title: Enable Sentry reporting
          type: boolean
        environment:
          description: The QCS service environment from which this stack will request data
          title: Environment
          type: string
        environmentVariables:
          additionalProperties:
            type: string
          description: Environment variables to set for this component. To unset a
            variable which has been set by component defaults, set it to an
            empty string. Note that not all environment variables may be
            overridden. Examples of such variables are those set by Nomad to
            provide secret values to the task container.
          title: Environment Variables
          type: object
        gitBranch:
          description: Which branch of the relevant repository to associate with this
            endpoint. May be used for automatic upgrades on updates to the git
            branch.
          title: Git Branch
          type: string
        includeDefaultCommandLineArgs:
          default: true
          description: Whether to include default command line arguments in the
            orchestrator start command. These include rack configuration path
            and certain ports. Disable this for fine-grained control over
            command line arguments or if using an older version of Lodgepole
            with different arguments.
          title: Include Default Command Line Arguments
          type: boolean
        isSidecar:
          default: false
          description: Whether this component is a sidecar or not.
          title: Is Sidecar
          type: boolean
        listenPorts:
          additionalProperties:
            type: integer
          default: {}
          description: Fixed network ports keyed on port name
          title: Listen Ports
          type: object
        loggingProvider:
          allOf:
            - $ref: "#/components/schemas/LoggingTarget"
          default: loki
          description: The logging provider handles the logs emitted on stdout/stderr
          title: Logging Provider
        memorySoftLimit:
          description: Memory allocation in MB required by this component.
          title: Memory Soft Limit
          type: integer
        mock:
          default: true
          description: Whether to start the orchestrator in "mock" mode, where mock
            responses are generated in-process rather than being dispatched to
            control hardware
          title: Mock
          type: boolean
        rackConfig:
          allOf:
            - $ref: "#/components/schemas/DeployedRack"
          description: The contents of the DeployedRack/Rack YAML to deploy with the
            service, as a nested object. This will be parsed and validated using
            the Rigetti Domain Model / Treeline.
          title: Explicit Rack Configuration
        rackYamlString:
          description: The contents of the DeployedRack/Rack YAML to deploy with the
            service, as a YAML string. Use this option when deploying an old
            version of Lodgepole with rack components not supported by the
            Rigetti Domain Model / Treeline (such as VNAs).
          title: Explicit Rack Configuration (YAML String)
          type: string
        timeReferenceInstrument:
          description: Instrument used as a reference when synchronizing time amongst
            instruments
          title: Time Reference Instrument
          type: string
        triggerTimeOffset:
          default: "0.0"
          description: Instrument trigger time offset in seconds
          title: Trigger Time Offset
          type: string
        visaPassthrough:
          default: false
          description: Whether to pass through access to USB instruments with host VISA
            configuration
          title: VISA Passthrough
          type: boolean
      title: Orchestrator Component
      type: object
    OtelService:
      description: The service to which OTEL traces should be sent.
      enum:
        - collector
        - honeycomb
        - none
      title: OtelService
      type: string
    Parameter:
      additionalProperties: false
      description: A parameter to an operation.
      properties:
        name:
          description: The name of the parameter, such as the name of a mathematical symbol.
          pattern: ^[A-Za-z_][A-Za-z0-9_]*$
          title: Name
          type: string
      required:
        - name
      title: Parameter
      type: object
    PropagationDirection:
      description: >-
        Direction of signal propagation.


        Note that we sometimes sort by PropagationDirection, and in that case the ordering is given by

        the ``_order_`` defined here. Note also that the order of definition of entries must agree with

        ``_order_``.
      enum:
        - tx
        - trx
        - rx
      title: PropagationDirection
      type: string
    PutInstructionSetArchitectureRequest:
      properties:
        instructionSetArchitecture:
          allOf:
            - $ref: "#/components/schemas/InstructionSetArchitecture"
          title: Instruction Set Architecture
      required:
        - instructionSetArchitecture
      title: PutInstructionSetArchitectureRequest
      type: object
    QDOFastFluxChannel:
      description: Configuration for a single QDO Fast Flux Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          maximum: 3
          minimum: 0
          title: Channel Index
          type: integer
        delay:
          default: 0
          title: Delay
          type: number
        direction:
          allOf:
            - $ref: "#/components/schemas/PropagationDirection"
          default: tx
        flux_current:
          default: 0
          title: Flux Current
          type: number
      required:
        - _type
        - channel_index
      title: QDOFastFluxChannel
      type: object
    QDOSequencer:
      description: Configuration for a single QDO Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        sequencer_index:
          default: 0
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
      title: QDOSequencer
      type: object
    QDOSlowFluxChannel:
      description: Configuration for a QDO Slow Flux Channel Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          maximum: 7
          minimum: 4
          title: Channel Index
          type: integer
        direction:
          allOf:
            - $ref: "#/components/schemas/PropagationDirection"
          default: tx
        flux_current:
          default: 0
          title: Flux Current
          type: number
        relay_closed:
          default: false
          title: Relay Closed
          type: boolean
      required:
        - _type
        - channel_index
      title: QDOSlowFluxChannel
      type: object
    QFDChannel:
      description: Configuration for a single QFD Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          title: Channel Index
          type: integer
        delay:
          title: Delay
          type: number
        direction:
          $ref: "#/components/schemas/PropagationDirection"
        flux_current:
          title: Flux Current
          type: number
        gain:
          title: Gain
          type: number
        nco_frequency:
          title: Nco Frequency
          type: number
        relay_closed:
          default: true
          title: Relay Closed
          type: boolean
      required:
        - _type
        - channel_index
        - delay
      title: QFDChannel
      type: object
    QFDSequencer:
      description: Configuration for a single QFD Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
      title: QFDSequencer
      type: object
    QFDx2Sequencer:
      description: Configuration for a single QFDx2 Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
      title: QFDx2Sequencer
      type: object
    QGSChannel:
      description: Tsunami QGS Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          title: Channel Index
          type: integer
        delay:
          title: Delay
          type: number
        direction:
          $ref: "#/components/schemas/PropagationDirection"
        gain:
          title: Gain
          type: number
        nco_frequency:
          title: Nco Frequency
          type: number
      required:
        - _type
        - channel_index
        - delay
      title: QGSChannel
      type: object
    QGSSequencer:
      description: Configuration for a single QGS Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
      title: QGSSequencer
      type: object
    QGSx2Sequencer:
      description: Configuration for a single QGSx2 Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
      title: QGSx2Sequencer
      type: object
    QPU:
      description: Information about the topology of the device in relation to its
        control interfaces.
      properties:
        _type:
          title: " Type"
          type: string
        chip_label:
          title: Chip Label
          type: string
        controls:
          additionalProperties:
            items:
              type: string
            maxItems: 2
            minItems: 2
            type: array
          title: Controls
          type: object
        controls_by_qubit:
          additionalProperties:
            items: {}
            type: array
          title: Controls By Qubit
          type: object
        qubits:
          items:
            type: string
          title: Qubits
          type: array
      required:
        - _type
        - chip_label
        - qubits
        - controls
        - controls_by_qubit
      title: QPU
      type: object
    QRRChannel:
      description: Tsunami QRR Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          title: Channel Index
          type: integer
        delay:
          title: Delay
          type: number
        direction:
          $ref: "#/components/schemas/PropagationDirection"
        gain:
          title: Gain
          type: number
      required:
        - _type
        - channel_index
        - delay
      title: QRRChannel
      type: object
    QRRSequencer:
      description: Configuration for a single readout receive (QRR) sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        rx_channel:
          title: Rx Channel
          type: string
        sequencer_index:
          title: Sequencer Index
          type: integer
      required:
        - _type
        - rx_channel
        - sequencer_index
      title: QRRSequencer
      type: object
    QRTChannel:
      description: Tsunami QRT Channel.
      properties:
        _type:
          title: " Type"
          type: string
        channel_index:
          title: Channel Index
          type: integer
        delay:
          title: Delay
          type: number
        direction:
          $ref: "#/components/schemas/PropagationDirection"
        gain:
          title: Gain
          type: number
        nco_frequency:
          title: Nco Frequency
          type: number
      required:
        - _type
        - channel_index
        - delay
      title: QRTChannel
      type: object
    QRTSequencer:
      description: Configuration for a single readout transmit (QRT) sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        low_freq_range:
          default: false
          title: Low Freq Range
          type: boolean
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
        - sequencer_index
      title: QRTSequencer
      type: object
    QRTx2Sequencer:
      description: Configuration for a dual readout transmit (QRTx2) sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        low_freq_range:
          default: false
          title: Low Freq Range
          type: boolean
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
        - sequencer_index
      title: QRTx2Sequencer
      type: object
    QuantumProcessor:
      properties:
        id:
          description: "Immutable, unique identifier for a quantum processor [example:
            Aspen-1]"
          title: ID
          type: string
      required:
        - id
      title: QuantumProcessor
      type: object
    QuantumProcessorAccessor:
      description: Method of accessing an available QPU.
      properties:
        accessType:
          allOf:
            - $ref: "#/components/schemas/QuantumProcessorAccessorType"
          description: Type of the accessor. Each accessor type is a different mechanism
            of accessing a QPU, each with their own benefits and/or drawbacks.
          title: Type
        id:
          description: Unique identifier for the accessor.
          title: ID
          type: string
        live:
          description: Whether an accessor represents access to a physical, live quantum
            processor. When false, this accessor provides access instead to a
            simulated or test QPU.
          title: Live
          type: boolean
        rank:
          default: 100
          description: Rank of this accessor against others for the same QPU. If two
            accessors both serve a client's purposes, that with the lower rank
            value should be used for access.
          title: Rank
          type: integer
        url:
          description: Address used to connect to the accessor.
          format: uri
          maxLength: 2083
          minLength: 1
          title: URL
          type: string
      required:
        - accessType
        - url
        - live
      title: QuantumProcessorAccessor
      type: object
    QuantumProcessorAccessorType:
      description: >-
        Types of access mechanisms for a QPU. Each accessor type has its own
        access characteristics, benefits,

        and drawbacks.
      enum:
        - gateway.v1
      title: QuantumProcessorAccessorType
    QuantumProcessorParameters:
      properties: {}
      title: QuantumProcessorParameters
      type: object
    QuercusConfiguration:
      properties:
        backplane:
          $ref: "#/components/schemas/Backplane"
        option_cards:
          items:
            $ref: "#/components/schemas/OptionCard"
          title: Option Cards
          type: array
      required:
        - backplane
        - option_cards
      title: QuercusConfiguration
      type: object
    QueuePolicyType:
      description: Which queue policy to use when prioritizing queued jobs.
      enum:
        - reservation
        - reservation-settings
        - resource
        - settings
        - fifo
      title: QueuePolicyType
      type: string
    RackMeta:
      description: >-
        Meta information about a rack configuration.


        This is a legacy artifact from the original days of storing the rack data within the willow DB.

        Shane Caldwell believes this to be unused within current systems.
      properties:
        _type:
          title: " Type"
          type: string
        rack_id:
          title: Rack Id
          type: string
        rack_version:
          title: Rack Version
          type: integer
        schema_version:
          default: 0
          title: Schema Version
          type: integer
      required:
        - _type
      title: RackMeta
      type: object
    RestartEndpointRequest:
      properties:
        componentName:
          description: Individual component to restart
          title: Component Name
          type: string
      title: RestartEndpointRequest
      type: object
    SetDefaultEndpointRequest:
      description: Request to set the default endpoint for a quantum processor.
      properties:
        endpointId:
          description: The desired Endpoint ID to direct clients to for requests for this
            quantum processor. If empty, clear the stored default endpoint.
          title: Endpoint ID
          type: string
      title: SetDefaultEndpointRequest
      type: object
    SoftwareVersion:
      properties:
        git_hash:
          title: Git Hash
          type: string
        version:
          title: Version
          type: string
      required:
        - git_hash
        - version
      title: SoftwareVersion
      type: object
    StartupConfigurationSource:
      description: Where to pull the service's startup configuration from.
      enum:
        - deployedRack
        - blackpine
        - explicit
        - treeline
      title: StartupConfigurationSource
      type: string
    TemplateName:
      description: An enumeration.
      enum:
        - production.controller-service.v1
        - quantum-engineering.controller-service.v1
        - production.lodgepole.v1
        - production
        - integration
        - controllerMigration
        - test.magneto-backed-controller.v1
        - test.magneto-backed-controller.v2
        - test.virtual-controller.v1
      title: TemplateName
      type: string
    USICardSequencer:
      description: Configuration for the card which interfaces with the USI Target on
        the USRP.
      properties:
        _type:
          title: " Type"
          type: string
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
      title: USICardSequencer
      type: object
    USITargetSequencer:
      description: Configuration for a single USITarget Sequencer.
      properties:
        _type:
          title: " Type"
          type: string
        rx_channel:
          title: Rx Channel
          type: string
        sequencer_index:
          title: Sequencer Index
          type: integer
        tx_channel:
          title: Tx Channel
          type: string
      required:
        - _type
        - tx_channel
        - rx_channel
        - sequencer_index
      title: USITargetSequencer
      type: object
    YokogawaGS200Channel:
      description: >-
        Base class for settings (mutable properties) on a YokogawaGS200Channel.


        Note that there are no settings; the purpose of this is to ensure that the channel is positively

        identified as the correct type.
      properties:
        _type:
          title: " Type"
          type: string
      required:
        - _type
      title: YokogawaGS200Channel
      type: object
    AccountBalance:
      description: Balance of QCS account in billing system. Note, a negative balance
        signifies that the account has QCS credits to spend. A positive account
        balance signifies that the account has no additional QCS credits to
        spend. The QCS UI may display these quantities in absolute or negative
        value and provide a clear meaning to the significance.
      properties:
        balance:
          description: The balance in cents USD.
          type: integer
      required:
        - balance
      type: object
    UpdateUserAccountBalanceRequest:
      description: Used to change the balance of a QCS user account in the billing system.
      properties:
        amount:
          description: |
            The delta to apply to the account balance in cents USD.
            A positive value indicates the amount owed by the user,
            and a negative value indicates the credits applied to the account.
            For example, granting a user $20 would be `amount: -2000`.
          type: integer
        description:
          description: Details such as who requested and approved the balance change.
          type: string
      required:
        - amount
        - description
      type: object
      x-internal: true
    UpdateGroupAccountBalanceRequest:
      description: Used to change the balance of a QCS group account in the billing system.
      properties:
        amount:
          description: |
            The delta to apply to the account balance in cents USD.
            A positive value indicates the amount owed by the user,
            and a negative value indicates the credits applied to the account.
            For example, granting a user $20 would be `amount: -2000`.
          type: integer
        description:
          description: Details such as who requested and approved the balance change.
          type: string
      required:
        - amount
        - description
      type: object
      x-internal: true
    AccountBillingCustomerCreateRequest:
      description: If `id` is present, this will set the billing customer id to the
        requested account if the billing customer exists and has not been
        assigned to any other QCS account. Otherwise, it will create a new
        billing customer. In either case, it will ensure the billing customer
        has the appropriate metadata. Because QCS does not support updating
        billing customer data, `email` should only be set when `id` is not set.
      properties:
        email:
          type: string
        id:
          type: string
      type: object
      x-internal: true
    AccountBillingCustomerUpdateRequest:
      description: The billing customer represented by `id` must exist and not be
        assigned to any other QCS account. The server will ensure the billing
        customer has the appropriate metadata.
      properties:
        id:
          type: string
      required:
        - id
      type: object
      x-internal: true
    AccountId:
      description: userId for `accountType` "user", group name for `accountType` "group".
      type: string
    AccountType:
      default: user
      enum:
        - group
        - user
      type: string
    Account:
      description: An account ID and type.
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
      required:
        - accountId
        - accountType
      type: object
      x-internal: true
    Accounts:
      description: A collection of accounts.
      properties:
        accounts:
          items:
            $ref: "#/components/schemas/Account"
          type: array
      required:
        - accounts
      type: object
      x-internal: true
    AddGroupUserRequest:
      description: Must provide either `userId` or `userEmail` and `groupId` or `groupName`.
      properties:
        groupId:
          type: string
        groupName:
          type: string
        userEmail:
          type: string
        userId:
          type: string
      type: object
    AnnouncementContent:
      properties:
        contentHtml:
          description: The HTML content of the announcement to be displayed.
          type: string
      required:
        - contentHtml
      x-internal: true
    Announcement:
      description: An announcement to be displayed to users.
      properties:
        id:
          type: integer
        contentHtml:
          description: The HTML content of the announcement to be displayed.
          type: string
        createdAt:
          type: string
          format: date-time
          description: The RFC3339-format time the announcement was created.
        active:
          type: boolean
          description: Whether the announcement is currently active.
      required:
        - id
        - contentHtml
        - createdAt
        - active
    AnnouncementsResponse:
      description: A page of announcements.
      properties:
        nextPageToken:
          type: string
        announcements:
          type: array
          items:
            $ref: "#/components/schemas/Announcement"
      required:
        - announcements
    AuthEmailPasswordResetTokenRequest:
      properties:
        email:
          type: string
      required:
        - email
      type: object
    AuthResetPasswordRequest:
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
      required:
        - oldPassword
        - newPassword
      type: object
    AuthResetPasswordWithTokenRequest:
      description: Token may be requested with AuthEmailPasswordResetToken.
      properties:
        newPassword:
          type: string
        token:
          type: string
      required:
        - token
        - newPassword
      type: object
    AvailableReservation:
      properties:
        duration:
          type: string
        endTime:
          format: date-time
          type: string
        price:
          type: integer
        quantumProcessorId:
          type: string
        startTime:
          format: date-time
          type: string
      required:
        - quantumProcessorId
        - startTime
        - endTime
        - duration
        - price
      type: object
    BillingCustomer:
      description: Billing account information of a particular QCS account.
      properties:
        email:
          type: string
        id:
          type: string
      required:
        - id
        - email
      title: Billing Customer
      type: object
    BillingInvoice:
      allOf:
        - $ref: "#/components/schemas/BillingUpcomingInvoice"
        - description: A finalized invoice for the current invoice period.
          properties:
            id:
              type: string
          required:
            - id
            - periodEnd
            - periodStart
            - startingBalance
            - status
            - subtotal
            - tax
            - total
          type: object
      description: A finalized billing invoice.
      type: object
    BillingInvoiceLine:
      description: A line item on an invoice representing a particular purchase (such
        as a reservation) or aggregate usage for the invoice period.
      properties:
        amount:
          type: integer
        description:
          type: string
        id:
          type: string
        invoiceItem:
          type: string
        lineItemType:
          enum:
            - invoiceitem
            - subscription
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        price:
          $ref: "#/components/schemas/BillingPrice"
        quantity:
          type: integer
        subscription:
          type: string
        subscriptionItem:
          type: string
      required:
        - id
        - description
        - amount
        - quantity
        - lineItemType
        - metadata
      type: object
    BillingInvoiceStatus:
      enum:
        - draft
        - open
        - paid
        - uncollectible
        - void
      type: string
    BillingOrganization:
      description: Represents a single billable entity which can be shared by multiple
        accounts.
      properties:
        id:
          type: integer
        name:
          description: 'Unique, human-readable name of this organization. Example: "ACME
            Corp"'
          type: string
        description:
          description: Any additional context about this organization.
          type: string
        rigettiContactEmail:
          description: Email address for the Rigetti employee who is the main point of
            contact for this organization.
          type: string
      required:
        - id
        - name
        - rigettiContactEmail
      type: object
      x-internal: true
    CreateBillingOrganizationRequest:
      description: Create a new billing organization.
      properties:
        name:
          description: Unique, human-readable name of this organization.
          type: string
        description:
          description: Any additional context about this organization.
          type: string
        rigettiContactEmail:
          description: Email address for the Rigetti employee who is the main point of
            contact for this organization.
          type: string
      required:
        - name
        - rigettiContactEmail
      type: object
      x-internal: true
    UpdateBillingOrganizationRequest:
      description: Update an existing billing organization.
      properties:
        name:
          description: Unique, human-readable name of this organization.
          type: string
        description:
          description: Any additional context about this organization.
          type: string
        rigettiContactEmail:
          description: Email address for the Rigetti employee who is the main point of
            contact for this organization.
          type: string
      type: object
      x-internal: true
    BillingPrice:
      description: |
        A configuration for calculating the cost of `BillingProduct` usage
        based on quantity,
        and when that cost should be added as an invoice item.
      properties:
        active:
          description: Whether the price can be used for new purchases.
          type: boolean
        billingScheme:
          $ref: "#/components/schemas/BillingPriceScheme"
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        object:
          description: This object's type, which is always `price`.
          enum:
            - price
          type: string
        priceType:
          description: >
            Use `one_time` to invoice immediately based on a single usage

            report, e.g. purchasing a QPU reservation.

            Use `recurring` to aggregate usage reports over an interval and then invoice

            once based on `BillingPriceRecurrence`, e.g. on-demand QPU usage.
          enum:
            - one_time
            - recurring
          type: string
        product:
          $ref: "#/components/schemas/BillingProduct"
        recurring:
          $ref: "#/components/schemas/BillingPriceRecurrence"
        tiers:
          description: |
            Configure how price should be calculated based on quantity
            when `billingScheme=tiered`.
            Requires at least two tiers.
          items:
            $ref: "#/components/schemas/BillingPriceTier"
          type: array
        tiersMode:
          $ref: "#/components/schemas/BillingPriceTiersMode"
        unitAmountDecimal:
          description: |
            The amount of `currency` to charge per quantity used.
            Requires that `billingScheme=per_unit`.
          format: double
          type: number
      required:
        - id
      title: Billing Price
      type: object
    BillingPriceRecurrence:
      description: |
        How to invoice for the usage of a product that has a recurring
        (subscription) price.
      properties:
        aggregateUsage:
          description: |
            How to determine the aggregate usage over the `interval` when
            `usageType=metered`.
            Using `sum` is recommended.
          enum:
            - last_during_period
            - last_ever
            - max
            - sum
          type: string
        interval:
          description: |
            The frequency at which recurring usage should be billed.
            Using `month` is recommended.
          enum:
            - day
            - month
            - week
            - year
          type: string
        intervalCount:
          description: >
            The number of `interval` units between each billing cycle.

            For example, `interval=month` and `intervalCount=1` means every month

            (recommended).
          format: int64
          type: integer
        usageType:
          description: >
            Use `metered` to calculate a dynamic quantity based on reported

            usage records (recommended).

            Use `licensed` when you provide a fixed quantity, e.g. a TV subscription.
          enum:
            - licensed
            - metered
          type: string
      required:
        - interval
      title: Billing Price Recurrence
      type: object
    BillingPriceScheme:
      description: >
        Use `per_unit` to charge a linear rate per quantity (recommended).

        Use `tiered` to charge a dynamic rate based on quantity as defined in the

        `tiers` of a `BillingPice`.
      enum:
        - per_unit
        - tiered
      type: string
    BillingPriceTier:
      description: >
        Use `flatAmount` to charge a fixed amount for the quantity relevant

        to the tier.

        Use `unitAmount` to charge a linear rate for the quantity relevant to the

        tier.

        Only one field between `flatAmount`, `flatAmountDecimal`, `unitAmount`, or

        `unitAmountDecimal` should be set.
      properties:
        flatAmount:
          format: int64
          type: integer
        flatAmountDecimal:
          format: double
          type: number
        unitAmount:
          format: int64
          type: integer
        unitAmountDecimal:
          format: double
          type: number
        upTo:
          description: >
            The upper bound of product quantity relevant to this tier.

            The highest tier should be open ended, represented by an `upTo` value

            of `-1`.
          format: int64
          type: integer
      required:
        - upTo
      title: tier
      type: object
    BillingPriceTiersMode:
      description: |
        Use `graduated` to apply each tier calculation to the portion
        of relevant quantity, e.g. how US federal tax brackets work.
        Use `volume` to apply the highest relevant tier to the entire quantity.
      enum:
        - graduated
        - volume
      type: string
    BillingProduct:
      description: >
        A QCS service product, such as reservation time or on-demand execution.

        One product can be associated with multiple prices, which may be associated

        to particular resources or customers.
      properties:
        description:
          maxLength: 5000
          type: string
        id:
          description: Unique identifier for the object.
          maxLength: 5000
          type: string
        name:
          description: This name will show up on associated invoice line item descriptions.
          maxLength: 5000
          type: string
        object:
          description: This object's type, which is always `product`.
          enum:
            - product
          type: string
          x-enum-varnames:
            - productObject
        unitLabel:
          description: >
            A label for units of this product which appears on customer

            invoices, e.g. "microseconds" for on-demand execution or "minutes" for

            qpu reservations.
          maxLength: 5000
          type: string
      required:
        - id
        - name
        - object
      title: Billing Product
      type: object
    BillingUpcomingInvoice:
      description: An unfinalized billing invoice.
      properties:
        periodEnd:
          format: date-time
          type: string
        periodStart:
          format: date-time
          type: string
        startingBalance:
          type: integer
        status:
          $ref: "#/components/schemas/BillingInvoiceStatus"
        subtotal:
          type: integer
        tax:
          type: integer
        total:
          type: integer
      required:
        - periodEnd
        - periodStart
        - startingBalance
        - status
        - subtotal
        - tax
        - total
      type: object
    InternalListBillingInvoicesResponse:
      description: Results from listing billing invoices.
      properties:
        invoices:
          type: array
          items:
            $ref: "#/components/schemas/InternalListBillingInvoicesResponseItem"
        nextPageToken:
          type: string
      required:
        - invoices
      type: object
      x-internal: true
    InternalListBillingOrganizationsResponse:
      description: Results from listing billing organizations.
      properties:
        nextPageToken:
          type: string
        billingOrganizations:
          type: array
          items:
            $ref: "#/components/schemas/BillingOrganization"
      required:
        - billingOrganizations
      type: object
      x-internal: true
    InternalListBillingOrganizationAccountsResponse:
      description: A collection of accounts within a billing organization.
      properties:
        nextPageToken:
          type: string
        accounts:
          items:
            $ref: "#/components/schemas/Account"
          type: array
      required:
        - accounts
      type: object
      x-internal: true
    InternalListBillingInvoicesResponseItem:
      description: A single item in an `InternalListBillingInvoicesResponse`.
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
        billingCustomer:
          $ref: "#/components/schemas/BillingCustomer"
        userProfile:
          $ref: "#/components/schemas/UserProfile"
        invoice:
          $ref: "#/components/schemas/BillingInvoice"
        invoiceLineItems:
          type: array
          items:
            $ref: "#/components/schemas/BillingInvoiceLine"
      required:
        - invoice
        - invoiceLineItems
      type: object
      x-internal: true
    CheckClientApplicationRequest:
      properties:
        name:
          description: Name of component
          type: string
        version:
          description: Semantic version of component.
          type: string
      required:
        - name
        - version
      type: object
    CheckClientApplicationResponse:
      properties:
        isLatestVersion:
          type: boolean
        isUpdateRequired:
          description: Set to true if component is not at latest version.
          type: boolean
        message:
          type: string
      required:
        - isLatestVersion
        - isUpdateRequired
        - message
      type: object
    ChecksumDescription:
      properties:
        headerName:
          type: string
        type:
          enum:
            - md5
          type: string
      required:
        - headerName
        - type
      type: object
    ClientApplication:
      properties:
        detailsUri:
          type: string
        latestVersion:
          description: Semantic version
          type: string
        links:
          items:
            $ref: "#/components/schemas/ClientApplicationsDownloadLink"
          type: array
        minimumVersion:
          description: Semantic version
          type: string
        name:
          type: string
        supported:
          type: boolean
      required:
        - latestVersion
        - name
        - supported
      type: object
    ClientApplicationsDownloadLink:
      properties:
        checksumDescription:
          $ref: "#/components/schemas/ChecksumDescription"
        platform:
          type: string
        url:
          type: string
      required:
        - url
      type: object
    CreateReservationRequest:
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
        endTime:
          format: date-time
          type: string
        notes:
          type: string
        quantumProcessorId:
          type: string
        startTime:
          format: date-time
          type: string
      required:
        - quantumProcessorId
        - startTime
        - endTime
      type: object
    ActivateUserRequest:
      properties:
        credentials:
          $ref: "#/components/schemas/UserCredentials"
        profile:
          $ref: "#/components/schemas/UserProfile"
        token:
          description: Verification token provided in invitation email.
          type: string
      required:
        - profile
        - credentials
        - token
      type: object
    CreateUserRequest:
      properties:
        credentials:
          $ref: "#/components/schemas/UserCredentials"
        profile:
          $ref: "#/components/schemas/UserProfile"
        token:
          description: Verification token provided in invitation email.
          type: string
      required:
        - profile
        - credentials
      type: object
      x-internal: true
    EventBillingPrice:
      description: |
        Associates a set of QCS entities (account, service product, quantum
        processor)
        with a particular `BillingPrice`.
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
        billingPrice:
          $ref: "#/components/schemas/BillingPrice"
        createdTime:
          format: date-time
          type: string
        creatorId:
          type: string
        deleted:
          $ref: "#/components/schemas/SoftDeleteInfo"
        id:
          type: integer
        product:
          $ref: "#/components/schemas/Product"
        quantumProcessorId:
          description: >
            The quantum processor that this `EventBillingPrice` applies

            to.

            If unset, this `EventBillingPrice` can apply to any quantum processor.
          type: string
      required:
        - id
        - product
        - creatorId
        - createdTime
        - billingPrice
      type: object
      x-internal: true
    EventBillingPriceRate:
      description: |
        The per-unit price associated with a particular QCS service product,
        and (optionally) with a particular quantum processor.
      properties:
        id:
          type: integer
        product:
          $ref: "#/components/schemas/Product"
        quantumProcessorId:
          description: If unset, this per-unit price applies to any quantum processor.
          type: string
        unitAmountDecimal:
          description: The unit amount in currency to be charged.
          format: double
          type: number
        unitLabel:
          description: Human-readable unit label infomation.
          type: string
      required:
        - id
        - product
      type: object
    EventBillingPriceUpdate:
      properties:
        billingPrice:
          $ref: "#/components/schemas/BillingPrice"
      required:
        - billingPrice
      type: object
      x-internal: true
    Filter:
      description: >
        A string conforming to a *limited* set of the filtering operations
        described in [Google AIP 160](https://google.aip.dev/160).


        * Expressions are always of the form `{field} {operator} {value}` and may be grouped with `()` and joined with `AND` or `OR`.

        * Fields are specific to the route in question, but are typically a subset of attributes of the requested resource.

        * Operators are limited to `=`, `>`, `>=`, `<`, `<=`, and `!=`.

        * Values may take the following forms:
          * `true` or `false` for boolean fields
          * a number
          * a string (include surrounding `"`s),
          * a duration string (include surrounding `"`s). Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
          * a date string (include surrounding `"`s). Should be formatted [RFC3339 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).

        For example, `startTime >= "2020-06-24T22:00:00.000Z" OR (duration >= "15m" AND endTime < "2020-06-24T22:00:00.000Z")`.
      type: string
    FindAvailableReservationsResponse:
      properties:
        availableReservations:
          items:
            $ref: "#/components/schemas/AvailableReservation"
          type: array
        nextPageToken:
          type: string
      required:
        - availableReservations
      type: object
    GetAccountEventBillingPriceRequest:
      description: Property `quantumProcessorId` is currently required for all
        `product`s, however in the future there may be `product`s that do not
        require a `quantumProcessorId`.
      properties:
        product:
          $ref: "#/components/schemas/Product"
        quantumProcessorId:
          maxLength: 1000
          type: string
      required:
        - product
      type: object
    Group:
      properties:
        createdTime:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        lastMembershipUpdatedTime:
          format: date-time
          type: string
        name:
          type: string
        updatedTime:
          format: date-time
          type: string
      required:
        - id
        - name
        - description
        - createdTime
        - updatedTime
        - lastMembershipUpdatedTime
      type: object
    InternalCreateEventBillingPriceRequest:
      description: >
        Create an association between a QCS service product and a
        `BillingPrice`.

        This price can be optionally scoped to a particular `accountId` and `quantumProcessorId`.
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
        billingPrice:
          $ref: "#/components/schemas/BillingPrice"
        product:
          $ref: "#/components/schemas/Product"
        quantumProcessorId:
          description: Required if `accountId` is set.
          maxLength: 1000
          type: string
      required:
        - product
        - billingPrice
      type: object
      x-internal: true
    InternalCreateMeteredUsageRecordRequest:
      properties:
        product:
          enum:
            - qpuJobCompletion
            - qpuJobTime
          type: string
        quantity:
          format: int64
          type: integer
        quantumProcessorId:
          type: string
      required:
        - product
        - quantity
        - quantumProcessorId
      x-internal: true
    InternalCreateProductBillingPriceRequest:
      description: Creates a new `BillingPrice` but does not associate it with any
        `EventBillingPrice`.
      properties:
        billingScheme:
          $ref: "#/components/schemas/BillingPriceScheme"
        recurring:
          $ref: "#/components/schemas/BillingPriceRecurrence"
        tiers:
          description: |
            Configure how price should be calculated based on quantity
            when `billingScheme=tiered`.
            Requires at least two tiers.
          items:
            $ref: "#/components/schemas/BillingPriceTier"
          type: array
        tiersMode:
          $ref: "#/components/schemas/BillingPriceTiersMode"
        unitAmountDecimal:
          description: |
            The amount of `currency` to charge per quantity used.
            Requires that `billingScheme=per_unit`.
          format: double
          type: number
        useTestProduct:
          description: If set to true, use a product that is explicitly marked as a
            product for testing. This is helpful for isolating test data within
            the production environment.
          type: boolean
      required:
        - useTestProduct
      type: object
      x-internal: true
    InternalCreateReservationRequest:
      allOf:
        - $ref: "#/components/schemas/CreateReservationRequest"
        - properties:
            epochSeconds:
              type: integer
            isReschedule:
              description: If true, the user will receive an email notify them their
                reservation was re-scheduled. Otherwise, they will receive the
                regular confirmation email.
              type: boolean
            userId:
              deprecated: true
              type: string
            validateAvailability:
              default: true
              description: When false, this will create double booked reservations where time
                is already reserved.
              type: boolean
            validateOther:
              default: true
              description: When false, this will not validate maximum reservation duration, if
                the reservation is in the past, or if the reservation end time
                exceeds the configured maximum future end time.
              type: boolean
          type: object
          x-internal: true
      x-internal: true
    InternalEventBillingPrice:
      description: |
        Associates a set of QCS entities (account, service product, quantum
        processor)
        with a particular `BillingPrice`.
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
        billingPriceId:
          $ref: "#/components/schemas/BillingPrice"
        createdTime:
          format: date-time
          type: string
        creatorId:
          type: string
        deleted:
          $ref: "#/components/schemas/SoftDeleteInfo"
        id:
          type: integer
        product:
          $ref: "#/components/schemas/Product"
        quantumProcessorId:
          description: >
            The quantum processor to which this `EventBillingPrice` applies.

            If unset, this `EventBillingPrice` can apply to any quantum processor.
          type: string
      required:
        - id
      type: object
      x-internal: true
    InternalGetAccountEventBillingPriceRequest:
      description: Property `quantumProcessorId` is currently required for all
        `product`s, however in the future there may be `product`s that do not
        require a `quantumProcessorId`.
      properties:
        product:
          $ref: "#/components/schemas/Product"
        quantumProcessorId:
          maxLength: 1000
          type: string
      required:
        - product
      type: object
      x-internal: true
    InternalListProductBillingPricesResponse:
      properties:
        nextPageToken:
          type: string
        prices:
          items:
            $ref: "#/components/schemas/BillingPrice"
          type: array
      required:
        - prices
      type: object
      x-internal: true
    InternalListUsersResponse:
      properties:
        nextPageToken:
          type: string
        users:
          items:
            $ref: "#/components/schemas/User"
          type: array
      required:
        - users
        - nextPageToken
      type: object
      x-internal: true
    InternalMeteredUsageRecord:
      description: This represents a usage record that has successfully been submitted
        to the QCS billing provider. (ie Stripe). The current system does not
        persist these records to the database, but are returned here for the
        purpose of logging and debugging.
      properties:
        accountId:
          type: string
        accountType:
          $ref: "#/components/schemas/AccountType"
        billingUsageRecordId:
          type: string
        billingUsageRecordTimestamp:
          format: date-time
          type: string
        createdTime:
          format: date-time
          type: string
        creatorId:
          type: string
        product:
          enum:
            - qpuJobCompletion
            - qpuJobTime
          type: string
        quantity:
          type: integer
        quantumProcessorId:
          type: string
      required:
        - billingUsageRecordId
        - product
        - billingUsageRecordTimestamp
        - quantity
        - createdTime
        - creatorId
        - accountType
        - accountId
        - quantumProcessorId
      x-internal: true
    InternalQuantumProcessorCalendar:
      description: Details about calendars related to a quantum processor, for
        internal rigetti consumption.
      properties:
        public:
          $ref: "#/components/schemas/QuantumProcessorCalendar"
          description: Publicly available calendars.
        reservationCalendarEmail:
          description: This calendar's schedule contains all reservation events for the QPU.
          type: string
        maintenanceCalendarEmail:
          description: This calendar's schedule contains maintenance events for the QPU,
            during which execution is not available.
          type: string
      required:
        - public
      type: object
      x-internal: true
    InternalUpdateEventBillingPriceRequest:
      description: >
        Update an `EventBillingPrice`. Note, `account`, `product`, and

        `quantumProcessorId` are immutable; clients may _only_ update `billingPriceId`

        for the given scope.

        In the case where the client intends to change the scope for a given `billingPriceId`,

        the client may delete the existing `EventBillingPrice` and subsequently create

        the intended record through `InternalCreateEventBillingPrice`.

        Note, `billingPriceId` is not a unique field and several different EventBillingPrice

        scopes may refer to it.
      properties:
        eventBillingPrice:
          $ref: "#/components/schemas/EventBillingPriceUpdate"
      required:
        - eventBillingPrice
      type: object
      x-internal: true
    InternalUpdateProductBillingPriceRequest:
      properties:
        active:
          description: Whether the price can be used for new purchases. Defaults to `true`.
          type: boolean
        nickname:
          description: A brief description of the price, hidden from customers.
          maxLength: 5000
          type: string
      type: object
      x-internal: true
    InviteUserRequest:
      properties:
        email:
          type: string
        groupName:
          type: string
        billingOrganizationId:
          type: integer
      required:
        - email
      type: object
    ListAccountBillingInvoiceLinesResponse:
      properties:
        billingInvoiceLines:
          items:
            $ref: "#/components/schemas/BillingInvoiceLine"
          type: array
        nextPageToken:
          type: string
      required:
        - billingInvoiceLines
      type: object
    ListAccountBillingInvoicesResponse:
      properties:
        billingInvoices:
          items:
            $ref: "#/components/schemas/BillingInvoice"
          type: array
        nextPageToken:
          type: string
      required:
        - billingInvoices
      type: object
    ListClientApplicationsResponse:
      properties:
        clientApplications:
          items:
            $ref: "#/components/schemas/ClientApplication"
          type: array
      required:
        - clientApplications
      type: object
    ListEventBillingPricesResponse:
      properties:
        eventBillingPrices:
          items:
            $ref: "#/components/schemas/EventBillingPrice"
          type: array
        nextPageToken:
          type: string
      required:
        - eventBillingPrices
      type: object
      x-internal: true
    ListGroupUsersResponse:
      properties:
        nextPageToken:
          type: string
        users:
          items:
            $ref: "#/components/schemas/User"
          type: array
      required:
        - users
      type: object
    ListGroupsResponse:
      properties:
        groups:
          items:
            $ref: "#/components/schemas/Group"
          type: array
        nextPageToken:
          type: string
      required:
        - groups
      type: object
    ListReservationsResponse:
      properties:
        nextPageToken:
          type: string
        reservations:
          items:
            $ref: "#/components/schemas/Reservation"
          type: array
      required:
        - reservations
        - nextPageToken
      type: object
    Order:
      description: >
        A string conforming to order specification described in [Google

        AIP 132](https://google.aip.dev/132#ordering).


        * Fields are specific to the route in question, but are typically a subset

        of attributes of the requested resource.

        * May include a comma separated list of many fields.

        * Fields are sorted in *ascending* order unless the field is followed by `DESC`.


        For example, `quantumProcessorId, startTime DESC`.
      type: string
    Product:
      description: The set of known QCS service products.
      enum:
        - reservationCreation
        - qpuJobCompletion
        - qpuJobTime
      type: string
    QuantumProcessorCalendar:
      description: Details about calendars related to a quantum processor.
      properties:
        maintenanceICal:
          description: This calendar's schedule contains maintenance events for the QPU,
            during which execution is not available.
          type: string
      type: object
    RemoveGroupUserRequest:
      description: Must provide either `userId` or `userEmail` and `groupId` or `groupName`.
      properties:
        groupId:
          type: string
        groupName:
          type: string
        userEmail:
          type: string
        userId:
          type: string
      type: object
    Reservation:
      properties:
        accountId:
          $ref: "#/components/schemas/AccountId"
        accountType:
          $ref: "#/components/schemas/AccountType"
        cancellationBillingInvoiceItemId:
          type: string
        cancelled:
          type: boolean
        createdByAccountId:
          $ref: "#/components/schemas/AccountId"
        createdByAccountType:
          $ref: "#/components/schemas/AccountType"
        createdTime:
          format: date-time
          type: string
        creationBillingInvoiceItemId:
          type: string
        endTime:
          format: date-time
          type: string
        id:
          type: integer
        notes:
          type: string
        price:
          type: integer
        quantumProcessorId:
          type: string
        startTime:
          format: date-time
          type: string
        updatedTime:
          format: date-time
          type: string
        userId:
          deprecated: true
          description: Deprecated in favor of `accountId`.
          type: string
      required:
        - accountId
        - accountType
        - id
        - userId
        - quantumProcessorId
        - startTime
        - endTime
        - createdTime
        - price
      type: object
    SoftDeleteInfo:
      description: Metadata for resources that are soft deleted.
      properties:
        deleterId:
          type: string
        time:
          format: date-time
          type: string
      required:
        - deleterId
        - time
      x-internal: true
    UpdateUserRequest:
      properties:
        profile:
          $ref: "#/components/schemas/UserProfile"
      required:
        - profile
      type: object
      x-internal: true
    User:
      properties:
        createdTime:
          format: date-time
          type: string
        id:
          type: integer
        idpId:
          type: string
        profile:
          $ref: "#/components/schemas/UserProfile"
      required:
        - id
        - idpId
        - createdTime
      type: object
    UserCredentials:
      properties:
        password:
          properties:
            value:
              type: string
          required:
            - value
          type: object
      required:
        - password
      type: object
    UserProfile:
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        organization:
          type: string
      required:
        - email
        - firstName
        - lastName
        - organization
      type: object
    UpdateViewerUserProfileRequest:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        organization:
          type: string
      required:
        - firstName
        - lastName
        - organization
      type: object
    ViewerUserOnboardingCompleted:
      properties:
        onboardingCompleted:
          type: boolean
      required:
        - onboardingCompleted
    ActiveReset:
      description: >-
        Active reset instruction.


        A repeated sequence of a measurement block and a feedback block conditional on

        the outcome of a specific measurement bit.  Regardless of the measurement outcomes the total

        duration of the control sequence is [attempts x ( measurement_duration + feedback_duration)].


        The total measurement_duration must be chosen to allow for enough time after any Capture

        commands for the measurement bit to propagate back to the gate cards that are actuating the

        feedback.
      properties:
        _type:
          title: " Type"
          type: string
        apply_feedback_when:
          title: Apply Feedback When
          type: boolean
        attempts:
          minimum: 1
          title: Attempts
          type: integer
        feedback_duration:
          minimum: 0
          title: Feedback Duration
          type: number
        feedback_instructions:
          items:
            anyOf:
              - $ref: "#/components/schemas/Pulse"
              - $ref: "#/components/schemas/FlatPulse"
              - $ref: "#/components/schemas/SetFrequency"
              - $ref: "#/components/schemas/ShiftFrequency"
              - $ref: "#/components/schemas/SetPhase"
              - $ref: "#/components/schemas/ShiftPhase"
              - $ref: "#/components/schemas/SwapPhases"
              - $ref: "#/components/schemas/SetScale"
              - $ref: "#/components/schemas/Capture"
              - $ref: "#/components/schemas/DebugMessage"
          title: Feedback Instructions
          type: array
        measurement_bit:
          title: Measurement Bit
          type: integer
        measurement_duration:
          minimum: 0
          title: Measurement Duration
          type: number
        measurement_instructions:
          items:
            anyOf:
              - $ref: "#/components/schemas/Pulse"
              - $ref: "#/components/schemas/FlatPulse"
              - $ref: "#/components/schemas/SetFrequency"
              - $ref: "#/components/schemas/ShiftFrequency"
              - $ref: "#/components/schemas/SetPhase"
              - $ref: "#/components/schemas/ShiftPhase"
              - $ref: "#/components/schemas/SwapPhases"
              - $ref: "#/components/schemas/SetScale"
              - $ref: "#/components/schemas/Capture"
              - $ref: "#/components/schemas/DebugMessage"
          title: Measurement Instructions
          type: array
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - measurement_duration
        - feedback_duration
        - measurement_bit
        - attempts
        - measurement_instructions
        - apply_feedback_when
        - feedback_instructions
      title: ActiveReset
      type: object
    AmplifierSettings:
      description: All information needed to operate an parametric amplifier.
      properties:
        _type:
          title: " Type"
          type: string
        output:
          title: Output
          type: boolean
        pump_freq:
          title: Pump Freq
          type: number
        pump_power:
          title: Pump Power
          type: number
        qubit_set:
          items:
            type: integer
          title: Qubit Set
          type: array
          uniqueItems: true
        slow_flux:
          $ref: "#/components/schemas/SlowFluxSettings"
      required:
        - _type
        - qubit_set
        - pump_freq
        - pump_power
        - output
      title: AmplifierSettings
      type: object
    ArbitraryReadoutKernel:
      description: Readout kernel defined by arbitrary IQ values.
      properties:
        _type:
          const: FilterKernel
          default: FilterKernel
          title: " Type"
          type: string
        bias:
          title: Bias
          type: number
        frame:
          title: Frame
          type: string
        iqs:
          items:
            type: number
          title: Iqs
          type: array
      required:
        - frame
        - bias
        - iqs
      title: ArbitraryReadoutKernel
      type: object
    ArbitraryWaveform:
      description: Waveform envelope defined by arbitrary IQ values.
      properties:
        _type:
          const: Waveform
          default: Waveform
          title: " Type"
          type: string
        frame:
          title: Frame
          type: string
        iqs:
          default: []
          items:
            type: number
          title: Iqs
          type: array
      required:
        - frame
      title: ArbitraryWaveform
      type: object
    BoxcarAveragerReadoutKernel:
      description: >-
        Readout kernel that is a constant, with a normalization condition.


        The normalization rescales the values such that the kernel integrates to 1, ie. makes the

        scale equal to 1/duration. This is useful for preserving information about the amplitude of

        the readout pulse that is demodulated, however this message puts the normalization on the

        sequencer where it suffers from discretization error and actually goes to zero amplitude at a

        duration of >16 microseconds.


        See also https://gitlab.com/rigetti/qcs/pidgin/-/issues/328.
      properties:
        _type:
          const: BoxcarAveragerKernel
          default: BoxcarAveragerKernel
          title: " Type"
          type: string
        bias:
          title: Bias
          type: number
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
      required:
        - frame
        - bias
        - duration
        - scale
        - phase
        - detuning
      title: BoxcarAveragerReadoutKernel
      type: object
    Capture:
      description: Specify an acquisition on an rx-frame as well as the readout
        kernels to apply.
      properties:
        _type:
          title: " Type"
          type: string
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        filters:
          items:
            type: string
          title: Filters
          type: array
        frame:
          title: Frame
          type: string
        phase:
          title: Phase
          type: number
        send_to_host:
          title: Send To Host
          type: boolean
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - duration
        - filters
        - send_to_host
        - phase
        - detuning
      title: Capture
      type: object
    ControlSettings:
      description: >-
        All "physical" converter and signal chain settings per "channel".


        It can also carry wf_alignment for now until some future point where we split out sequencers.
      properties:
        _type:
          title: " Type"
          type: string
        carrier_frequency:
          title: Carrier Frequency
          type: number
        direction:
          $ref: "#/components/schemas/PropagationDirection"
        full_scale:
          title: Full Scale
          type: number
        gain:
          title: Gain
          type: number
        sample_rate:
          title: Sample Rate
          type: number
      required:
        - _type
        - gain
        - carrier_frequency
        - sample_rate
        - direction
        - full_scale
      title: ControlSettings
      type: object
    DebugMessage:
      description: Emit a specified debug message.
      properties:
        _type:
          title: " Type"
          type: string
        frame:
          title: Frame
          type: string
        message:
          title: Message
          type: integer
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - message
      title: DebugMessage
      type: object
    DragGaussianWaveform:
      description: >-
        Gaussian-like waveform used for transmons to correct for the transmon's
        anharmonicity.


        DRAG === Derivative Removal by Adiabatic Gate.


        Reference: Motzoi, et al, Simple Pulses for Elimination of Leakage in Weakly Nonlinear Qubits.

        DOI: 10.1103/PhysRevLett.103.110501
      properties:
        _type:
          title: " Type"
          type: string
        alpha:
          title: Alpha
          type: number
        anh:
          maximum: 0
          title: Anh
          type: number
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        fwhm:
          minimum: 0
          title: Fwhm
          type: number
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
        t0:
          title: T0
          type: number
      required:
        - _type
        - frame
        - duration
        - scale
        - phase
        - detuning
        - fwhm
        - t0
        - anh
        - alpha
      title: DragGaussianWaveform
      type: object
    ErfSquareWaveform:
      description: Pulse with a flat top and rounded shoulders given by error functions.
      properties:
        _type:
          title: " Type"
          type: string
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        pad_left:
          minimum: 0
          title: Pad Left
          type: number
        pad_right:
          minimum: 0
          title: Pad Right
          type: number
        phase:
          title: Phase
          type: number
        risetime:
          minimum: 0
          title: Risetime
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
      required:
        - _type
        - frame
        - duration
        - scale
        - phase
        - detuning
        - risetime
        - pad_left
        - pad_right
      title: ErfSquareWaveform
      type: object
    FlatPulse:
      description: >-
        Play a pulse with a constant complex amplitude.


        This pulse is not derived from a waveform and admits the imposition of a scale, phase, and

        detuning.
      properties:
        _type:
          title: " Type"
          type: string
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        iq:
          items:
            type: number
          title: Iq
          type: array
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - iq
        - duration
        - phase
        - detuning
        - scale
      title: FlatPulse
      type: object
    FlatReadoutKernel:
      description: Readout kernel that is a constant, with no normalization condition
        applied.
      properties:
        _type:
          const: FlatKernel
          default: FlatKernel
          title: " Type"
          type: string
        bias:
          title: Bias
          type: number
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
      required:
        - frame
        - bias
        - duration
        - scale
        - phase
        - detuning
      title: FlatReadoutKernel
      type: object
    FlatWaveform:
      description: Flat pulse.
      properties:
        _type:
          title: " Type"
          type: string
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        iq:
          items:
            type: number
          title: Iq
          type: array
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
      required:
        - _type
        - frame
        - duration
        - scale
        - phase
        - detuning
        - iq
      title: FlatWaveform
      type: object
    FrameSettings:
      description: Information about a frame.
      properties:
        _type:
          title: " Type"
          type: string
        control:
          title: Control
          type: string
        direction:
          $ref: "#/components/schemas/PropagationDirection"
        frequency:
          title: Frequency
          type: number
        parent_frame_name:
          title: Parent Frame Name
          type: string
      required:
        - _type
        - frequency
        - direction
      title: FrameSettings
      type: object
    GateSettings:
      description: Information needed to schedule a gate from Quil.
      properties:
        _type:
          title: " Type"
          type: string
        program:
          $ref: "#/components/schemas/ScheduledProgram"
        schedule_ir_name:
          title: Schedule Ir Name
          type: string
        targets:
          items:
            type: integer
          title: Targets
          type: array
      required:
        - _type
        - schedule_ir_name
        - targets
        - program
      title: GateSettings
      type: object
    GaussianWaveform:
      description: Gaussian shaped waveform envelope defined for a specific frame.
      properties:
        _type:
          title: " Type"
          type: string
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        fwhm:
          minimum: 0
          title: Fwhm
          type: number
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
        t0:
          title: T0
          type: number
      required:
        - _type
        - frame
        - duration
        - scale
        - phase
        - detuning
        - fwhm
        - t0
      title: GaussianWaveform
      type: object
    GetQuiltCalibrationsResponse:
      properties:
        quilt:
          description: Calibrations suitable for use in a Quil-T program
          title: Quil-T
          type: string
        settingsTimestamp:
          description: ISO8601 timestamp of the settings used to generate these calibrations
          title: Settings Timestamp
          type: string
      required:
        - quilt
      title: GetQuiltCalibrationsResponse
      type: object
    HermiteGaussianWaveform:
      description: >-
        Hermite-gaussian shaped pulse.


        Reference: Effects of arbitrary laser or NMR pulse shapes on population inversion and

        coherence Warren S. Warren. 81, (1984).

        DOI: 10.1063/1.447644
      properties:
        _type:
          title: " Type"
          type: string
        alpha:
          title: Alpha
          type: number
        anh:
          maximum: 0
          title: Anh
          type: number
        detuning:
          title: Detuning
          type: number
        duration:
          minimum: 0
          title: Duration
          type: number
        frame:
          title: Frame
          type: string
        fwhm:
          minimum: 0
          title: Fwhm
          type: number
        phase:
          title: Phase
          type: number
        scale:
          minimum: 0
          title: Scale
          type: number
        second_order_hrm_coeff:
          title: Second Order Hrm Coeff
          type: number
        t0:
          title: T0
          type: number
      required:
        - _type
        - frame
        - duration
        - scale
        - phase
        - detuning
        - fwhm
        - t0
        - anh
        - alpha
        - second_order_hrm_coeff
      title: HermiteGaussianWaveform
      type: object
    ParameterAref:
      description: A parametric expression.
      properties:
        _type:
          title: " Type"
          type: string
        index:
          title: Index
          type: integer
        name:
          title: Name
          type: string
      required:
        - _type
        - name
        - index
      title: ParameterAref
      type: object
    ParameterExpression:
      description: A parametric expression.
      properties:
        _type:
          title: " Type"
          type: string
        a:
          anyOf:
            - type: number
            - $ref: "#/components/schemas/ParameterAref"
            - $ref: "#/components/schemas/ParameterExpression"
          title: A
        b:
          anyOf:
            - type: number
            - $ref: "#/components/schemas/ParameterAref"
            - $ref: "#/components/schemas/ParameterExpression"
          title: B
        operator:
          $ref: "#/components/schemas/ParameterOperator"
      required:
        - _type
        - operator
        - a
        - b
      title: ParameterExpression
      type: object
    ParameterOperator:
      description: Allowed operators for ParameterExpression.
      enum:
        - +
        - "-"
        - "*"
      title: ParameterOperator
      type: string
    ParameterType:
      description: Allowed operators for ParameterExpression.
      enum:
        - INTEGER
        - FLOAT
      title: ParameterType
      type: string
    Pulse:
      description: >-
        Play a pulse at a specific time on a specific frame.


        The pulse is derived from a waveform and admits the imposition of a scale, phase, and detuning.
      properties:
        _type:
          title: " Type"
          type: string
        detuning:
          title: Detuning
          type: number
        frame:
          title: Frame
          type: string
        phase:
          anyOf:
            - type: number
            - $ref: "#/components/schemas/ParameterExpression"
          title: Phase
        scale:
          title: Scale
          type: number
        time:
          minimum: 0
          title: Time
          type: number
        waveform:
          title: Waveform
          type: string
      required:
        - time
        - _type
        - frame
        - waveform
        - scale
        - phase
        - detuning
      title: Pulse
      type: object
    PutQpuSettingsRequest:
      properties:
        qpuSettings:
          allOf:
            - $ref: "#/components/schemas/QPUSettings"
          description: New QPU Settings to publish
          title: QPU Settings
      required:
        - qpuSettings
      title: PutQpuSettingsRequest
      type: object
    PutTranslationSettingsRequest:
      description: Translation settings are a combination of a calibration program and
        a controller state.
      properties:
        calibrationProgram:
          title: Quil-T Calibration Program
          type: string
        controllerState:
          title: RDM ControllerState, as a dict
          type: object
      required:
        - calibrationProgram
        - controllerState
      title: PutTranslationSettingsRequest
      type: object
    PutTranslationSettingsResponse:
      properties:
        timestamp:
          title: Timestamp
          type: string
      required:
        - timestamp
      title: PutTranslationSettingsResponse
      type: object
    QPUSettings:
      description: All the information needed for 1Q gates, readout, and CZ gates for a QPU.
      properties:
        _type:
          title: " Type"
          type: string
        active_reset_readouts:
          additionalProperties:
            $ref: "#/components/schemas/ReadoutSettings"
          default: {}
          title: Active Reset Readouts
          type: object
        amplifiers:
          items:
            $ref: "#/components/schemas/AmplifierSettings"
          title: Amplifiers
          type: array
        controls:
          additionalProperties:
            $ref: "#/components/schemas/ControlSettings"
          title: Controls
          type: object
        frames:
          additionalProperties:
            $ref: "#/components/schemas/FrameSettings"
          title: Frames
          type: object
        gates:
          items:
            $ref: "#/components/schemas/GateSettings"
          title: Gates
          type: array
        qubits:
          additionalProperties:
            $ref: "#/components/schemas/QubitSettings"
          title: Qubits
          type: object
        readouts:
          additionalProperties:
            $ref: "#/components/schemas/ReadoutSettings"
          title: Readouts
          type: object
      required:
        - _type
        - qubits
        - controls
        - frames
        - gates
        - readouts
        - amplifiers
      title: QPUSettings
      type: object
    QubitSettings:
      description: Information related to a specific qubit.
      properties:
        _type:
          title: " Type"
          type: string
        slow_flux:
          $ref: "#/components/schemas/SlowFluxSettings"
      required:
        - _type
      title: QubitSettings
      type: object
    ReadoutClassifier:
      description: All the information needed to perform readout classification for a
        single qubit.
      properties:
        _type:
          title: " Type"
          type: string
        confusion_matrix:
          items:
            type: number
          maxItems: 4
          minItems: 4
          title: Confusion Matrix
          type: array
        e:
          items:
            type: number
          maxItems: 2
          minItems: 2
          title: E
          type: array
        g:
          items:
            type: number
          maxItems: 2
          minItems: 2
          title: G
          type: array
        projection:
          items:
            type: number
          maxItems: 2
          minItems: 2
          title: Projection
          type: array
        threshold:
          title: Threshold
          type: number
      required:
        - _type
        - projection
        - threshold
        - g
        - e
      title: ReadoutClassifier
      type: object
    ReadoutSettings:
      description: All information needed to perform readout for a single qubit.
      properties:
        _type:
          title: " Type"
          type: string
        classifier:
          $ref: "#/components/schemas/ReadoutClassifier"
        program:
          $ref: "#/components/schemas/ScheduledProgram"
      required:
        - _type
        - program
      title: ReadoutSettings
      type: object
    ScheduledProgram:
      description: >-
        Scheduled program made of ScheduledInstructions.


        The ScheduledInstructions contain references to the waveforms, readout kernels, and parameters.
      properties:
        _type:
          const: Program
          default: Program
          title: " Type"
          type: string
        filters:
          additionalProperties:
            anyOf:
              - $ref: "#/components/schemas/BoxcarAveragerReadoutKernel"
              - $ref: "#/components/schemas/FlatReadoutKernel"
              - $ref: "#/components/schemas/ArbitraryReadoutKernel"
          default: {}
          title: Filters
          type: object
        parameters:
          additionalProperties:
            $ref: "#/components/schemas/rdm_legacy__schedule_ir__instruction_parameters__Pa\
              rameterSpec"
          default: {}
          title: Parameters
          type: object
        scheduled_instructions:
          default: []
          items:
            anyOf:
              - $ref: "#/components/schemas/Pulse"
              - $ref: "#/components/schemas/FlatPulse"
              - $ref: "#/components/schemas/SetFrequency"
              - $ref: "#/components/schemas/ShiftFrequency"
              - $ref: "#/components/schemas/SetPhase"
              - $ref: "#/components/schemas/ShiftPhase"
              - $ref: "#/components/schemas/SwapPhases"
              - $ref: "#/components/schemas/SetScale"
              - $ref: "#/components/schemas/Capture"
              - $ref: "#/components/schemas/DebugMessage"
              - $ref: "#/components/schemas/ActiveReset"
          title: Scheduled Instructions
          type: array
        waveforms:
          additionalProperties:
            anyOf:
              - $ref: "#/components/schemas/HermiteGaussianWaveform"
              - $ref: "#/components/schemas/DragGaussianWaveform"
              - $ref: "#/components/schemas/GaussianWaveform"
              - $ref: "#/components/schemas/ErfSquareWaveform"
              - $ref: "#/components/schemas/FlatWaveform"
              - $ref: "#/components/schemas/ArbitraryWaveform"
          default: {}
          title: Waveforms
          type: object
      title: ScheduledProgram
      type: object
    SetFrequency:
      description: Set the frequency of a frame to a specific value at a specific time.
      properties:
        _type:
          title: " Type"
          type: string
        frame:
          title: Frame
          type: string
        frequency:
          title: Frequency
          type: number
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - frequency
      title: SetFrequency
      type: object
    SetPhase:
      description: Set the phase of a frame to a specific value at a specific time.
      properties:
        _type:
          title: " Type"
          type: string
        frame:
          title: Frame
          type: string
        phase:
          title: Phase
          type: number
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - phase
      title: SetPhase
      type: object
    SetScale:
      description: Set the scale of a frame to a value at a specific time.
      properties:
        _type:
          title: " Type"
          type: string
        frame:
          title: Frame
          type: string
        scale:
          minimum: 0
          title: Scale
          type: number
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - scale
      title: SetScale
      type: object
    ShiftFrequency:
      description: Shift the frequency of a frame by a specific amount at a specific time.
      properties:
        _type:
          title: " Type"
          type: string
        delta:
          title: Delta
          type: number
        frame:
          title: Frame
          type: string
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - delta
      title: ShiftFrequency
      type: object
    ShiftPhase:
      description: Shift the phase of a frame by a relative value at a specific time.
      properties:
        _type:
          title: " Type"
          type: string
        delta:
          anyOf:
            - type: number
            - $ref: "#/components/schemas/ParameterExpression"
            - $ref: "#/components/schemas/ParameterAref"
          title: Delta
        frame:
          title: Frame
          type: string
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame
        - delta
      title: ShiftPhase
      type: object
    SlowFluxSettings:
      description: All information needed to control a slow flux setting on a qubit or
        amplifier.
      properties:
        _type:
          title: " Type"
          type: string
        flux_bias:
          title: Flux Bias
          type: number
        ramp_rate:
          title: Ramp Rate
          type: number
      required:
        - _type
        - flux_bias
      title: SlowFluxSettings
      type: object
    SwapPhases:
      description: Swap the phases of two tx-frames at a specific time.
      properties:
        _type:
          title: " Type"
          type: string
        frame_a:
          title: Frame A
          type: string
        frame_b:
          title: Frame B
          type: string
        time:
          minimum: 0
          title: Time
          type: number
      required:
        - time
        - _type
        - frame_a
        - frame_b
      title: SwapPhases
      type: object
    TranslateNativeQuilToEncryptedBinaryRequest:
      properties:
        numShots:
          description: Number of iterations to execute on the control hardware
          title: Number of Shots
          type: integer
        quil:
          description: The native Quil program to be translated for execution
          title: Quil
          type: string
        settingsTimestamp:
          description: ISO8601 timestamp of the latest settings to be used in translation.
            If omitted, latest settings will be used.
          title: Settings Timestamp
          type: string
      required:
        - quil
        - numShots
      title: TranslateNativeQuilToEncryptedBinaryRequest
      type: object
    TranslateNativeQuilToEncryptedBinaryResponse:
      properties:
        memoryDescriptors:
          additionalProperties:
            $ref: "#/components/schemas/app__api__translation__models__ParameterSpec"
          default: {}
          title: Memory Descriptors
          type: object
        program:
          description: Encrypted binary built for execution on the target quantum processor
          title: Binary Program
          type: string
        roSources:
          default: []
          items:
            items:
              type: string
            type: array
          title: Readout Sources
          type: array
        settingsTimestamp:
          description: ISO8601 timestamp of the settings used to translate the program.
            Translation is deterministic; a program translated twice with the
            same settings by the same version of the service will have identical
            output.
          title: Settings Timestamp
          type: string
      required:
        - program
      title: TranslateNativeQuilToEncryptedBinaryResponse
      type: object
    app__api__translation__models__ParameterSpec:
      properties:
        length:
          default: 1
          title: Length
          type: integer
      title: ParameterSpec
      type: object
    rdm_legacy__schedule_ir__instruction_parameters__ParameterSpec:
      description: Specification of a dynamic parameter type and array-length.
      properties:
        _type:
          title: " Type"
          type: string
        length:
          default: 1
          title: Length
          type: integer
        type:
          $ref: "#/components/schemas/ParameterType"
      required:
        - _type
        - type
      title: ParameterSpec
      type: object
  securitySchemes:
    JWTBearer:
      bearerFormat: JWT
      description: A JSON web token with `sub` or `uid` claim, as well as `groups`
        claim. If the token is absent, invalid or expired, the client will
        receive a 401 response. If the token is valid, the server uses the
        claims to authorize the request, which may result in a 403 response.
      scheme: bearer
      type: http
    JWTBearerOptional:
      bearerFormat: JWT
      description: Same as `JWTBearer`, but the Authorization header is optionally
        parsed. Clients will receive a 401 response if an invalid or expired
        token is provided. Otherwise, the server authorizes the request against
        either the valid token claims or an unauthenticated user. In either
        case, the client may receive a 403 response.
      scheme: bearer
      type: http
  parameters:
    accountIdHeader:
      description: >
        Used to specify a subject account ID for a request.

        Does not take precedence over a corresponding request body field when one

        is present.
      in: header
      name: X-QCS-ACCOUNT-ID
      schema:
        $ref: "#/components/schemas/AccountId"
    accountTypeHeader:
      description: >
        Used to specify the subject account's type for a request

        in conjunction with the X-QCS-ACCOUNT-ID header.

        Does not take precedence over a corresponding request body field when one

        is present.
      in: header
      name: X-QCS-ACCOUNT-TYPE
      schema:
        $ref: "#/components/schemas/AccountType"
    filterParam:
      in: query
      name: filter
      schema:
        $ref: "#/components/schemas/Filter"
    filterRequiredParam:
      in: query
      name: filter
      required: true
      schema:
        $ref: "#/components/schemas/Filter"
      x-internal: true
    orderParam:
      in: query
      name: order
      required: false
      schema:
        $ref: "#/components/schemas/Order"
    pageSizeParam:
      in: query
      name: pageSize
      required: false
      schema:
        type: integer
    pageTokenParam:
      description: An opaque token that can be appended to a request query to retrieve
        the next page of results. Empty if there are no more results to
        retrieve.
      in: query
      name: pageToken
      required: false
      schema:
        type: string
    showDeleted:
      description: If you wish to include deleted (or cancelled) resources in your
        response, include `showDeleted=true`.
      in: query
      name: showDeleted
      required: false
      schema:
        default: "false"
        enum:
          - "true"
          - "false"
        type: string

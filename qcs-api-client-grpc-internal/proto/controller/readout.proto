syntax = "proto3";
package models.controller;
option go_package = "gitlab.com/rigetti/share/service-model/golang/controller";
import "google/protobuf/struct.proto";

// Complex64 is a 64-bit complex value with float32 real and imaginary parts
message Complex64 {
    float real = 1;
    float imaginary = 2;
}

// ReadoutValues are data readout values that have been read out from the quantum processor
// and optionally processed by a readout transformation pipeline.
message ReadoutValues {
    oneof values {
        .models.controller.IntegerReadoutValues integer_values = 1;
        .models.controller.Complex64ReadoutValues complex_values = 2;
    }
}

// IntegerReadoutValues are integer arrays emitted by a readout receiver or transformation pipeline.
// These may include (but are not limited to) qudit values or raw ADC capture data.
message IntegerReadoutValues {
    repeated int32 values = 1;
}

// Complex64ReadoutValues are arrays of complex numbers emitted by a readout receiver or transformation pipeline.
message Complex64ReadoutValues {
    repeated .models.controller.Complex64 values = 1;
}

// Uniquely identify a Tsunami to retrieve/"stream" capture data from
message TsunamiDataReceiver {

    // The name of the instrument within the `ControllerServiceStartupConfiguration`, i.e. `tsunami00`
    string instrument_name = 1;

    // Which card slot within the specified instrument
    uint32 card_index = 2;

    // Which sequencer within the specified card
    uint32 sequencer_index = 3;

    // Whether to process raw or integrated readout-pulse data
    bool raw = 4;

    // Whether to buffer and publish the data directly into the execution results
    bool publish = 5;
}

// The ReadoutPipeline specifies the components used to transform readout
// capture data prior to return to the user.
message ReadoutPipeline {
    map<string, .models.controller.ReadoutPipelineNode> nodes = 1;
}
message ReadoutPipelineNode {
    oneof node {
        .models.controller.ReadoutTransformation transformation = 101;
        .models.controller.TsunamiDataReceiver tsunami = 102;
    }
}
message ReadoutTransformation {

    // Name of the service-side function implementing this transformation.
    //
    // Note: different backends may support different transformation functions.
    string function = 1;

    // Parameters used to modify the behavior of the transformation function.
    // These are validated at runtime by the particular transformer itself.
    .google.protobuf.Struct params = 2;

    // Whether to publish the return values for this stream within the execution
    // results.
    bool publish = 3;

    // Which receiver or transformation node this transformation receives its data
    // from. This must match a key in ReadoutPipeline.nodes.
    string source_id = 4;
}

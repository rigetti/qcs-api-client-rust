default:
  image: registry.gitlab.com/rigetti/qcs/utilities/rust-ci-image:latest

workflow:
  rules:
    # Do not start a branch pipeline if a merge request is open
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    # Run CI on merge requests rather than branches
    - if: $CI_MERGE_REQUEST_IID
    # Run on every push to the default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  auto_cancel:
    on_new_commit: interruptible

include:
  - project: "rigetti/qcs/utilities/rust-ci-image"
    file: "defaults/ci.yaml"
  - project: "rigetti/qcs/utilities/qcs-ci-toolkit"
    file:
      - "gitlab-ci/git/setup.yaml"
      - "gitlab-ci/knope/install.yaml"
      - "gitlab-ci/protoc/install.yaml"
      - "gitlab-ci/qcs/setup-credentials.yaml"

.install_deps: &install_deps
  - apt-get update -y
  - apt-get install -y zip curl git python3.11 libpython3.11 libpython3.11-dev
  - ldd --version

.install-pyenv-and-python: &install-pyenv-and-python
  - curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
  - export PATH="$HOME/.pyenv/bin:$PATH"
  - eval "$(pyenv init -)"
  - env PYTHON_CONFIGURE_OPTS="--enable-shared" pyenv install "$PYTHON_VERSION"
  - pyenv global "$PYTHON_VERSION"
  - export LD_LIBRARY_PATH="$HOME/.pyenv/versions/$PYTHON_VERSION/lib:LD_LIBRARY_PATH"

stages:
  - test
  - publish

variables:
  PYTHON_VERSION: 3.11.9

.activate-venv: &activate-venv
  - *install-pyenv-and-python
  - pyenv virtualenv $PYTHON_VERSION qcs-api-client-common
  - pyenv activate qcs-api-client-common
  - export PATH=$VIRTUAL_ENV/bin:$PATH

  # Required for running ./scripts/commit-public-repo-update.sh, which uses Dasel to edit
# Cargo.toml. See https://daseldocs.tomwright.me/installation.
.install-dasel: &install-dasel
  - curl -sSLf "$(curl -sSLf https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | grep -v .gz | cut -d\" -f 4)" -L -o dasel && chmod +x dasel
  - mv ./dasel /usr/local/bin/dasel

stable:deny:
  extends: .cargo_deny
  stage: test
  before_script:
    - !reference [ .cargo_deny, before_script ]
    - !reference [ .install_protoc ]

stable:fmt:
  extends: .cargo_fmt
  stage: test
  before_script:
    - !reference [ .cargo_fmt, before_script ]
    - !reference [ .install_protoc ]

Lint:
  stage: test
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cargo --version
    - cargo make clippy

Lint (Python):
  stage: test
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cd qcs-api-client-common
    - *activate-venv
    - cargo make stubtest
    - ruff check

Test:
  stage: test
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cargo --version
    # This excludes integration tests without having to enumerate each test in the command.
    - cargo make test-with-args --lib
    - cargo make test-with-args --doc

Test (Python):
  stage: test
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cd qcs-api-client-common
    - *activate-venv
    - cargo make pytest

Check Proxy:
  stage: test
  services:
    - name: serjs/go-socks5-proxy
      alias: socks5
    - name: ubuntu/squid
      alias: squid
  variables:
    SOCKS5_URL: socks5://socks5:1080
    SQUID_URL: http://squid:3128
  before_script:
    - *install_deps
    - !reference [.install_protoc]
    - !reference [.setup_qcs]
  script:
    - cargo --version
    - cargo test -F docker -p proxy-test
  when: manual

.release:
  stage: publish
  variables:
    GIT_DEPTH: 0
  before_script:
    - *install_deps
    - !reference [.setup_git]
    - git_config_insteadof "${CI_PROJECT_PATH}" "${API_CLIENT_PUSH_TOKEN}"
    - git remote set-url origin "https://git:${API_CLIENT_PUSH_TOKEN}@gitlab.com/${CI_PROJECT_PATH}"
    - !reference [.install_protoc]
    - !reference [.install_knope]
    - *install-dasel
  script:
    - git checkout $CI_COMMIT_BRANCH  # Have to be on branch to push back
    - knope -v $KNOPE_ARGS

Release:
  extends: [.release]
  variables:
    KNOPE_ARGS: release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      # We cut new releases manually to avoid unnecessary versions & releases from immaterial changes
      when: manual

Release RC:
  extends: [.release]
  needs: []
  variables:
    KNOPE_ARGS: prerelease --verbose
  rules:
    - if: "$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
      when: manual

Release Dry Run:
  extends: [.release]
  variables:
    KNOPE_ARGS: release --dry-run

Build Rust Docs:
  stage: publish
  needs: []
  artifacts:
    paths:
      - public/rust
  script:
    - cargo doc --no-deps
    - mv target/doc public/rust

Build Python Docs:
  stage: publish
  needs: []
  artifacts:
    paths:
      - public/python
  script:
    - *activate-venv
    - (cd qcs-api-client-common && cargo make build-python-docs)
    - mv qcs-api-client-common/docs/build/html public/python

.pages:
  stage: publish
  artifacts:
    paths:
      - public
  needs:
    - Build Rust Docs
    - Build Python Docs
  before_script: []

pages:
  extends: .pages
  only:
    - main
  script:
    - echo "Deploying documentation for qcs-api-client-common"

pages-preview:
  extends: .pages
  except:
    refs:
      - main
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://rigetti.gitlab.io/-/qcs/clients/qcs-api-client-rust/-/jobs/$CI_JOB_ID/artifacts/public/index.html
  script:
    - echo "Deploying review app for $CI_COMMIT_REF_NAME"
